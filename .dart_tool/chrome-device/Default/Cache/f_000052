define(['dart_sdk', 'packages/mobx/src/utils.dart'], (function load__packages__mobx__src__api__extensions_dart(dart_sdk, packages__mobx__src__utils$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const _internal = dart_sdk._internal;
  const collection = dart_sdk.collection;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const utils = packages__mobx__src__utils$46dart.src__utils;
  var extensions = Object.create(dart.library);
  var atom_extensions = Object.create(dart.library);
  var reaction = Object.create(dart.library);
  var observable_collections = Object.create(dart.library);
  var async$ = Object.create(dart.library);
  var core$ = Object.create(dart.library);
  var context$ = Object.create(dart.library);
  var action = Object.create(dart.library);
  var mobx = Object.create(dart.library);
  var $length = dartx.length;
  var $sublist = dartx.sublist;
  var $plus = dartx['+'];
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $add = dartx.add;
  var $isNotEmpty = dartx.isNotEmpty;
  var $addAll = dartx.addAll;
  var $toList = dartx.toList;
  var $iterator = dartx.iterator;
  var $lastIndexWhere = dartx.lastIndexWhere;
  var $lastWhere = dartx.lastWhere;
  var $single = dartx.single;
  var $asMap = dartx.asMap;
  var $cast = dartx.cast;
  var $first = dartx.first;
  var $clear = dartx.clear;
  var $fillRange = dartx.fillRange;
  var $insert = dartx.insert;
  var $insertAll = dartx.insertAll;
  var $indexOf = dartx.indexOf;
  var $removeAt = dartx.removeAt;
  var $removeLast = dartx.removeLast;
  var $removeRange = dartx.removeRange;
  var $replaceRange = dartx.replaceRange;
  var $setAll = dartx.setAll;
  var $skip = dartx.skip;
  var $take = dartx.take;
  var $setRange = dartx.setRange;
  var $shuffle = dartx.shuffle;
  var $sort = dartx.sort;
  var $containsKey = dartx.containsKey;
  var $forEach = dartx.forEach;
  var $keys = dartx.keys;
  var $remove = dartx.remove;
  var $isEmpty = dartx.isEmpty;
  var $contains = dartx.contains;
  var $toSet = dartx.toSet;
  var $map = dartx.map;
  dart._checkModuleNullSafetyMode(true);
  var T$ = {
    ReactiveContextN: () => (T$.ReactiveContextN = dart.constFn(dart.nullable(core$.ReactiveContext)))(),
    StringN: () => (T$.StringN = dart.constFn(dart.nullable(core.String)))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    TAndTAndFnTovoid: () => (T$.TAndTAndFnTovoid = dart.constFn(dart.gFnType(T => [dart.void, [T, T, T$.VoidTovoid()]], T => [T$.ObjectN()])))(),
    VoidTodynamic: () => (T$.VoidTodynamic = dart.constFn(dart.fnType(dart.dynamic, [])))(),
    ObservableOfFutureStatus: () => (T$.ObservableOfFutureStatus = dart.constFn(core$.Observable$(async$.FutureStatus)))(),
    ObservableOfStreamStatus: () => (T$.ObservableOfStreamStatus = dart.constFn(core$.Observable$(async$.StreamStatus)))(),
    ObservableOf_ValueType: () => (T$.ObservableOf_ValueType = dart.constFn(core$.Observable$(async$._ValueType)))(),
    MapEntryOfSymbol$dynamic: () => (T$.MapEntryOfSymbol$dynamic = dart.constFn(core.MapEntry$(core.Symbol, dart.dynamic)))(),
    StringAnddynamicToMapEntryOfSymbol$dynamic: () => (T$.StringAnddynamicToMapEntryOfSymbol$dynamic = dart.constFn(dart.fnType(T$.MapEntryOfSymbol$dynamic(), [core.String, dart.dynamic])))(),
    LinkedHashSetOfDerivation: () => (T$.LinkedHashSetOfDerivation = dart.constFn(collection.LinkedHashSet$(core$.Derivation)))(),
    SetOfVoidTovoid: () => (T$.SetOfVoidTovoid = dart.constFn(core.Set$(T$.VoidTovoid())))(),
    SetNOfVoidTovoid: () => (T$.SetNOfVoidTovoid = dart.constFn(dart.nullable(T$.SetOfVoidTovoid())))(),
    LinkedMapOf_ListenerKind$SetNOfVoidTovoid: () => (T$.LinkedMapOf_ListenerKind$SetNOfVoidTovoid = dart.constFn(_js_helper.LinkedMap$(core$._ListenerKind, T$.SetNOfVoidTovoid())))(),
    FnTovoid: () => (T$.FnTovoid = dart.constFn(dart.fnType(dart.void, [T$.VoidTovoid()])))(),
    LinkedHashSetOfVoidTovoid: () => (T$.LinkedHashSetOfVoidTovoid = dart.constFn(collection.LinkedHashSet$(T$.VoidTovoid())))(),
    FnTobool: () => (T$.FnTobool = dart.constFn(dart.fnType(core.bool, [T$.VoidTovoid()])))(),
    LinkedHashSetOfAtom: () => (T$.LinkedHashSetOfAtom = dart.constFn(collection.LinkedHashSet$(core$.Atom)))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ReactionToNull: () => (T$.ReactionToNull = dart.constFn(dart.fnType(core.Null, [core$.Reaction])))(),
    JSArrayOfReaction: () => (T$.JSArrayOfReaction = dart.constFn(_interceptors.JSArray$(core$.Reaction)))(),
    JSArrayOfAtom: () => (T$.JSArrayOfAtom = dart.constFn(_interceptors.JSArray$(core$.Atom)))(),
    SpyEventTovoid: () => (T$.SpyEventTovoid = dart.constFn(dart.fnType(dart.void, [core$.SpyEvent])))(),
    JSArrayOfSpyEventTovoid: () => (T$.JSArrayOfSpyEventTovoid = dart.constFn(_interceptors.JSArray$(T$.SpyEventTovoid())))(),
    ObjectAndReactionTovoid: () => (T$.ObjectAndReactionTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core$.Reaction])))(),
    LinkedHashSetOfObjectAndReactionTovoid: () => (T$.LinkedHashSetOfObjectAndReactionTovoid = dart.constFn(collection.LinkedHashSet$(T$.ObjectAndReactionTovoid())))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    FnTobool$1: () => (T$.FnTobool$1 = dart.constFn(dart.fnType(core.bool, [T$.ObjectAndReactionTovoid()])))(),
    FnTovoid$1: () => (T$.FnTovoid$1 = dart.constFn(dart.fnType(dart.void, [T$.ObjectAndReactionTovoid()])))(),
    _HashSetOfFunction: () => (T$._HashSetOfFunction = dart.constFn(collection._HashSet$(core.Function)))(),
    ActionControllerN: () => (T$.ActionControllerN = dart.constFn(dart.nullable(core$.ActionController)))(),
    FnAndAtom__Tovoid: () => (T$.FnAndAtom__Tovoid = dart.constFn(dart.fnType(dart.void, [T$.VoidTovoid(), core$.Atom], {actionController: T$.ActionControllerN(), name: T$.StringN()}, {})))(),
    VoidToReactionImpl: () => (T$.VoidToReactionImpl = dart.constFn(dart.fnType(core$.ReactionImpl, [])))(),
    ReactionImplTodynamic: () => (T$.ReactionImplTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core$.ReactionImpl])))(),
    VoidToReactionDisposer: () => (T$.VoidToReactionDisposer = dart.constFn(dart.fnType(core$.ReactionDisposer, [])))(),
    ReactionDisposerTodynamic: () => (T$.ReactionDisposerTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core$.ReactionDisposer])))(),
    CompleterOfvoid: () => (T$.CompleterOfvoid = dart.constFn(async.Completer$(dart.void)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T$);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: core$.OperationType.prototype,
        [_name$]: "OperationType.update",
        index: 1
      });
    },
    get C1() {
      return C[1] = dart.fn(async$.AsyncAction._noOp, T$.VoidTodynamic());
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: async$.FutureStatus.prototype,
        [_name$0]: "FutureStatus.pending",
        index: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: async$.FutureStatus.prototype,
        [_name$0]: "FutureStatus.rejected",
        index: 1
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: async$.FutureStatus.prototype,
        [_name$0]: "FutureStatus.fulfilled",
        index: 2
      });
    },
    get C5() {
      return C[5] = dart.constList([C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4], async$.FutureStatus);
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: async$.StreamStatus.prototype,
        [_name$0]: "StreamStatus.waiting",
        index: 0
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: async$.StreamStatus.prototype,
        [_name$0]: "StreamStatus.active",
        index: 1
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: async$.StreamStatus.prototype,
        [_name$0]: "StreamStatus.done",
        index: 2
      });
    },
    get C9() {
      return C[9] = dart.constList([C[6] || CT.C6, C[7] || CT.C7, C[8] || CT.C8], async$.StreamStatus);
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: async$._ValueType.prototype,
        [_name$0]: "_ValueType.value",
        index: 0
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: async$._ValueType.prototype,
        [_name$0]: "_ValueType.error",
        index: 1
      });
    },
    get C12() {
      return C[12] = dart.constList([C[10] || CT.C10, C[11] || CT.C11], async$._ValueType);
    },
    get C13() {
      return C[13] = dart.constList([], dart.dynamic);
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: core$._ListenerKind.prototype,
        [_name$]: "_ListenerKind.onBecomeObserved",
        index: 0
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: core$._ListenerKind.prototype,
        [_name$]: "_ListenerKind.onBecomeUnobserved",
        index: 1
      });
    },
    get C16() {
      return C[16] = dart.constList([C[14] || CT.C14, C[15] || CT.C15], core$._ListenerKind);
    },
    get C17() {
      return C[17] = dart.fn(core$.Atom._notifyListener, T$.FnTovoid());
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: core$.OperationType.prototype,
        [_name$]: "OperationType.add",
        index: 0
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: core$.OperationType.prototype,
        [_name$]: "OperationType.remove",
        index: 2
      });
    },
    get C20() {
      return C[20] = dart.constList([C[18] || CT.C18, C[0] || CT.C0, C[19] || CT.C19], core$.OperationType);
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: core$.ReactiveReadPolicy.prototype,
        [_name$]: "ReactiveReadPolicy.always",
        index: 0
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: core$.ReactiveReadPolicy.prototype,
        [_name$]: "ReactiveReadPolicy.never",
        index: 1
      });
    },
    get C23() {
      return C[23] = dart.constList([C[21] || CT.C21, C[22] || CT.C22], core$.ReactiveReadPolicy);
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: core$.ReactiveWritePolicy.prototype,
        [_name$]: "ReactiveWritePolicy.observed",
        index: 0
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: core$.ReactiveWritePolicy.prototype,
        [_name$]: "ReactiveWritePolicy.always",
        index: 1
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: core$.ReactiveWritePolicy.prototype,
        [_name$]: "ReactiveWritePolicy.never",
        index: 2
      });
    },
    get C27() {
      return C[27] = dart.constList([C[24] || CT.C24, C[25] || CT.C25, C[26] || CT.C26], core$.ReactiveWritePolicy);
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: core$.DerivationState.prototype,
        [_name$]: "DerivationState.upToDate",
        index: 1
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: core$.DerivationState.prototype,
        [_name$]: "DerivationState.notTracking",
        index: 0
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: core$.DerivationState.prototype,
        [_name$]: "DerivationState.stale",
        index: 3
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: core$.DerivationState.prototype,
        [_name$]: "DerivationState.possiblyStale",
        index: 2
      });
    },
    get C32() {
      return C[32] = dart.constList([C[29] || CT.C29, C[28] || CT.C28, C[31] || CT.C31, C[30] || CT.C30], core$.DerivationState);
    }
  }, false);
  var C = Array(33).fill(void 0);
  var I = [
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/api/extensions/observable_future_extension.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/api/extensions/observable_list_extension.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/api/extensions/observable_map_extension.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/api/extensions/observable_set_extension.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/api/extensions/observable_stream_extension.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/core/atom_extensions.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/api/reaction.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/api/observable_collections/observable_list.dart",
    "package:mobx/src/api/observable_collections.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/api/observable_collections/observable_map.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/api/observable_collections/observable_set.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/api/async/async_action.dart",
    "package:mobx/src/api/async.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/api/async/observable_future.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/api/async/observable_stream.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/core.dart",
    "package:mobx/src/core.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/core/action.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/core/atom.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/core/computed.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/core/context.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/core/derivation.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/core/notification_handlers.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/core/observable.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/core/reaction.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/core/reaction_helper.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/interceptable.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/listenable.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/core/spy.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/core/context_extensions.dart",
    "file:///C:/flutter/.pub-cache/hosted/pub.dartlang.org/mobx-2.0.1/lib/src/api/action.dart"
  ];
  extensions['ObservableFutureExtension|asObservable'] = function ObservableFutureExtension$124asObservable(T, $this, opts) {
    if ($this == null) dart.nullFailed(I[0], 5, 23, "#this");
    let context = opts && 'context' in opts ? opts.context : null;
    let name = opts && 'name' in opts ? opts.name : null;
    return new (async$.ObservableFuture$(T)).new($this, {context: context, name: name});
  };
  extensions['ObservableFutureExtension|get#asObservable'] = function ObservableFutureExtension$124get$35asObservable(T, $this) {
    if ($this == null) dart.nullFailed(I[0], 5, 23, "#this");
    return dart.fn(opts => {
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      return extensions['ObservableFutureExtension|asObservable'](T, $this, {context: context, name: name});
    }, dart.fnType(async$.ObservableFuture$(T), [], {context: T$.ReactiveContextN(), name: T$.StringN()}, {}));
  };
  extensions['ObservableListExtension|asObservable'] = function ObservableListExtension$124asObservable(T, $this, opts) {
    if ($this == null) dart.nullFailed(I[1], 5, 21, "#this");
    let context = opts && 'context' in opts ? opts.context : null;
    let name = opts && 'name' in opts ? opts.name : null;
    return new (observable_collections.ObservableList$(T)).of($this, {context: context, name: name});
  };
  extensions['ObservableListExtension|get#asObservable'] = function ObservableListExtension$124get$35asObservable(T, $this) {
    if ($this == null) dart.nullFailed(I[1], 5, 21, "#this");
    return dart.fn(opts => {
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      return extensions['ObservableListExtension|asObservable'](T, $this, {context: context, name: name});
    }, dart.fnType(observable_collections.ObservableList$(T), [], {context: T$.ReactiveContextN(), name: T$.StringN()}, {}));
  };
  extensions['ObservableMapExtension|asObservable'] = function ObservableMapExtension$124asObservable(K, V, $this, opts) {
    if ($this == null) dart.nullFailed(I[2], 5, 23, "#this");
    let context = opts && 'context' in opts ? opts.context : null;
    let name = opts && 'name' in opts ? opts.name : null;
    return new (observable_collections.ObservableMap$(K, V)).of($this, {context: context, name: name});
  };
  extensions['ObservableMapExtension|get#asObservable'] = function ObservableMapExtension$124get$35asObservable(K, V, $this) {
    if ($this == null) dart.nullFailed(I[2], 5, 23, "#this");
    return dart.fn(opts => {
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      return extensions['ObservableMapExtension|asObservable'](K, V, $this, {context: context, name: name});
    }, dart.fnType(observable_collections.ObservableMap$(K, V), [], {context: T$.ReactiveContextN(), name: T$.StringN()}, {}));
  };
  extensions['ObservableSetExtension|asObservable'] = function ObservableSetExtension$124asObservable(T, $this, opts) {
    if ($this == null) dart.nullFailed(I[3], 5, 20, "#this");
    let context = opts && 'context' in opts ? opts.context : null;
    let name = opts && 'name' in opts ? opts.name : null;
    return new (observable_collections.ObservableSet$(T)).of($this, {context: context, name: name});
  };
  extensions['ObservableSetExtension|get#asObservable'] = function ObservableSetExtension$124get$35asObservable(T, $this) {
    if ($this == null) dart.nullFailed(I[3], 5, 20, "#this");
    return dart.fn(opts => {
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      return extensions['ObservableSetExtension|asObservable'](T, $this, {context: context, name: name});
    }, dart.fnType(observable_collections.ObservableSet$(T), [], {context: T$.ReactiveContextN(), name: T$.StringN()}, {}));
  };
  extensions['ObservableStreamExtension|asObservable'] = function ObservableStreamExtension$124asObservable(T, $this, opts) {
    if ($this == null) dart.nullFailed(I[4], 5, 23, "#this");
    let initialValue = opts && 'initialValue' in opts ? opts.initialValue : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : false;
    if (cancelOnError == null) dart.nullFailed(I[4], 7, 16, "cancelOnError");
    let context = opts && 'context' in opts ? opts.context : null;
    let name = opts && 'name' in opts ? opts.name : null;
    return new (async$.ObservableStream$(T)).new($this, {initialValue: initialValue, cancelOnError: cancelOnError, context: context, name: name});
  };
  extensions['ObservableStreamExtension|get#asObservable'] = function ObservableStreamExtension$124get$35asObservable(T, $this) {
    if ($this == null) dart.nullFailed(I[4], 5, 23, "#this");
    return dart.fn(opts => {
      let initialValue = opts && 'initialValue' in opts ? opts.initialValue : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : false;
      if (cancelOnError == null) dart.nullFailed(I[4], 7, 16, "cancelOnError");
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      return extensions['ObservableStreamExtension|asObservable'](T, $this, {initialValue: initialValue, cancelOnError: cancelOnError, context: context, name: name});
    }, dart.fnType(async$.ObservableStream$(T), [], {cancelOnError: core.bool, context: T$.ReactiveContextN(), initialValue: dart.nullable(T), name: T$.StringN()}, {}));
  };
  atom_extensions['AtomSpyReporter|reportRead'] = function AtomSpyReporter$124reportRead($this) {
    if ($this == null) dart.nullFailed(I[5], 4, 8, "#this");
    $this.context.enforceReadPolicy($this);
    $this.reportObserved();
  };
  atom_extensions['AtomSpyReporter|get#reportRead'] = function AtomSpyReporter$124get$35reportRead($this) {
    if ($this == null) dart.nullFailed(I[5], 4, 8, "#this");
    return dart.fn(() => atom_extensions['AtomSpyReporter|reportRead']($this), T$.VoidTovoid());
  };
  atom_extensions['AtomSpyReporter|reportWrite'] = function AtomSpyReporter$124reportWrite(T, $this, newValue, oldValue, setNewValue) {
    if ($this == null) dart.nullFailed(I[5], 9, 8, "#this");
    if (setNewValue == null) dart.nullFailed(I[5], 9, 63, "setNewValue");
    $this.context.spyReport(new core$.ObservableValueSpyEvent.new($this, {newValue: newValue, oldValue: oldValue, name: $this.name}));
    core$['ConditionalAction|conditionallyRunInAction']($this.context, dart.fn(() => {
      setNewValue();
      $this.reportChanged();
    }, T$.VoidTovoid()), $this, {name: dart.str($this.name) + "_set"});
    $this.context.spyReport(new core$.EndedSpyEvent.new({type: "observable", name: $this.name}));
  };
  atom_extensions['AtomSpyReporter|get#reportWrite'] = function AtomSpyReporter$124get$35reportWrite($this) {
    if ($this == null) dart.nullFailed(I[5], 9, 8, "#this");
    return dart.fn((T, newValue, oldValue, setNewValue) => {
      if (setNewValue == null) dart.nullFailed(I[5], 9, 63, "setNewValue");
      return atom_extensions['AtomSpyReporter|reportWrite'](T, $this, newValue, oldValue, setNewValue);
    }, T$.TAndTAndFnTovoid());
  };
  reaction.autorun = function autorun(fn, opts) {
    let t14;
    if (fn == null) dart.nullFailed(I[6], 26, 45, "fn");
    let name = opts && 'name' in opts ? opts.name : null;
    let delay = opts && 'delay' in opts ? opts.delay : null;
    let context = opts && 'context' in opts ? opts.context : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    return core$.createAutorun((t14 = context, t14 == null ? context$.mainContext : t14), fn, {name: name, delay: delay, onError: onError});
  };
  reaction.reaction = function reaction$(T, fn, effect, opts) {
    let t14;
    if (fn == null) dart.nullFailed(I[6], 47, 51, "fn");
    if (effect == null) dart.nullFailed(I[6], 47, 72, "effect");
    let name = opts && 'name' in opts ? opts.name : null;
    let delay = opts && 'delay' in opts ? opts.delay : null;
    let fireImmediately = opts && 'fireImmediately' in opts ? opts.fireImmediately : null;
    let equals = opts && 'equals' in opts ? opts.equals : null;
    let context = opts && 'context' in opts ? opts.context : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    return core$.createReaction(T, (t14 = context, t14 == null ? context$.mainContext : t14), fn, effect, {name: name, delay: delay, equals: equals, fireImmediately: fireImmediately, onError: onError});
  };
  reaction.when = function when(predicate, effect, opts) {
    let t14;
    if (predicate == null) dart.nullFailed(I[6], 67, 47, "predicate");
    if (effect == null) dart.nullFailed(I[6], 67, 74, "effect");
    let name = opts && 'name' in opts ? opts.name : null;
    let context = opts && 'context' in opts ? opts.context : null;
    let timeout = opts && 'timeout' in opts ? opts.timeout : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    return core$.createWhenReaction((t14 = context, t14 == null ? context$.mainContext : t14), predicate, effect, {name: name, timeout: timeout, onError: onError});
  };
  reaction.asyncWhen = function asyncWhen(predicate, opts) {
    let t14;
    if (predicate == null) dart.nullFailed(I[6], 83, 48, "predicate");
    let name = opts && 'name' in opts ? opts.name : null;
    let timeout = opts && 'timeout' in opts ? opts.timeout : null;
    let context = opts && 'context' in opts ? opts.context : null;
    return core$.createAsyncWhenReaction((t14 = context, t14 == null ? context$.mainContext : t14), predicate, {name: name, timeout: timeout});
  };
  var _listenersField = dart.privateName(observable_collections, "_listenersField");
  var _atom$ = dart.privateName(observable_collections, "_atom");
  var _list$ = dart.privateName(observable_collections, "_list");
  var _context$ = dart.privateName(observable_collections, "_context");
  var _listeners = dart.privateName(observable_collections, "_listeners");
  var _notifyRangeUpdate = dart.privateName(observable_collections, "_notifyRangeUpdate");
  var _notifyElementUpdate = dart.privateName(observable_collections, "_notifyElementUpdate");
  var _notifyElementsUpdate = dart.privateName(observable_collections, "_notifyElementsUpdate");
  var _name$ = dart.privateName(core$, "_name");
  const _is_ObservableList_default = Symbol('_is_ObservableList_default');
  observable_collections.ObservableList$ = dart.generic(T => {
    var JSArrayOfT = () => (JSArrayOfT = dart.constFn(_interceptors.JSArray$(T)))();
    var ListOfT = () => (ListOfT = dart.constFn(core.List$(T)))();
    var ListChangeOfT = () => (ListChangeOfT = dart.constFn(observable_collections.ListChange$(T)))();
    var ListenersOfListChangeOfT = () => (ListenersOfListChangeOfT = dart.constFn(core$.Listeners$(ListChangeOfT())))();
    var IterableOfT = () => (IterableOfT = dart.constFn(core.Iterable$(T)))();
    var VoidToT = () => (VoidToT = dart.constFn(dart.fnType(T, [])))();
    var VoidToNT = () => (VoidToNT = dart.constFn(dart.nullable(VoidToT())))();
    var ObservableMapOfint$T = () => (ObservableMapOfint$T = dart.constFn(observable_collections.ObservableMap$(core.int, T)))();
    var TN = () => (TN = dart.constFn(dart.nullable(T)))();
    var TTodynamic = () => (TTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T])))();
    var ElementChangeOfT = () => (ElementChangeOfT = dart.constFn(observable_collections.ElementChange$(T)))();
    var ListQueueOfElementChangeOfT = () => (ListQueueOfElementChangeOfT = dart.constFn(collection.ListQueue$(ElementChangeOfT())))();
    var JSArrayOfElementChangeOfT = () => (JSArrayOfElementChangeOfT = dart.constFn(_interceptors.JSArray$(ElementChangeOfT())))();
    var RangeChangeOfT = () => (RangeChangeOfT = dart.constFn(observable_collections.RangeChange$(T)))();
    var JSArrayOfRangeChangeOfT = () => (JSArrayOfRangeChangeOfT = dart.constFn(_interceptors.JSArray$(RangeChangeOfT())))();
    const Object_ListMixin$36 = class Object_ListMixin extends core.Object {};
    (Object_ListMixin$36.new = function() {
    }).prototype = Object_ListMixin$36.prototype;
    dart.applyMixin(Object_ListMixin$36, collection.ListMixin$(T));
    class ObservableList extends Object_ListMixin$36 {
      get [_listeners]() {
        let t14;
        t14 = this[_listenersField];
        return t14 == null ? this[_listenersField] = new (ListenersOfListChangeOfT()).new(this[_context$]) : t14;
      }
      get name() {
        return this[_atom$].name;
      }
      get length() {
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_list$][$length];
      }
      set length(value) {
        if (value == null) dart.nullFailed(I[7], 60, 18, "value");
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.notNull(value) < dart.notNull(this[_list$][$length])) {
            let removed = this[_list$][$sublist](value);
            this[_list$][$length] = value;
            this[_notifyRangeUpdate](value, null, removed);
          } else if (dart.notNull(value) > dart.notNull(this[_list$][$length])) {
            let index = this[_list$][$length];
            this[_list$][$length] = value;
            this[_notifyRangeUpdate](index, this[_list$][$sublist](index), null);
          }
        }, T$.VoidTovoid()), this[_atom$]);
      }
      ['+'](other) {
        ListOfT().as(other);
        if (other == null) dart.nullFailed(I[7], 76, 30, "other");
        this[_context$].enforceReadPolicy(this[_atom$]);
        let newList = this[_list$][$plus](other);
        this[_atom$].reportObserved();
        return newList;
      }
      _get(index) {
        if (index == null) dart.nullFailed(I[7], 85, 21, "index");
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_list$][$_get](index);
      }
      _set(index, value$) {
        let value = value$;
        if (index == null) dart.nullFailed(I[7], 93, 25, "index");
        T.as(value);
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          let oldValue = this[_list$][$_get](index);
          if (!dart.equals(oldValue, value)) {
            this[_list$][$_set](index, value);
            this[_notifyElementUpdate](index, value, oldValue);
          }
        }, T$.VoidTovoid()), this[_atom$]);
        return value$;
      }
      add(element) {
        T.as(element);
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          let index = this[_list$][$length];
          this[_list$][$add](element);
          this[_notifyElementUpdate](index, element, null, {type: core$.OperationType.add});
        }, T$.VoidTovoid()), this[_atom$]);
      }
      addAll(iterable) {
        IterableOfT().as(iterable);
        if (iterable == null) dart.nullFailed(I[7], 114, 27, "iterable");
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.test(iterable[$isNotEmpty])) {
            let index = this[_list$][$length];
            this[_list$][$addAll](iterable);
            this[_notifyRangeUpdate](index, iterable[$toList]({growable: false}), null);
          }
        }, T$.VoidTovoid()), this[_atom$]);
      }
      get iterator() {
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_list$][$iterator];
      }
      lastIndexWhere(test, start = null) {
        if (test == null) dart.nullFailed(I[7], 133, 47, "test");
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_list$][$lastIndexWhere](test, start);
      }
      lastWhere(test, opts) {
        if (test == null) dart.nullFailed(I[7], 141, 40, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNT().as(orElse);
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_list$][$lastWhere](test, {orElse: orElse});
      }
      get single() {
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_list$][$single];
      }
      sublist(start, end = null) {
        if (start == null) dart.nullFailed(I[7], 157, 23, "start");
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_list$][$sublist](start, end);
      }
      asMap() {
        return new (ObservableMapOfint$T())._wrap(this[_context$], this[_list$][$asMap](), this[_atom$]);
      }
      cast(R) {
        return new (observable_collections.ObservableList$(R))._wrap(this[_context$], this[_atom$], this[_list$][$cast](R));
      }
      toList(opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        if (growable == null) dart.nullFailed(I[7], 171, 24, "growable");
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_list$][$toList]({growable: growable});
      }
      set first(value) {
        T.as(value);
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          let oldValue = this[_list$][$first];
          if (!dart.equals(oldValue, value)) {
            this[_list$][$first] = value;
            this[_notifyElementUpdate](0, value, oldValue);
          }
        }, T$.VoidTovoid()), this[_atom$]);
      }
      get first() {
        return super.first;
      }
      clear() {
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.test(this[_list$][$isNotEmpty])) {
            let oldItems = this[_list$][$toList]({growable: false});
            this[_list$][$clear]();
            this[_notifyRangeUpdate](0, null, oldItems);
          }
        }, T$.VoidTovoid()), this[_atom$]);
      }
      fillRange(start, end, fill = null) {
        if (start == null) dart.nullFailed(I[7], 201, 22, "start");
        if (end == null) dart.nullFailed(I[7], 201, 33, "end");
        TN().as(fill);
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.notNull(end) > dart.notNull(start)) {
            let oldContents = this[_list$][$sublist](start, end);
            this[_list$][$fillRange](start, end, fill);
            let newContents = this[_list$][$sublist](start, end);
            this[_notifyRangeUpdate](start, newContents, oldContents);
          }
        }, T$.VoidTovoid()), this[_atom$]);
      }
      insert(index, element) {
        if (index == null) dart.nullFailed(I[7], 213, 19, "index");
        T.as(element);
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          this[_list$][$insert](index, element);
          this[_notifyElementUpdate](index, element, null, {type: core$.OperationType.add});
        }, T$.VoidTovoid()), this[_atom$]);
      }
      insertAll(index, iterable) {
        if (index == null) dart.nullFailed(I[7], 221, 22, "index");
        IterableOfT().as(iterable);
        if (iterable == null) dart.nullFailed(I[7], 221, 41, "iterable");
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.test(iterable[$isNotEmpty])) {
            this[_list$][$insertAll](index, iterable);
            this[_notifyRangeUpdate](index, iterable[$toList]({growable: false}), null);
          }
        }, T$.VoidTovoid()), this[_atom$]);
      }
      remove(element) {
        let didRemove = false;
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          let index = this[_list$][$indexOf](T.as(element));
          if (dart.notNull(index) >= 0) {
            this[_list$][$removeAt](index);
            this[_notifyElementUpdate](index, null, element, {type: core$.OperationType.remove});
            didRemove = true;
          }
        }, T$.VoidTovoid()), this[_atom$]);
        return didRemove;
      }
      removeAt(index) {
        if (index == null) dart.nullFailed(I[7], 247, 18, "index");
        let value = null;
        let value$35isSet = false;
        function value$35get() {
          return value$35isSet ? value : dart.throw(new _internal.LateError.localNI("value"));
        }
        dart.fn(value$35get, VoidToT());
        function value$35set(t17) {
          value$35isSet = true;
          return value = t17;
        }
        dart.fn(value$35set, TTodynamic());
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          value$35set(this[_list$][$removeAt](index));
          this[_notifyElementUpdate](index, null, value$35get(), {type: core$.OperationType.remove});
        }, T$.VoidTovoid()), this[_atom$]);
        return value$35get();
      }
      removeLast() {
        let value = null;
        let value$35isSet = false;
        function value$35get() {
          return value$35isSet ? value : dart.throw(new _internal.LateError.localNI("value"));
        }
        dart.fn(value$35get, VoidToT());
        function value$35set(t22) {
          value$35isSet = true;
          return value = t22;
        }
        dart.fn(value$35set, TTodynamic());
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          value$35set(this[_list$][$removeLast]());
          this[_notifyElementUpdate](this[_list$][$length], null, value$35get(), {type: core$.OperationType.remove});
        }, T$.VoidTovoid()), this[_atom$]);
        return value$35get();
      }
      removeRange(start, end) {
        if (start == null) dart.nullFailed(I[7], 273, 24, "start");
        if (end == null) dart.nullFailed(I[7], 273, 35, "end");
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.notNull(end) > dart.notNull(start)) {
            let removedItems = this[_list$][$sublist](start, end);
            this[_list$][$removeRange](start, end);
            this[_notifyRangeUpdate](start, null, removedItems);
          }
        }, T$.VoidTovoid()), this[_atom$]);
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(I[7], 284, 45, "test");
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          let removedElements = new (ListQueueOfElementChangeOfT()).new();
          for (let i = dart.notNull(this[_list$][$length]) - 1; i >= 0; i = i - 1) {
            let element = this[_list$][$_get](i);
            if (dart.test(test(element))) {
              removedElements.addFirst(new (ElementChangeOfT()).new({index: i, oldValue: element, type: core$.OperationType.remove}));
              this[_list$][$removeAt](i);
            }
          }
          if (dart.test(removedElements[$isNotEmpty])) {
            this[_notifyElementsUpdate](removedElements[$toList]({growable: false}));
          }
        }, T$.VoidTovoid()), this[_atom$]);
      }
      replaceRange(start, end, newContents) {
        if (start == null) dart.nullFailed(I[7], 302, 25, "start");
        if (end == null) dart.nullFailed(I[7], 302, 36, "end");
        IterableOfT().as(newContents);
        if (newContents == null) dart.nullFailed(I[7], 302, 53, "newContents");
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.notNull(end) > dart.notNull(start) || dart.test(newContents[$isNotEmpty])) {
            let oldContents = this[_list$][$sublist](start, end);
            this[_list$][$replaceRange](start, end, newContents);
            this[_notifyRangeUpdate](start, newContents[$toList]({growable: false}), oldContents);
          }
        }, T$.VoidTovoid()), this[_atom$]);
      }
      retainWhere(test) {
        if (test == null) dart.nullFailed(I[7], 314, 45, "test");
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          let removedElements = new (ListQueueOfElementChangeOfT()).new();
          for (let i = dart.notNull(this[_list$][$length]) - 1; i >= 0; i = i - 1) {
            let element = this[_list$][$_get](i);
            if (!dart.test(test(element))) {
              removedElements.addFirst(new (ElementChangeOfT()).new({index: i, oldValue: element, type: core$.OperationType.remove}));
              this[_list$][$removeAt](i);
            }
          }
          if (dart.test(removedElements[$isNotEmpty])) {
            this[_notifyElementsUpdate](removedElements[$toList]({growable: false}));
          }
        }, T$.VoidTovoid()), this[_atom$]);
      }
      setAll(index, iterable) {
        if (index == null) dart.nullFailed(I[7], 332, 19, "index");
        IterableOfT().as(iterable);
        if (iterable == null) dart.nullFailed(I[7], 332, 38, "iterable");
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.test(iterable[$isNotEmpty])) {
            let oldValues = this[_list$][$sublist](index, dart.notNull(index) + dart.notNull(iterable[$length]));
            let newValues = iterable[$toList]({growable: false});
            this[_list$][$setAll](index, iterable);
            this[_notifyRangeUpdate](index, newValues, oldValues);
          }
        }, T$.VoidTovoid()), this[_atom$]);
      }
      setRange(start, end, iterable, skipCount = 0) {
        if (start == null) dart.nullFailed(I[7], 344, 21, "start");
        if (end == null) dart.nullFailed(I[7], 344, 32, "end");
        IterableOfT().as(iterable);
        if (iterable == null) dart.nullFailed(I[7], 344, 49, "iterable");
        if (skipCount == null) dart.nullFailed(I[7], 344, 64, "skipCount");
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.notNull(end) > dart.notNull(start)) {
            let oldValues = this[_list$][$sublist](start, end);
            let newValues = iterable[$skip](skipCount)[$take](dart.notNull(end) - dart.notNull(start))[$toList]({growable: false});
            this[_list$][$setRange](start, end, iterable, skipCount);
            this[_notifyRangeUpdate](start, newValues, oldValues);
          }
        }, T$.VoidTovoid()), this[_atom$]);
      }
      shuffle(random = null) {
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.test(this[_list$][$isNotEmpty])) {
            let oldList = this[_list$][$toList]({growable: false});
            this[_list$][$shuffle](random);
            let changes = JSArrayOfElementChangeOfT().of([]);
            for (let i = 0; i < dart.notNull(this[_list$][$length]); i = i + 1) {
              let oldValue = oldList[$_get](i);
              let newValue = this[_list$][$_get](i);
              if (!dart.equals(newValue, oldValue)) {
                changes[$add](new (ElementChangeOfT()).new({index: i, oldValue: oldValue, newValue: newValue}));
              }
            }
            if (dart.test(changes[$isNotEmpty])) {
              this[_notifyElementsUpdate](changes);
            }
          }
        }, T$.VoidTovoid()), this[_atom$]);
      }
      sort(compare = null) {
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.test(this[_list$][$isNotEmpty])) {
            let oldList = this[_list$][$toList]({growable: false});
            this[_list$][$sort](compare);
            let changes = JSArrayOfElementChangeOfT().of([]);
            for (let i = 0; i < dart.notNull(this[_list$][$length]); i = i + 1) {
              let oldValue = oldList[$_get](i);
              let newValue = this[_list$][$_get](i);
              if (!dart.equals(newValue, oldValue)) {
                changes[$add](new (ElementChangeOfT()).new({index: i, oldValue: oldValue, newValue: newValue}));
              }
            }
            if (dart.test(changes[$isNotEmpty])) {
              this[_notifyElementsUpdate](changes);
            }
          }
        }, T$.VoidTovoid()), this[_atom$]);
      }
      observe(listener, opts) {
        if (listener == null) dart.nullFailed(I[7], 405, 43, "listener");
        let fireImmediately = opts && 'fireImmediately' in opts ? opts.fireImmediately : false;
        if (fireImmediately == null) dart.nullFailed(I[7], 406, 13, "fireImmediately");
        if (fireImmediately === true) {
          let change = new (ListChangeOfT()).new({list: this, rangeChanges: JSArrayOfRangeChangeOfT().of([new (RangeChangeOfT()).new({index: 0, newValues: this.toList({growable: false})})])});
          listener(change);
        }
        return this[_listeners].add(listener);
      }
      [_notifyElementUpdate](index, newValue, oldValue, opts) {
        if (index == null) dart.nullFailed(I[7], 417, 33, "index");
        let type = opts && 'type' in opts ? opts.type : C[0] || CT.C0;
        if (type == null) dart.nullFailed(I[7], 418, 22, "type");
        this[_atom$].reportChanged();
        let change = new (ListChangeOfT()).new({list: this, elementChanges: JSArrayOfElementChangeOfT().of([new (ElementChangeOfT()).new({index: index, newValue: newValue, oldValue: oldValue, type: type})])});
        this[_listeners].notifyListeners(change);
      }
      [_notifyElementsUpdate](elementChanges) {
        if (elementChanges == null) dart.nullFailed(I[7], 429, 59, "elementChanges");
        this[_atom$].reportChanged();
        let change = new (ListChangeOfT()).new({list: this, elementChanges: elementChanges});
        this[_listeners].notifyListeners(change);
      }
      [_notifyRangeUpdate](index, newValues, oldValues) {
        if (index == null) dart.nullFailed(I[7], 437, 31, "index");
        this[_atom$].reportChanged();
        let change = new (ListChangeOfT()).new({list: this, rangeChanges: JSArrayOfRangeChangeOfT().of([new (RangeChangeOfT()).new({index: index, newValues: newValues, oldValues: oldValues})])});
        this[_listeners].notifyListeners(change);
      }
    }
    (ObservableList.new = function(opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      ObservableList._wrap.call(this, context, observable_collections._observableListAtom(T, context, name), JSArrayOfT().of([]));
    }).prototype = ObservableList.prototype;
    (ObservableList.of = function(elements, opts) {
      if (elements == null) dart.nullFailed(I[7], 31, 33, "elements");
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      ObservableList._wrap.call(this, context, observable_collections._observableListAtom(T, context, name), ListOfT().of(elements, {growable: true}));
    }).prototype = ObservableList.prototype;
    (ObservableList._wrap = function(context, _atom, _list) {
      let t14;
      if (_atom == null) dart.nullFailed(I[7], 36, 55, "_atom");
      if (_list == null) dart.nullFailed(I[7], 36, 67, "_list");
      this[_listenersField] = null;
      this[_atom$] = _atom;
      this[_list$] = _list;
      this[_context$] = (t14 = context, t14 == null ? context$.mainContext : t14);
      ;
    }).prototype = ObservableList.prototype;
    dart.addTypeTests(ObservableList);
    ObservableList.prototype[_is_ObservableList_default] = true;
    dart.addTypeCaches(ObservableList);
    ObservableList[dart.implements] = () => [core$.Listenable$(observable_collections.ListChange$(T))];
    dart.setMethodSignature(ObservableList, () => ({
      __proto__: dart.getMethods(ObservableList.__proto__),
      _get: dart.fnType(T, [core.int]),
      [$_get]: dart.fnType(T, [core.int]),
      _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      cast: dart.gFnType(R => [core.List$(R), []], R => [dart.nullable(core.Object)]),
      [$cast]: dart.gFnType(R => [core.List$(R), []], R => [dart.nullable(core.Object)]),
      observe: dart.fnType(dart.fnType(dart.void, []), [dart.fnType(dart.void, [observable_collections.ListChange$(T)])], {fireImmediately: core.bool}, {}),
      [_notifyElementUpdate]: dart.fnType(dart.void, [core.int, dart.nullable(T), dart.nullable(T)], {type: core$.OperationType}, {}),
      [_notifyElementsUpdate]: dart.fnType(dart.void, [core.List$(observable_collections.ElementChange$(T))]),
      [_notifyRangeUpdate]: dart.fnType(dart.void, [core.int, dart.nullable(core.List$(T)), dart.nullable(core.List$(T))])
    }));
    dart.setGetterSignature(ObservableList, () => ({
      __proto__: dart.getGetters(ObservableList.__proto__),
      [_listeners]: core$.Listeners$(observable_collections.ListChange$(T)),
      name: core.String,
      length: core.int,
      [$length]: core.int
    }));
    dart.setSetterSignature(ObservableList, () => ({
      __proto__: dart.getSetters(ObservableList.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setLibraryUri(ObservableList, I[8]);
    dart.setFieldSignature(ObservableList, () => ({
      __proto__: dart.getFields(ObservableList.__proto__),
      [_context$]: dart.finalFieldType(core$.ReactiveContext),
      [_atom$]: dart.finalFieldType(core$.Atom),
      [_list$]: dart.finalFieldType(core.List$(T)),
      [_listenersField]: dart.fieldType(dart.nullable(core$.Listeners$(observable_collections.ListChange$(T))))
    }));
    dart.defineExtensionMethods(ObservableList, [
      '+',
      '_get',
      '_set',
      'add',
      'addAll',
      'lastIndexWhere',
      'lastWhere',
      'sublist',
      'asMap',
      'cast',
      'toList',
      'clear',
      'fillRange',
      'insert',
      'insertAll',
      'remove',
      'removeAt',
      'removeLast',
      'removeRange',
      'removeWhere',
      'replaceRange',
      'retainWhere',
      'setAll',
      'setRange',
      'shuffle',
      'sort'
    ]);
    dart.defineExtensionAccessors(ObservableList, ['length', 'iterator', 'single', 'first']);
    return ObservableList;
  });
  observable_collections.ObservableList = observable_collections.ObservableList$();
  dart.addTypeTests(observable_collections.ObservableList, _is_ObservableList_default);
  var index$ = dart.privateName(observable_collections, "ElementChange.index");
  var type$ = dart.privateName(observable_collections, "ElementChange.type");
  var newValue$ = dart.privateName(observable_collections, "ElementChange.newValue");
  var oldValue$ = dart.privateName(observable_collections, "ElementChange.oldValue");
  const _is_ElementChange_default = Symbol('_is_ElementChange_default');
  observable_collections.ElementChange$ = dart.generic(T => {
    class ElementChange extends core.Object {
      get index() {
        return this[index$];
      }
      set index(value) {
        super.index = value;
      }
      get type() {
        return this[type$];
      }
      set type(value) {
        super.type = value;
      }
      get newValue() {
        return this[newValue$];
      }
      set newValue(value) {
        super.newValue = value;
      }
      get oldValue() {
        return this[oldValue$];
      }
      set oldValue(value) {
        super.oldValue = value;
      }
    }
    (ElementChange.new = function(opts) {
      let index = opts && 'index' in opts ? opts.index : null;
      if (index == null) dart.nullFailed(I[7], 463, 22, "index");
      let type = opts && 'type' in opts ? opts.type : C[0] || CT.C0;
      if (type == null) dart.nullFailed(I[7], 464, 12, "type");
      let newValue = opts && 'newValue' in opts ? opts.newValue : null;
      let oldValue = opts && 'oldValue' in opts ? opts.oldValue : null;
      this[index$] = index;
      this[type$] = type;
      this[newValue$] = newValue;
      this[oldValue$] = oldValue;
      ;
    }).prototype = ElementChange.prototype;
    dart.addTypeTests(ElementChange);
    ElementChange.prototype[_is_ElementChange_default] = true;
    dart.addTypeCaches(ElementChange);
    dart.setLibraryUri(ElementChange, I[8]);
    dart.setFieldSignature(ElementChange, () => ({
      __proto__: dart.getFields(ElementChange.__proto__),
      index: dart.finalFieldType(core.int),
      type: dart.finalFieldType(core$.OperationType),
      newValue: dart.finalFieldType(dart.nullable(T)),
      oldValue: dart.finalFieldType(dart.nullable(T))
    }));
    return ElementChange;
  });
  observable_collections.ElementChange = observable_collections.ElementChange$();
  dart.addTypeTests(observable_collections.ElementChange, _is_ElementChange_default);
  var index$0 = dart.privateName(observable_collections, "RangeChange.index");
  var newValues$ = dart.privateName(observable_collections, "RangeChange.newValues");
  var oldValues$ = dart.privateName(observable_collections, "RangeChange.oldValues");
  const _is_RangeChange_default = Symbol('_is_RangeChange_default');
  observable_collections.RangeChange$ = dart.generic(T => {
    class RangeChange extends core.Object {
      get index() {
        return this[index$0];
      }
      set index(value) {
        super.index = value;
      }
      get newValues() {
        return this[newValues$];
      }
      set newValues(value) {
        super.newValues = value;
      }
      get oldValues() {
        return this[oldValues$];
      }
      set oldValues(value) {
        super.oldValues = value;
      }
    }
    (RangeChange.new = function(opts) {
      let index = opts && 'index' in opts ? opts.index : null;
      if (index == null) dart.nullFailed(I[7], 485, 30, "index");
      let newValues = opts && 'newValues' in opts ? opts.newValues : null;
      let oldValues = opts && 'oldValues' in opts ? opts.oldValues : null;
      this[index$0] = index;
      this[newValues$] = newValues;
      this[oldValues$] = oldValues;
      ;
    }).prototype = RangeChange.prototype;
    dart.addTypeTests(RangeChange);
    RangeChange.prototype[_is_RangeChange_default] = true;
    dart.addTypeCaches(RangeChange);
    dart.setLibraryUri(RangeChange, I[8]);
    dart.setFieldSignature(RangeChange, () => ({
      __proto__: dart.getFields(RangeChange.__proto__),
      index: dart.finalFieldType(core.int),
      newValues: dart.finalFieldType(dart.nullable(core.List$(T))),
      oldValues: dart.finalFieldType(dart.nullable(core.List$(T)))
    }));
    return RangeChange;
  });
  observable_collections.RangeChange = observable_collections.RangeChange$();
  dart.addTypeTests(observable_collections.RangeChange, _is_RangeChange_default);
  var list$ = dart.privateName(observable_collections, "ListChange.list");
  var elementChanges$ = dart.privateName(observable_collections, "ListChange.elementChanges");
  var rangeChanges$ = dart.privateName(observable_collections, "ListChange.rangeChanges");
  const _is_ListChange_default = Symbol('_is_ListChange_default');
  observable_collections.ListChange$ = dart.generic(T => {
    class ListChange extends core.Object {
      get list() {
        return this[list$];
      }
      set list(value) {
        super.list = value;
      }
      get elementChanges() {
        return this[elementChanges$];
      }
      set elementChanges(value) {
        super.elementChanges = value;
      }
      get rangeChanges() {
        return this[rangeChanges$];
      }
      set rangeChanges(value) {
        super.rangeChanges = value;
      }
    }
    (ListChange.new = function(opts) {
      let list = opts && 'list' in opts ? opts.list : null;
      if (list == null) dart.nullFailed(I[7], 500, 29, "list");
      let elementChanges = opts && 'elementChanges' in opts ? opts.elementChanges : null;
      let rangeChanges = opts && 'rangeChanges' in opts ? opts.rangeChanges : null;
      this[list$] = list;
      this[elementChanges$] = elementChanges;
      this[rangeChanges$] = rangeChanges;
      ;
    }).prototype = ListChange.prototype;
    dart.addTypeTests(ListChange);
    ListChange.prototype[_is_ListChange_default] = true;
    dart.addTypeCaches(ListChange);
    dart.setLibraryUri(ListChange, I[8]);
    dart.setFieldSignature(ListChange, () => ({
      __proto__: dart.getFields(ListChange.__proto__),
      list: dart.finalFieldType(observable_collections.ObservableList$(T)),
      elementChanges: dart.finalFieldType(dart.nullable(core.List$(observable_collections.ElementChange$(T)))),
      rangeChanges: dart.finalFieldType(dart.nullable(core.List$(observable_collections.RangeChange$(T))))
    }));
    return ListChange;
  });
  observable_collections.ListChange = observable_collections.ListChange$();
  dart.addTypeTests(observable_collections.ListChange, _is_ListChange_default);
  var _map$ = dart.privateName(observable_collections, "_map");
  var _hasListeners = dart.privateName(observable_collections, "_hasListeners");
  var _reportUpdate = dart.privateName(observable_collections, "_reportUpdate");
  var _reportAdd = dart.privateName(observable_collections, "_reportAdd");
  var _reportRemove = dart.privateName(observable_collections, "_reportRemove");
  const _is_ObservableMap_default = Symbol('_is_ObservableMap_default');
  observable_collections.ObservableMap$ = dart.generic((K, V) => {
    var LinkedMapOfK$V = () => (LinkedMapOfK$V = dart.constFn(_js_helper.LinkedMap$(K, V)))();
    var LinkedHashMapOfK$V = () => (LinkedHashMapOfK$V = dart.constFn(collection.LinkedHashMap$(K, V)))();
    var SplayTreeMapOfK$V = () => (SplayTreeMapOfK$V = dart.constFn(collection.SplayTreeMap$(K, V)))();
    var MapChangeOfK$V = () => (MapChangeOfK$V = dart.constFn(observable_collections.MapChange$(K, V)))();
    var ListenersOfMapChangeOfK$V = () => (ListenersOfMapChangeOfK$V = dart.constFn(core$.Listeners$(MapChangeOfK$V())))();
    var KN = () => (KN = dart.constFn(dart.nullable(K)))();
    var MapKeysIterableOfK = () => (MapKeysIterableOfK = dart.constFn(observable_collections.MapKeysIterable$(K)))();
    var VN = () => (VN = dart.constFn(dart.nullable(V)))();
    const Object_MapMixin$36 = class Object_MapMixin extends core.Object {};
    (Object_MapMixin$36.new = function() {
    }).prototype = Object_MapMixin$36.prototype;
    dart.applyMixin(Object_MapMixin$36, collection.MapMixin$(K, V));
    class ObservableMap extends Object_MapMixin$36 {
      get name() {
        return this[_atom$].name;
      }
      get [_listeners]() {
        let t24;
        t24 = this[_listenersField];
        return t24 == null ? this[_listenersField] = new (ListenersOfMapChangeOfK$V()).new(this[_context$]) : t24;
      }
      get [_hasListeners]() {
        return this[_listenersField] != null && dart.test(dart.nullCheck(this[_listenersField]).hasHandlers);
      }
      _get(key) {
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_map$][$_get](KN().as(key));
      }
      _set(key, value$) {
        let value = value$;
        K.as(key);
        V.as(value);
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          let oldValue = this[_map$][$_get](key);
          let type = "set";
          if (dart.test(this[_hasListeners])) {
            if (dart.test(this[_map$][$containsKey](key))) {
              type = "update";
            } else {
              type = "add";
            }
          }
          if (!dart.test(this[_map$][$containsKey](key)) || !dart.equals(value, oldValue)) {
            this[_map$][$_set](key, value);
            if (type === "update") {
              this[_reportUpdate](key, value, oldValue);
            } else if (type === "add") {
              this[_reportAdd](key, value);
            }
            this[_atom$].reportChanged();
          }
        }, T$.VoidTovoid()), this[_atom$]);
        return value$;
      }
      clear() {
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.test(this.isEmpty)) {
            return;
          }
          if (dart.test(this[_hasListeners])) {
            let removed = LinkedHashMapOfK$V().from(this[_map$]);
            this[_map$][$clear]();
            removed[$forEach](dart.bind(this, _reportRemove));
          } else {
            this[_map$][$clear]();
          }
          this[_atom$].reportChanged();
        }, T$.VoidTovoid()), this[_atom$]);
      }
      get keys() {
        return new (MapKeysIterableOfK()).new(this[_map$][$keys], this[_atom$]);
      }
      cast(RK, RV) {
        return new (observable_collections.ObservableMap$(RK, RV))._wrap(this[_context$], super.cast(RK, RV), this[_atom$]);
      }
      remove(key) {
        let value = null;
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.test(this[_hasListeners])) {
            if (dart.test(this[_map$][$containsKey](key))) {
              value = this[_map$][$remove](key);
              this[_reportRemove](KN().as(key), value);
              this[_atom$].reportChanged();
              return;
            }
            value = null;
          }
          value = this[_map$][$remove](key);
          this[_atom$].reportChanged();
        }, T$.VoidTovoid()), this[_atom$]);
        return value;
      }
      get length() {
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_map$][$length];
      }
      get isNotEmpty() {
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_map$][$isNotEmpty];
      }
      get isEmpty() {
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_map$][$isEmpty];
      }
      containsKey(key) {
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_map$][$containsKey](key);
      }
      [_reportUpdate](key, newValue, oldValue) {
        this[_listeners].notifyListeners(new (MapChangeOfK$V()).new({type: core$.OperationType.update, key: key, newValue: newValue, oldValue: oldValue, object: this}));
      }
      [_reportAdd](key, newValue) {
        K.as(key);
        V.as(newValue);
        this[_listeners].notifyListeners(new (MapChangeOfK$V()).new({type: core$.OperationType.add, key: key, newValue: newValue, object: this}));
      }
      [_reportRemove](key, oldValue) {
        KN().as(key);
        VN().as(oldValue);
        this[_listeners].notifyListeners(new (MapChangeOfK$V()).new({type: core$.OperationType.remove, key: key, oldValue: oldValue, object: this}));
      }
      observe(listener, opts) {
        if (listener == null) dart.nullFailed(I[9], 216, 43, "listener");
        let fireImmediately = opts && 'fireImmediately' in opts ? opts.fireImmediately : false;
        if (fireImmediately == null) dart.nullFailed(I[9], 217, 13, "fireImmediately");
        let dispose = this[_listeners].add(listener);
        if (fireImmediately === true) {
          this[_map$][$forEach](dart.bind(this, _reportAdd));
        }
        return dispose;
      }
    }
    (ObservableMap.new = function(opts) {
      let t24;
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      this[_listenersField] = null;
      this[_context$] = (t24 = context, t24 == null ? context$.mainContext : t24);
      this[_atom$] = observable_collections._observableMapAtom(K, V, context, name);
      this[_map$] = new (LinkedMapOfK$V()).new();
      ;
    }).prototype = ObservableMap.prototype;
    (ObservableMap.of = function(other, opts) {
      let t24;
      if (other == null) dart.nullFailed(I[9], 34, 30, "other");
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      this[_listenersField] = null;
      this[_context$] = (t24 = context, t24 == null ? context$.mainContext : t24);
      this[_atom$] = observable_collections._observableMapAtom(K, V, context, name);
      this[_map$] = LinkedHashMapOfK$V().of(other);
      ;
    }).prototype = ObservableMap.prototype;
    (ObservableMap.linkedHashMapFrom = function(other, opts) {
      let t24;
      if (other == null) dart.nullFailed(I[9], 39, 45, "other");
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      this[_listenersField] = null;
      this[_context$] = (t24 = context, t24 == null ? context$.mainContext : t24);
      this[_atom$] = observable_collections._observableMapAtom(K, V, context, name);
      this[_map$] = LinkedHashMapOfK$V().from(other);
      ;
    }).prototype = ObservableMap.prototype;
    (ObservableMap.splayTreeMapFrom = function(other, opts) {
      let t24;
      if (other == null) dart.nullFailed(I[9], 45, 44, "other");
      let compare = opts && 'compare' in opts ? opts.compare : null;
      let isValidKey = opts && 'isValidKey' in opts ? opts.isValidKey : null;
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      this[_listenersField] = null;
      this[_context$] = (t24 = context, t24 == null ? context$.mainContext : t24);
      this[_atom$] = observable_collections._observableMapAtom(K, V, context, name);
      this[_map$] = SplayTreeMapOfK$V().from(other, compare, isValidKey);
      ;
    }).prototype = ObservableMap.prototype;
    (ObservableMap._wrap = function(_context, _map, _atom) {
      if (_context == null) dart.nullFailed(I[9], 55, 28, "_context");
      if (_map == null) dart.nullFailed(I[9], 55, 43, "_map");
      if (_atom == null) dart.nullFailed(I[9], 55, 54, "_atom");
      this[_listenersField] = null;
      this[_context$] = _context;
      this[_map$] = _map;
      this[_atom$] = _atom;
      ;
    }).prototype = ObservableMap.prototype;
    dart.addTypeTests(ObservableMap);
    ObservableMap.prototype[_is_ObservableMap_default] = true;
    dart.addTypeCaches(ObservableMap);
    ObservableMap[dart.implements] = () => [core$.Listenable$(observable_collections.MapChange$(K, V))];
    dart.setMethodSignature(ObservableMap, () => ({
      __proto__: dart.getMethods(ObservableMap.__proto__),
      _get: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      [$_get]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, []),
      cast: dart.gFnType((RK, RV) => [core.Map$(RK, RV), []], (RK, RV) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$cast]: dart.gFnType((RK, RV) => [core.Map$(RK, RV), []], (RK, RV) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
      remove: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      [$remove]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      [_reportUpdate]: dart.fnType(dart.void, [K, V, dart.nullable(V)]),
      [_reportAdd]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [_reportRemove]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      observe: dart.fnType(dart.fnType(dart.void, []), [dart.fnType(dart.void, [observable_collections.MapChange$(K, V)])], {fireImmediately: core.bool}, {})
    }));
    dart.setGetterSignature(ObservableMap, () => ({
      __proto__: dart.getGetters(ObservableMap.__proto__),
      name: core.String,
      [_listeners]: core$.Listeners$(observable_collections.MapChange$(K, V)),
      [_hasListeners]: core.bool,
      keys: core.Iterable$(K),
      [$keys]: core.Iterable$(K)
    }));
    dart.setLibraryUri(ObservableMap, I[8]);
    dart.setFieldSignature(ObservableMap, () => ({
      __proto__: dart.getFields(ObservableMap.__proto__),
      [_context$]: dart.finalFieldType(core$.ReactiveContext),
      [_atom$]: dart.finalFieldType(core$.Atom),
      [_map$]: dart.finalFieldType(core.Map$(K, V)),
      [_listenersField]: dart.fieldType(dart.nullable(core$.Listeners$(observable_collections.MapChange$(K, V))))
    }));
    dart.defineExtensionMethods(ObservableMap, [
      '_get',
      '_set',
      'clear',
      'cast',
      'remove',
      'containsKey'
    ]);
    dart.defineExtensionAccessors(ObservableMap, ['keys', 'length', 'isNotEmpty', 'isEmpty']);
    return ObservableMap;
  });
  observable_collections.ObservableMap = observable_collections.ObservableMap$();
  dart.addTypeTests(observable_collections.ObservableMap, _is_ObservableMap_default);
  var type$0 = dart.privateName(observable_collections, "MapChange.type");
  var key$ = dart.privateName(observable_collections, "MapChange.key");
  var newValue$0 = dart.privateName(observable_collections, "MapChange.newValue");
  var oldValue$0 = dart.privateName(observable_collections, "MapChange.oldValue");
  var object$ = dart.privateName(observable_collections, "MapChange.object");
  const _is_MapChange_default = Symbol('_is_MapChange_default');
  observable_collections.MapChange$ = dart.generic((K, V) => {
    class MapChange extends core.Object {
      get type() {
        return this[type$0];
      }
      set type(value) {
        super.type = value;
      }
      get key() {
        return this[key$];
      }
      set key(value) {
        super.key = value;
      }
      get newValue() {
        return this[newValue$0];
      }
      set newValue(value) {
        super.newValue = value;
      }
      get oldValue() {
        return this[oldValue$0];
      }
      set oldValue(value) {
        super.oldValue = value;
      }
      get object() {
        return this[object$];
      }
      set object(value) {
        super.object = value;
      }
    }
    (MapChange.new = function(opts) {
      let type = opts && 'type' in opts ? opts.type : null;
      let key = opts && 'key' in opts ? opts.key : null;
      let newValue = opts && 'newValue' in opts ? opts.newValue : null;
      let oldValue = opts && 'oldValue' in opts ? opts.oldValue : null;
      let object = opts && 'object' in opts ? opts.object : null;
      if (object == null) dart.nullFailed(I[9], 242, 21, "object");
      this[type$0] = type;
      this[key$] = key;
      this[newValue$0] = newValue;
      this[oldValue$0] = oldValue;
      this[object$] = object;
      ;
    }).prototype = MapChange.prototype;
    dart.addTypeTests(MapChange);
    MapChange.prototype[_is_MapChange_default] = true;
    dart.addTypeCaches(MapChange);
    dart.setLibraryUri(MapChange, I[8]);
    dart.setFieldSignature(MapChange, () => ({
      __proto__: dart.getFields(MapChange.__proto__),
      type: dart.finalFieldType(dart.nullable(core$.OperationType)),
      key: dart.finalFieldType(dart.nullable(K)),
      newValue: dart.finalFieldType(dart.nullable(V)),
      oldValue: dart.finalFieldType(dart.nullable(V)),
      object: dart.finalFieldType(observable_collections.ObservableMap$(K, V))
    }));
    return MapChange;
  });
  observable_collections.MapChange = observable_collections.MapChange$();
  dart.addTypeTests(observable_collections.MapChange, _is_MapChange_default);
  var _iterable$ = dart.privateName(observable_collections, "_iterable");
  const _is_MapKeysIterable_default = Symbol('_is_MapKeysIterable_default');
  observable_collections.MapKeysIterable$ = dart.generic(K => {
    var MapKeysIteratorOfK = () => (MapKeysIteratorOfK = dart.constFn(observable_collections.MapKeysIterator$(K)))();
    const Object_IterableMixin$36 = class Object_IterableMixin extends core.Object {};
    (Object_IterableMixin$36.new = function() {
    }).prototype = Object_IterableMixin$36.prototype;
    dart.applyMixin(Object_IterableMixin$36, collection.IterableMixin$(K));
    class MapKeysIterable extends Object_IterableMixin$36 {
      get length() {
        this[_atom$].context.enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_iterable$][$length];
      }
      contains(element) {
        this[_atom$].context.enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_iterable$][$contains](element);
      }
      get iterator() {
        return new (MapKeysIteratorOfK()).new(this[_iterable$][$iterator], this[_atom$]);
      }
    }
    (MapKeysIterable.new = function(_iterable, _atom) {
      if (_iterable == null) dart.nullFailed(I[9], 258, 24, "_iterable");
      if (_atom == null) dart.nullFailed(I[9], 258, 40, "_atom");
      this[_iterable$] = _iterable;
      this[_atom$] = _atom;
      ;
    }).prototype = MapKeysIterable.prototype;
    dart.addTypeTests(MapKeysIterable);
    MapKeysIterable.prototype[_is_MapKeysIterable_default] = true;
    dart.addTypeCaches(MapKeysIterable);
    dart.setGetterSignature(MapKeysIterable, () => ({
      __proto__: dart.getGetters(MapKeysIterable.__proto__),
      iterator: core.Iterator$(K),
      [$iterator]: core.Iterator$(K)
    }));
    dart.setLibraryUri(MapKeysIterable, I[8]);
    dart.setFieldSignature(MapKeysIterable, () => ({
      __proto__: dart.getFields(MapKeysIterable.__proto__),
      [_iterable$]: dart.finalFieldType(core.Iterable$(K)),
      [_atom$]: dart.finalFieldType(core$.Atom)
    }));
    dart.defineExtensionMethods(MapKeysIterable, ['contains']);
    dart.defineExtensionAccessors(MapKeysIterable, ['length', 'iterator']);
    return MapKeysIterable;
  });
  observable_collections.MapKeysIterable = observable_collections.MapKeysIterable$();
  dart.addTypeTests(observable_collections.MapKeysIterable, _is_MapKeysIterable_default);
  var _iterator$ = dart.privateName(observable_collections, "_iterator");
  const _is_MapKeysIterator_default = Symbol('_is_MapKeysIterator_default');
  observable_collections.MapKeysIterator$ = dart.generic(K => {
    class MapKeysIterator extends core.Object {
      get current() {
        this[_atom$].context.enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_iterator$].current;
      }
      moveNext() {
        this[_atom$].context.enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_iterator$].moveNext();
      }
    }
    (MapKeysIterator.new = function(_iterator, _atom) {
      if (_iterator == null) dart.nullFailed(I[9], 286, 24, "_iterator");
      if (_atom == null) dart.nullFailed(I[9], 286, 40, "_atom");
      this[_iterator$] = _iterator;
      this[_atom$] = _atom;
      ;
    }).prototype = MapKeysIterator.prototype;
    dart.addTypeTests(MapKeysIterator);
    MapKeysIterator.prototype[_is_MapKeysIterator_default] = true;
    dart.addTypeCaches(MapKeysIterator);
    MapKeysIterator[dart.implements] = () => [core.Iterator$(K)];
    dart.setMethodSignature(MapKeysIterator, () => ({
      __proto__: dart.getMethods(MapKeysIterator.__proto__),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setGetterSignature(MapKeysIterator, () => ({
      __proto__: dart.getGetters(MapKeysIterator.__proto__),
      current: K
    }));
    dart.setLibraryUri(MapKeysIterator, I[8]);
    dart.setFieldSignature(MapKeysIterator, () => ({
      __proto__: dart.getFields(MapKeysIterator.__proto__),
      [_iterator$]: dart.finalFieldType(core.Iterator$(K)),
      [_atom$]: dart.finalFieldType(core$.Atom)
    }));
    return MapKeysIterator;
  });
  observable_collections.MapKeysIterator = observable_collections.MapKeysIterator$();
  dart.addTypeTests(observable_collections.MapKeysIterator, _is_MapKeysIterator_default);
  var _set$ = dart.privateName(observable_collections, "_set");
  const _is_ObservableSet_default = Symbol('_is_ObservableSet_default');
  observable_collections.ObservableSet$ = dart.generic(T => {
    var _HashSetOfT = () => (_HashSetOfT = dart.constFn(collection._HashSet$(T)))();
    var HashSetOfT = () => (HashSetOfT = dart.constFn(collection.HashSet$(T)))();
    var LinkedHashSetOfT = () => (LinkedHashSetOfT = dart.constFn(collection.LinkedHashSet$(T)))();
    var SplayTreeSetOfT = () => (SplayTreeSetOfT = dart.constFn(collection.SplayTreeSet$(T)))();
    var SetChangeOfT = () => (SetChangeOfT = dart.constFn(observable_collections.SetChange$(T)))();
    var ListenersOfSetChangeOfT = () => (ListenersOfSetChangeOfT = dart.constFn(core$.Listeners$(SetChangeOfT())))();
    var ObservableIteratorOfT = () => (ObservableIteratorOfT = dart.constFn(observable_collections.ObservableIterator$(T)))();
    var TN = () => (TN = dart.constFn(dart.nullable(T)))();
    const Object_SetMixin$36 = class Object_SetMixin extends core.Object {};
    (Object_SetMixin$36.new = function() {
    }).prototype = Object_SetMixin$36.prototype;
    dart.applyMixin(Object_SetMixin$36, collection.SetMixin$(T));
    class ObservableSet extends Object_SetMixin$36 {
      get name() {
        return this[_atom$].name;
      }
      get [_listeners]() {
        let t24;
        t24 = this[_listenersField];
        return t24 == null ? this[_listenersField] = new (ListenersOfSetChangeOfT()).new(this[_context$]) : t24;
      }
      get [_hasListeners]() {
        return this[_listenersField] != null && dart.test(dart.nullCheck(this[_listenersField]).hasHandlers);
      }
      add(value) {
        T.as(value);
        let result = false;
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          result = this[_set$].add(value);
          if (dart.test(result) && dart.test(this[_hasListeners])) {
            this[_reportAdd](value);
          }
          if (dart.test(result)) {
            this[_atom$].reportChanged();
          }
        }, T$.VoidTovoid()), this[_atom$]);
        return result;
      }
      contains(element) {
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_set$].contains(element);
      }
      get iterator() {
        return new (ObservableIteratorOfT()).new(this[_atom$], this[_set$].iterator);
      }
      get length() {
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_set$][$length];
      }
      lookup(element) {
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_set$].lookup(element);
      }
      remove(value) {
        let removed = false;
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          removed = this[_set$].remove(value);
          if (dart.test(removed) && dart.test(this[_hasListeners])) {
            this[_reportRemove](TN().as(value));
          }
          if (dart.test(removed)) {
            this[_atom$].reportChanged();
          }
        }, T$.VoidTovoid()), this[_atom$]);
        return removed;
      }
      clear() {
        core$['ConditionalAction|conditionallyRunInAction'](this[_context$], dart.fn(() => {
          if (dart.test(this[_hasListeners])) {
            let items = this[_set$][$toList]({growable: false});
            this[_set$].clear();
            items[$forEach](dart.bind(this, _reportRemove));
          } else {
            this[_set$].clear();
          }
          this[_atom$].reportChanged();
        }, T$.VoidTovoid()), this[_atom$]);
      }
      cast(R) {
        return new (observable_collections.ObservableSet$(R))._wrap(this[_context$], this[_atom$], this[_set$].cast(R));
      }
      toSet() {
        this[_context$].enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return LinkedHashSetOfT().from(this[_set$]);
      }
      observe(listener, opts) {
        if (listener == null) dart.nullFailed(I[10], 167, 40, "listener");
        let fireImmediately = opts && 'fireImmediately' in opts ? opts.fireImmediately : false;
        if (fireImmediately == null) dart.nullFailed(I[10], 168, 13, "fireImmediately");
        let dispose = this[_listeners].add(listener);
        if (fireImmediately === true) {
          this[_set$][$forEach](dart.bind(this, _reportAdd));
        }
        return dispose;
      }
      [_reportAdd](value) {
        T.as(value);
        this[_listeners].notifyListeners(new (SetChangeOfT()).new({object: this, type: core$.OperationType.add, value: value}));
      }
      [_reportRemove](value) {
        TN().as(value);
        this[_listeners].notifyListeners(new (SetChangeOfT()).new({object: this, type: core$.OperationType.remove, value: value}));
      }
    }
    (ObservableSet.new = function(opts) {
      let t24;
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      ObservableSet.__.call(this, (t24 = context, t24 == null ? context$.mainContext : t24), new (_HashSetOfT()).new(), name);
    }).prototype = ObservableSet.prototype;
    (ObservableSet.of = function(other, opts) {
      let t24;
      if (other == null) dart.nullFailed(I[10], 27, 32, "other");
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      ObservableSet.__.call(this, (t24 = context, t24 == null ? context$.mainContext : t24), HashSetOfT().of(other), name);
    }).prototype = ObservableSet.prototype;
    (ObservableSet.linkedHashSetFrom = function(other, opts) {
      let t24, t24$;
      if (other == null) dart.nullFailed(I[10], 30, 47, "other");
      let equals = opts && 'equals' in opts ? opts.equals : null;
      let hashCode = opts && 'hashCode' in opts ? opts.hashCode : null;
      let isValidKey = opts && 'isValidKey' in opts ? opts.isValidKey : null;
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      ObservableSet.__.call(this, (t24 = context, t24 == null ? context$.mainContext : t24), (t24$ = LinkedHashSetOfT().new({equals: equals, hashCode: hashCode, isValidKey: isValidKey}), (() => {
        t24$.addAll(other);
        return t24$;
      })()), name);
    }).prototype = ObservableSet.prototype;
    (ObservableSet.splayTreeSetFrom = function(other, opts) {
      let t24;
      if (other == null) dart.nullFailed(I[10], 45, 46, "other");
      let compare = opts && 'compare' in opts ? opts.compare : null;
      let isValidKey = opts && 'isValidKey' in opts ? opts.isValidKey : null;
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      ObservableSet.__.call(this, (t24 = context, t24 == null ? context$.mainContext : t24), SplayTreeSetOfT().of(other, compare, isValidKey), name);
    }).prototype = ObservableSet.prototype;
    (ObservableSet._wrap = function(_context, _atom, _set) {
      if (_context == null) dart.nullFailed(I[10], 54, 28, "_context");
      if (_atom == null) dart.nullFailed(I[10], 54, 43, "_atom");
      if (_set == null) dart.nullFailed(I[10], 54, 55, "_set");
      this[_listenersField] = null;
      this[_context$] = _context;
      this[_atom$] = _atom;
      this[_set$] = _set;
      ;
    }).prototype = ObservableSet.prototype;
    (ObservableSet.__ = function(_context, wrapped, name) {
      if (_context == null) dart.nullFailed(I[10], 56, 24, "_context");
      if (wrapped == null) dart.nullFailed(I[10], 56, 41, "wrapped");
      this[_listenersField] = null;
      this[_context$] = _context;
      this[_atom$] = observable_collections._observableSetAtom(dart.dynamic, _context, name);
      this[_set$] = wrapped;
      ;
    }).prototype = ObservableSet.prototype;
    dart.addTypeTests(ObservableSet);
    ObservableSet.prototype[_is_ObservableSet_default] = true;
    dart.addTypeCaches(ObservableSet);
    ObservableSet[dart.implements] = () => [core$.Listenable$(observable_collections.SetChange$(T))];
    dart.setMethodSignature(ObservableSet, () => ({
      __proto__: dart.getMethods(ObservableSet.__proto__),
      add: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      contains: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [$contains]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      lookup: dart.fnType(dart.nullable(T), [dart.nullable(core.Object)]),
      remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      cast: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)]),
      [$cast]: dart.gFnType(R => [core.Set$(R), []], R => [dart.nullable(core.Object)]),
      toSet: dart.fnType(core.Set$(T), []),
      [$toSet]: dart.fnType(core.Set$(T), []),
      observe: dart.fnType(dart.fnType(dart.void, []), [dart.fnType(dart.void, [observable_collections.SetChange$(T)])], {fireImmediately: core.bool}, {}),
      [_reportAdd]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [_reportRemove]: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(ObservableSet, () => ({
      __proto__: dart.getGetters(ObservableSet.__proto__),
      name: core.String,
      [_listeners]: core$.Listeners$(observable_collections.SetChange$(T)),
      [_hasListeners]: core.bool,
      iterator: core.Iterator$(T),
      [$iterator]: core.Iterator$(T),
      length: core.int,
      [$length]: core.int
    }));
    dart.setLibraryUri(ObservableSet, I[8]);
    dart.setFieldSignature(ObservableSet, () => ({
      __proto__: dart.getFields(ObservableSet.__proto__),
      [_context$]: dart.finalFieldType(core$.ReactiveContext),
      [_atom$]: dart.finalFieldType(core$.Atom),
      [_set$]: dart.finalFieldType(core.Set$(T)),
      [_listenersField]: dart.fieldType(dart.nullable(core$.Listeners$(observable_collections.SetChange$(T))))
    }));
    dart.defineExtensionMethods(ObservableSet, ['contains', 'cast', 'toSet']);
    dart.defineExtensionAccessors(ObservableSet, ['iterator', 'length']);
    return ObservableSet;
  });
  observable_collections.ObservableSet = observable_collections.ObservableSet$();
  dart.addTypeTests(observable_collections.ObservableSet, _is_ObservableSet_default);
  const _is_ObservableIterator_default = Symbol('_is_ObservableIterator_default');
  observable_collections.ObservableIterator$ = dart.generic(T => {
    class ObservableIterator extends core.Object {
      get current() {
        this[_atom$].context.enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_iterator$].current;
      }
      moveNext() {
        this[_atom$].context.enforceReadPolicy(this[_atom$]);
        this[_atom$].reportObserved();
        return this[_iterator$].moveNext();
      }
    }
    (ObservableIterator.new = function(_atom, _iterator) {
      if (_atom == null) dart.nullFailed(I[10], 205, 27, "_atom");
      if (_iterator == null) dart.nullFailed(I[10], 205, 39, "_iterator");
      this[_atom$] = _atom;
      this[_iterator$] = _iterator;
      ;
    }).prototype = ObservableIterator.prototype;
    dart.addTypeTests(ObservableIterator);
    ObservableIterator.prototype[_is_ObservableIterator_default] = true;
    dart.addTypeCaches(ObservableIterator);
    ObservableIterator[dart.implements] = () => [core.Iterator$(T)];
    dart.setMethodSignature(ObservableIterator, () => ({
      __proto__: dart.getMethods(ObservableIterator.__proto__),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setGetterSignature(ObservableIterator, () => ({
      __proto__: dart.getGetters(ObservableIterator.__proto__),
      current: T
    }));
    dart.setLibraryUri(ObservableIterator, I[8]);
    dart.setFieldSignature(ObservableIterator, () => ({
      __proto__: dart.getFields(ObservableIterator.__proto__),
      [_iterator$]: dart.finalFieldType(core.Iterator$(T)),
      [_atom$]: dart.finalFieldType(core$.Atom)
    }));
    return ObservableIterator;
  });
  observable_collections.ObservableIterator = observable_collections.ObservableIterator$();
  dart.addTypeTests(observable_collections.ObservableIterator, _is_ObservableIterator_default);
  var object$0 = dart.privateName(observable_collections, "SetChange.object");
  var type$1 = dart.privateName(observable_collections, "SetChange.type");
  var value$ = dart.privateName(observable_collections, "SetChange.value");
  const _is_SetChange_default = Symbol('_is_SetChange_default');
  observable_collections.SetChange$ = dart.generic(T => {
    class SetChange extends core.Object {
      get object() {
        return this[object$0];
      }
      set object(value) {
        super.object = value;
      }
      get type() {
        return this[type$1];
      }
      set type(value) {
        super.type = value;
      }
      get value() {
        return this[value$];
      }
      set value(value) {
        super.value = value;
      }
    }
    (SetChange.new = function(opts) {
      let object = opts && 'object' in opts ? opts.object : null;
      if (object == null) dart.nullFailed(I[10], 233, 19, "object");
      let type = opts && 'type' in opts ? opts.type : null;
      if (type == null) dart.nullFailed(I[10], 234, 19, "type");
      let value = opts && 'value' in opts ? opts.value : null;
      this[object$0] = object;
      this[type$1] = type;
      this[value$] = value;
      ;
    }).prototype = SetChange.prototype;
    dart.addTypeTests(SetChange);
    SetChange.prototype[_is_SetChange_default] = true;
    dart.addTypeCaches(SetChange);
    dart.setLibraryUri(SetChange, I[8]);
    dart.setFieldSignature(SetChange, () => ({
      __proto__: dart.getFields(SetChange.__proto__),
      object: dart.finalFieldType(observable_collections.ObservableSet$(T)),
      type: dart.finalFieldType(core$.OperationType),
      value: dart.finalFieldType(dart.nullable(T))
    }));
    return SetChange;
  });
  observable_collections.SetChange = observable_collections.SetChange$();
  dart.addTypeTests(observable_collections.SetChange, _is_SetChange_default);
  observable_collections._observableListAtom = function _observableListAtom(T, context, name) {
    let t24, t24$;
    let ctx = (t24 = context, t24 == null ? context$.mainContext : t24);
    return core$.Atom.new({name: (t24$ = name, t24$ == null ? ctx.nameFor("ObservableList<" + dart.str(dart.wrapType(T)) + ">") : t24$), context: ctx});
  };
  observable_collections.wrapInObservableList = function wrapInObservableList(T, atom, list) {
    if (atom == null) dart.nullFailed(I[7], 509, 48, "atom");
    if (list == null) dart.nullFailed(I[7], 509, 62, "list");
    return new (observable_collections.ObservableList$(T))._wrap(context$.mainContext, atom, list);
  };
  observable_collections._observableMapAtom = function _observableMapAtom(K, V, context, name) {
    let t24, t24$;
    let ctx = (t24 = context, t24 == null ? context$.mainContext : t24);
    return core$.Atom.new({name: (t24$ = name, t24$ == null ? ctx.nameFor("ObservableMap<" + dart.str(dart.wrapType(K)) + ", " + dart.str(dart.wrapType(V)) + ">") : t24$), context: ctx});
  };
  observable_collections.wrapInObservableMap = function wrapInObservableMap(K, V, atom, map) {
    if (atom == null) dart.nullFailed(I[9], 229, 52, "atom");
    if (map == null) dart.nullFailed(I[9], 229, 68, "map");
    return new (observable_collections.ObservableMap$(K, V))._wrap(context$.mainContext, map, atom);
  };
  observable_collections._observableSetAtom = function _observableSetAtom(T, context, name) {
    let t24;
    if (context == null) dart.nullFailed(I[10], 3, 44, "context");
    return core$.Atom.new({name: (t24 = name, t24 == null ? context.nameFor("ObservableSet<" + dart.str(dart.wrapType(T)) + ">") : t24), context: context});
  };
  observable_collections.wrapInObservableSet = function wrapInObservableSet(T, atom, _set) {
    if (atom == null) dart.nullFailed(I[10], 196, 46, "atom");
    if (_set == null) dart.nullFailed(I[10], 196, 59, "_set");
    return new (observable_collections.ObservableSet$(T))._wrap(context$.mainContext, atom, _set);
  };
  var _zoneField = dart.privateName(async$, "_zoneField");
  var _actions = dart.privateName(async$, "_actions");
  var _run = dart.privateName(async$, "_run");
  var _runUnary = dart.privateName(async$, "_runUnary");
  var _zone = dart.privateName(async$, "_zone");
  async$.AsyncAction = class AsyncAction extends core.Object {
    get [_zone]() {
      if (this[_zoneField] == null) {
        let spec = new async._ZoneSpecification.new({run: dart.bind(this, _run), runUnary: dart.bind(this, _runUnary)});
        this[_zoneField] = async.Zone.current.fork({specification: spec});
      }
      return dart.nullCheck(this[_zoneField]);
    }
    run(R, body) {
      if (body == null) dart.nullFailed(I[11], 26, 41, "body");
      return async.async(R, (function* run() {
        try {
          return yield this[_zone].run(async.FutureOr$(R), body);
        } finally {
          yield async.Future.microtask(C[1] || CT.C1);
        }
      }).bind(this));
    }
    static _noOp() {
      return null;
    }
    [_run](R, self, parent, zone, f) {
      if (self == null) dart.nullFailed(I[11], 40, 18, "self");
      if (parent == null) dart.nullFailed(I[11], 40, 37, "parent");
      if (zone == null) dart.nullFailed(I[11], 40, 50, "zone");
      if (f == null) dart.nullFailed(I[11], 40, 69, "f");
      let actionInfo = this[_actions].startAction({name: dart.str(this[_actions].name) + "(Zone.run)"});
      try {
        let result = parent.run(R, zone, f);
        return result;
      } finally {
        this[_actions].endAction(actionInfo);
      }
    }
    [_runUnary](R, A, self, parent, zone, f, a) {
      if (self == null) dart.nullFailed(I[11], 53, 12, "self");
      if (parent == null) dart.nullFailed(I[11], 53, 31, "parent");
      if (zone == null) dart.nullFailed(I[11], 53, 44, "zone");
      if (f == null) dart.nullFailed(I[11], 53, 66, "f");
      let actionInfo = this[_actions].startAction({name: dart.str(this[_actions].name) + "(Zone.runUnary)"});
      try {
        let result = parent.runUnary(R, A, zone, f, a);
        return result;
      } finally {
        this[_actions].endAction(actionInfo);
      }
    }
  };
  (async$.AsyncAction.new = function(name, opts) {
    let t24;
    if (name == null) dart.nullFailed(I[11], 9, 22, "name");
    let context = opts && 'context' in opts ? opts.context : null;
    async$.AsyncAction.__.call(this, (t24 = context, t24 == null ? context$.mainContext : t24), name);
  }).prototype = async$.AsyncAction.prototype;
  (async$.AsyncAction.__ = function(context, name) {
    if (context == null) dart.nullFailed(I[11], 12, 33, "context");
    if (name == null) dart.nullFailed(I[11], 12, 49, "name");
    this[_zoneField] = null;
    this[_actions] = new core$.ActionController.new({context: context, name: name});
    ;
  }).prototype = async$.AsyncAction.prototype;
  dart.addTypeTests(async$.AsyncAction);
  dart.addTypeCaches(async$.AsyncAction);
  dart.setMethodSignature(async$.AsyncAction, () => ({
    __proto__: dart.getMethods(async$.AsyncAction.__proto__),
    run: dart.gFnType(R => [async.Future$(R), [dart.fnType(async.Future$(R), [])]], R => [dart.nullable(core.Object)]),
    [_run]: dart.gFnType(R => [R, [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [])]], R => [dart.nullable(core.Object)]),
    [_runUnary]: dart.gFnType((R, A) => [R, [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [A]), A]], (R, A) => [dart.nullable(core.Object), dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(async$.AsyncAction, () => ({
    __proto__: dart.getGetters(async$.AsyncAction.__proto__),
    [_zone]: async.Zone
  }));
  dart.setLibraryUri(async$.AsyncAction, I[12]);
  dart.setFieldSignature(async$.AsyncAction, () => ({
    __proto__: dart.getFields(async$.AsyncAction.__proto__),
    [_actions]: dart.finalFieldType(core$.ActionController),
    [_zoneField]: dart.fieldType(dart.nullable(async.Zone))
  }));
  var _name$0 = dart.privateName(async$, "_name");
  async$.FutureStatus = class FutureStatus extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (async$.FutureStatus.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[13], 3, 6, "index");
    if (_name == null) dart.nullFailed(I[13], 3, 6, "_name");
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = async$.FutureStatus.prototype;
  dart.addTypeTests(async$.FutureStatus);
  dart.addTypeCaches(async$.FutureStatus);
  dart.setLibraryUri(async$.FutureStatus, I[12]);
  dart.setFieldSignature(async$.FutureStatus, () => ({
    __proto__: dart.getFields(async$.FutureStatus.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(async$.FutureStatus, ['toString']);
  async$.FutureStatus.pending = C[2] || CT.C2;
  async$.FutureStatus.rejected = C[3] || CT.C3;
  async$.FutureStatus.fulfilled = C[4] || CT.C4;
  async$.FutureStatus.values = C[5] || CT.C5;
  var _axnController = dart.privateName(async$, "_axnController");
  var _status = dart.privateName(async$, "_status");
  var _result = dart.privateName(async$, "_result");
  var _fulfill = dart.privateName(async$, "_fulfill");
  var _reject = dart.privateName(async$, "_reject");
  const _is_FutureResult_default = Symbol('_is_FutureResult_default');
  async$.FutureResult$ = dart.generic(T => {
    class FutureResult extends core.Object {
      get status() {
        return this[_status].value;
      }
      get result() {
        return this[_result].value;
      }
      [_fulfill](value) {
        T.as(value);
        let prevDerivation = this[_axnController].startAction();
        try {
          this[_status].value = async$.FutureStatus.fulfilled;
          this[_result].value = value;
        } finally {
          this[_axnController].endAction(prevDerivation);
        }
      }
      [_reject](error) {
        let prevDerivation = this[_axnController].startAction();
        try {
          this[_status].value = async$.FutureStatus.rejected;
          this[_result].value = error;
        } finally {
          this[_axnController].endAction(prevDerivation);
        }
      }
    }
    (FutureResult.new = function(context, _future, initialResult, initialStatus, name) {
      if (context == null) dart.nullFailed(I[13], 6, 32, "context");
      if (_future == null) dart.nullFailed(I[13], 6, 51, "_future");
      if (initialStatus == null) dart.nullFailed(I[13], 7, 43, "initialStatus");
      if (name == null) dart.nullFailed(I[13], 7, 65, "name");
      this[_axnController] = new core$.ActionController.new({context: context, name: dart.str(name) + ".ActionController"});
      this[_status] = T$.ObservableOfFutureStatus().new(initialStatus, {name: dart.str(name) + ".status"});
      this[_result] = core$.Observable.new(initialResult, {name: dart.str(name) + ".result"});
      _future.then(dart.void, dart.bind(this, _fulfill), {onError: dart.bind(this, _reject)});
    }).prototype = FutureResult.prototype;
    dart.addTypeTests(FutureResult);
    FutureResult.prototype[_is_FutureResult_default] = true;
    dart.addTypeCaches(FutureResult);
    dart.setMethodSignature(FutureResult, () => ({
      __proto__: dart.getMethods(FutureResult.__proto__),
      [_fulfill]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [_reject]: dart.fnType(dart.void, [dart.dynamic])
    }));
    dart.setGetterSignature(FutureResult, () => ({
      __proto__: dart.getGetters(FutureResult.__proto__),
      status: async$.FutureStatus,
      result: dart.dynamic
    }));
    dart.setLibraryUri(FutureResult, I[12]);
    dart.setFieldSignature(FutureResult, () => ({
      __proto__: dart.getFields(FutureResult.__proto__),
      [_axnController]: dart.finalFieldType(core$.ActionController),
      [_status]: dart.finalFieldType(core$.Observable$(async$.FutureStatus)),
      [_result]: dart.finalFieldType(core$.Observable)
    }));
    return FutureResult;
  });
  async$.FutureResult = async$.FutureResult$();
  dart.addTypeTests(async$.FutureResult, _is_FutureResult_default);
  var __ObservableFuture__result = dart.privateName(async$, "_#ObservableFuture#_result");
  var __ObservableFuture__name = dart.privateName(async$, "_#ObservableFuture#_name");
  var _context$0 = dart.privateName(async$, "_context");
  var _future$ = dart.privateName(async$, "_future");
  const _is_ObservableFuture_default = Symbol('_is_ObservableFuture_default');
  async$.ObservableFuture$ = dart.generic(T => {
    var FutureOfT = () => (FutureOfT = dart.constFn(async.Future$(T)))();
    var FutureResultOfT = () => (FutureResultOfT = dart.constFn(async$.FutureResult$(T)))();
    var ObservableFutureOfT = () => (ObservableFutureOfT = dart.constFn(async$.ObservableFuture$(T)))();
    var ObservableStreamOfT = () => (ObservableStreamOfT = dart.constFn(async$.ObservableStream$(T)))();
    var FutureOrOfT = () => (FutureOrOfT = dart.constFn(async.FutureOr$(T)))();
    var VoidToFutureOrOfT = () => (VoidToFutureOrOfT = dart.constFn(dart.fnType(FutureOrOfT(), [])))();
    var VoidToNFutureOrOfT = () => (VoidToNFutureOrOfT = dart.constFn(dart.nullable(VoidToFutureOrOfT())))();
    class ObservableFuture extends core.Object {
      get [_result]() {
        let t24;
        t24 = this[__ObservableFuture__result];
        return t24 == null ? dart.throw(new _internal.LateError.fieldNI("_result")) : t24;
      }
      set [_result](t24) {
        if (t24 == null) dart.nullFailed(I[13], 75, 24, "null");
        this[__ObservableFuture__result] = t24;
      }
      get [_name$0]() {
        let t25;
        t25 = this[__ObservableFuture__name];
        return t25 == null ? dart.throw(new _internal.LateError.fieldNI("_name")) : t25;
      }
      set [_name$0](t25) {
        if (t25 == null) dart.nullFailed(I[13], 77, 15, "null");
        this[__ObservableFuture__name] = t25;
      }
      get name() {
        return this[_name$0];
      }
      get status() {
        return this[_result].status;
      }
      get value() {
        return this.status == async$.FutureStatus.fulfilled ? T.as(this[_result].result) : null;
      }
      get error() {
        return this.status == async$.FutureStatus.rejected ? this[_result].result : null;
      }
      get result() {
        return this[_result].result;
      }
      match(R, opts) {
        let fulfilled = opts && 'fulfilled' in opts ? opts.fulfilled : null;
        let rejected = opts && 'rejected' in opts ? opts.rejected : null;
        let pending = opts && 'pending' in opts ? opts.pending : null;
        let status = this.status;
        if (status == async$.FutureStatus.fulfilled) {
          return fulfilled == null ? null : fulfilled(T.as(this.result));
        } else if (status == async$.FutureStatus.rejected) {
          return rejected == null ? null : rejected(this.result);
        }
        return pending == null ? null : pending();
      }
      replace(nextFuture) {
        FutureOfT().as(nextFuture);
        if (nextFuture == null) dart.nullFailed(I[13], 122, 41, "nextFuture");
        return new (ObservableFutureOfT()).__(this[_context$0], nextFuture, this.status, this.result, this.name);
      }
      asStream() {
        return new (ObservableStreamOfT()).__(this[_context$0], this[_future$].asStream(), this.value, false, dart.str(this.name) + "_asStream");
      }
      catchError(onError, opts) {
        if (onError == null) dart.nullFailed(I[13], 130, 43, "onError");
        let test = opts && 'test' in opts ? opts.test : null;
        return new (ObservableFutureOfT()).__(this[_context$0], this[_future$].catchError(onError, {test: test}), async$.FutureStatus.pending, null, this.name);
      }
      then(R, onValue, opts) {
        if (onValue == null) dart.nullFailed(I[13], 136, 61, "onValue");
        let onError = opts && 'onError' in opts ? opts.onError : null;
        return new (async$.ObservableFuture$(R)).__(this[_context$0], this[_future$].then(R, onValue, {onError: onError}), async$.FutureStatus.pending, null, this.name);
      }
      timeout(timeLimit, opts) {
        if (timeLimit == null) dart.nullFailed(I[13], 142, 40, "timeLimit");
        let onTimeout = opts && 'onTimeout' in opts ? opts.onTimeout : null;
        VoidToNFutureOrOfT().as(onTimeout);
        return new (ObservableFutureOfT()).__(this[_context$0], this[_future$].timeout(timeLimit, {onTimeout: onTimeout}), async$.FutureStatus.pending, null, this.name);
      }
      whenComplete(action) {
        if (action == null) dart.nullFailed(I[13], 152, 56, "action");
        return new (ObservableFutureOfT()).__(this[_context$0], this[_future$].whenComplete(action), async$.FutureStatus.pending, null, this.name);
      }
    }
    (ObservableFuture.new = function(future, opts) {
      let t24;
      if (future == null) dart.nullFailed(I[13], 46, 30, "future");
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      ObservableFuture.__.call(this, (t24 = context, t24 == null ? context$.mainContext : t24), future, async$.FutureStatus.pending, null, name);
    }).prototype = ObservableFuture.prototype;
    (ObservableFuture.value = function(value, opts) {
      let t24;
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      ObservableFuture.__.call(this, (t24 = context, t24 == null ? context$.mainContext : t24), FutureOfT().value(value), async$.FutureStatus.fulfilled, value, name);
    }).prototype = ObservableFuture.prototype;
    (ObservableFuture.error = function(error, opts) {
      let t24;
      if (error == null) dart.nullFailed(I[13], 60, 33, "error");
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      ObservableFuture.__.call(this, (t24 = context, t24 == null ? context$.mainContext : t24), FutureOfT().error(error), async$.FutureStatus.rejected, error, name);
    }).prototype = ObservableFuture.prototype;
    (ObservableFuture.__ = function(_context, _future, initialStatus, initialResult, name) {
      let t24;
      if (_context == null) dart.nullFailed(I[13], 64, 27, "_context");
      if (_future == null) dart.nullFailed(I[13], 64, 42, "_future");
      if (initialStatus == null) dart.nullFailed(I[13], 64, 64, "initialStatus");
      this[__ObservableFuture__result] = null;
      this[__ObservableFuture__name] = null;
      this[_context$0] = _context;
      this[_future$] = _future;
      this[_name$0] = (t24 = name, t24 == null ? this[_context$0].nameFor("ObservableFuture<" + dart.str(dart.wrapType(T)) + ">") : t24);
      this[_result] = new (FutureResultOfT()).new(this[_context$0], this[_future$], initialResult, initialStatus, this[_name$0]);
    }).prototype = ObservableFuture.prototype;
    ObservableFuture.prototype[dart.isFuture] = true;
    dart.addTypeTests(ObservableFuture);
    ObservableFuture.prototype[_is_ObservableFuture_default] = true;
    dart.addTypeCaches(ObservableFuture);
    ObservableFuture[dart.implements] = () => [async.Future$(T), core$.ObservableValue$(dart.nullable(T))];
    dart.setMethodSignature(ObservableFuture, () => ({
      __proto__: dart.getMethods(ObservableFuture.__proto__),
      match: dart.gFnType(R => [dart.nullable(R), [], {fulfilled: dart.nullable(dart.fnType(R, [T])), pending: dart.nullable(dart.fnType(R, [])), rejected: dart.nullable(dart.fnType(R, [dart.dynamic]))}, {}], R => [dart.nullable(core.Object)]),
      replace: dart.fnType(async$.ObservableFuture$(T), [dart.nullable(core.Object)]),
      asStream: dart.fnType(async$.ObservableStream$(T), []),
      catchError: dart.fnType(async$.ObservableFuture$(T), [core.Function], {test: dart.nullable(dart.fnType(core.bool, [core.Object]))}, {}),
      then: dart.gFnType(R => [async$.ObservableFuture$(R), [dart.fnType(async.FutureOr$(R), [T])], {onError: dart.nullable(core.Function)}, {}], R => [dart.nullable(core.Object)]),
      timeout: dart.fnType(async$.ObservableFuture$(T), [core.Duration], {onTimeout: dart.nullable(core.Object)}, {}),
      whenComplete: dart.fnType(async$.ObservableFuture$(T), [dart.fnType(dart.dynamic, [])])
    }));
    dart.setGetterSignature(ObservableFuture, () => ({
      __proto__: dart.getGetters(ObservableFuture.__proto__),
      [_result]: async$.FutureResult$(T),
      [_name$0]: core.String,
      name: core.String,
      status: async$.FutureStatus,
      value: dart.nullable(T),
      error: dart.dynamic,
      result: dart.dynamic
    }));
    dart.setSetterSignature(ObservableFuture, () => ({
      __proto__: dart.getSetters(ObservableFuture.__proto__),
      [_result]: async$.FutureResult$(T),
      [_name$0]: core.String
    }));
    dart.setLibraryUri(ObservableFuture, I[12]);
    dart.setFieldSignature(ObservableFuture, () => ({
      __proto__: dart.getFields(ObservableFuture.__proto__),
      [_context$0]: dart.finalFieldType(core$.ReactiveContext),
      [_future$]: dart.fieldType(async.Future$(T)),
      [__ObservableFuture__result]: dart.fieldType(dart.nullable(async$.FutureResult$(T))),
      [__ObservableFuture__name]: dart.fieldType(dart.nullable(core.String))
    }));
    return ObservableFuture;
  });
  async$.ObservableFuture = async$.ObservableFuture$();
  dart.addTypeTests(async$.ObservableFuture, _is_ObservableFuture_default);
  async$.StreamStatus = class StreamStatus extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (async$.StreamStatus.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[14], 3, 6, "index");
    if (_name == null) dart.nullFailed(I[14], 3, 6, "_name");
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = async$.StreamStatus.prototype;
  dart.addTypeTests(async$.StreamStatus);
  dart.addTypeCaches(async$.StreamStatus);
  dart.setLibraryUri(async$.StreamStatus, I[12]);
  dart.setFieldSignature(async$.StreamStatus, () => ({
    __proto__: dart.getFields(async$.StreamStatus.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(async$.StreamStatus, ['toString']);
  async$.StreamStatus.waiting = C[6] || CT.C6;
  async$.StreamStatus.active = C[7] || CT.C7;
  async$.StreamStatus.done = C[8] || CT.C8;
  async$.StreamStatus.values = C[9] || CT.C9;
  var __ObservableStream__name = dart.privateName(async$, "_#ObservableStream#_name");
  var _controllerField = dart.privateName(async$, "_controllerField");
  var _stream$ = dart.privateName(async$, "_stream");
  var _initialValue$ = dart.privateName(async$, "_initialValue");
  var _cancelOnError$ = dart.privateName(async$, "_cancelOnError");
  var _controller = dart.privateName(async$, "_controller");
  var _wrap = dart.privateName(async$, "_wrap");
  var _wrapFuture = dart.privateName(async$, "_wrapFuture");
  const _is_ObservableStream_default = Symbol('_is_ObservableStream_default');
  async$.ObservableStream$ = dart.generic(T => {
    var _ObservableStreamControllerOfT = () => (_ObservableStreamControllerOfT = dart.constFn(async$._ObservableStreamController$(T)))();
    var TN = () => (TN = dart.constFn(dart.nullable(T)))();
    var ObservableStreamOfT = () => (ObservableStreamOfT = dart.constFn(async$.ObservableStream$(T)))();
    var VoidToT = () => (VoidToT = dart.constFn(dart.fnType(T, [])))();
    var VoidToNT = () => (VoidToNT = dart.constFn(dart.nullable(VoidToT())))();
    var StreamConsumerOfT = () => (StreamConsumerOfT = dart.constFn(async.StreamConsumer$(T)))();
    var TAndTToT = () => (TAndTToT = dart.constFn(dart.fnType(T, [T, T])))();
    var ListOfT = () => (ListOfT = dart.constFn(core.List$(T)))();
    var SetOfT = () => (SetOfT = dart.constFn(core.Set$(T)))();
    class ObservableStream extends core.Object {
      get [_name$0]() {
        let t26;
        t26 = this[__ObservableStream__name];
        return t26 == null ? dart.throw(new _internal.LateError.fieldNI("_name")) : t26;
      }
      set [_name$0](t26) {
        if (t26 == null) dart.nullFailed(I[14], 25, 15, "null");
        this[__ObservableStream__name] = t26;
      }
      get name() {
        return this[_name$0];
      }
      get [_controller]() {
        if (this[_controllerField] == null) {
          this[_controllerField] = new (_ObservableStreamControllerOfT()).new(this[_context$0], this[_stream$], this[_initialValue$], {cancelOnError: this[_cancelOnError$], name: dart.str(this.name) + ".StreamController"});
          this[_initialValue$] = null;
        }
        return dart.nullCheck(this[_controllerField]);
      }
      get data() {
        return this[_controller].data;
      }
      get value() {
        return this[_controller].valueType == async$._ValueType.value ? T.as(this[_controller].data) : null;
      }
      get error() {
        return this[_controller].valueType == async$._ValueType.error ? this[_controller].data : null;
      }
      get hasError() {
        return this[_controller].valueType == async$._ValueType.error;
      }
      get status() {
        return this[_controller].status;
      }
      match(R, opts) {
        let waiting = opts && 'waiting' in opts ? opts.waiting : null;
        let active = opts && 'active' in opts ? opts.active : null;
        let error = opts && 'error' in opts ? opts.error : null;
        let done = opts && 'done' in opts ? opts.done : null;
        let status = this[_controller].status;
        if (status == async$.StreamStatus.waiting) {
          return waiting == null ? null : waiting();
        }
        let data = this[_controller].data;
        let hasValue = this[_controller].valueType == async$._ValueType.value;
        let overrideDone = status == async$.StreamStatus.done && done == null;
        let isActive = status == async$.StreamStatus.active;
        if (isActive || overrideDone) {
          if (hasValue) {
            return active == null ? null : active(T.as(data));
          } else {
            return error == null ? null : error(data);
          }
        }
        return hasValue ? dart.nullCheck(done)(T.as(data), null) : dart.nullCheck(done)(null, data);
      }
      configure(opts) {
        let initialValue = opts && 'initialValue' in opts ? opts.initialValue : null;
        TN().as(initialValue);
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : false;
        if (cancelOnError == null) dart.nullFailed(I[14], 90, 34, "cancelOnError");
        return new (ObservableStreamOfT()).__(this[_context$0], this[_stream$], initialValue, cancelOnError, this.name);
      }
      [_wrap](R, stream) {
        if (stream == null) dart.nullFailed(I[14], 93, 42, "stream");
        return new (async$.ObservableStream$(R)).__(this[_context$0], stream, null, this[_cancelOnError$], this.name);
      }
      [_wrapFuture](R, future) {
        if (future == null) dart.nullFailed(I[14], 96, 48, "future");
        return new (async$.ObservableFuture$(R)).__(this[_context$0], future, async$.FutureStatus.pending, null, this.name);
      }
      any(test) {
        if (test == null) dart.nullFailed(I[14], 102, 55, "test");
        return this[_wrapFuture](core.bool, this[_stream$].any(test));
      }
      asBroadcastStream(opts) {
        let onListen = opts && 'onListen' in opts ? opts.onListen : null;
        let onCancel = opts && 'onCancel' in opts ? opts.onCancel : null;
        return this[_wrap](T, this[_stream$].asBroadcastStream({onListen: onListen, onCancel: onCancel}));
      }
      asyncExpand(E, convert) {
        if (convert == null) dart.nullFailed(I[14], 112, 67, "convert");
        return this[_wrap](E, this[_stream$].asyncExpand(E, convert));
      }
      asyncMap(E, convert) {
        if (convert == null) dart.nullFailed(I[14], 116, 65, "convert");
        return this[_wrap](E, this[_stream$].asyncMap(E, convert));
      }
      cast(R) {
        return this[_wrap](R, this[_stream$].cast(R));
      }
      contains(needle) {
        return this[_wrapFuture](core.bool, this[_stream$].contains(needle));
      }
      distinct(equals = null) {
        return this[_wrap](T, this[_stream$].distinct(equals));
      }
      drain(E, futureValue = null) {
        return this[_wrapFuture](E, this[_stream$].drain(E, futureValue));
      }
      elementAt(index) {
        if (index == null) dart.nullFailed(I[14], 135, 37, "index");
        return this[_wrapFuture](T, this[_stream$].elementAt(index));
      }
      every(test) {
        if (test == null) dart.nullFailed(I[14], 139, 57, "test");
        return this[_wrapFuture](core.bool, this[_stream$].every(test));
      }
      expand(S, convert) {
        if (convert == null) dart.nullFailed(I[14], 143, 65, "convert");
        return this[_wrap](S, this[_stream$].expand(S, convert));
      }
      get first() {
        return this[_wrapFuture](T, this[_stream$].first);
      }
      firstWhere(test, opts) {
        if (test == null) dart.nullFailed(I[14], 150, 59, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNT().as(orElse);
        return this[_wrapFuture](T, this[_stream$].firstWhere(test, {orElse: orElse}));
      }
      fold(S, initialValue, combine) {
        if (combine == null) dart.nullFailed(I[14], 156, 61, "combine");
        return this[_wrapFuture](S, this[_stream$].fold(S, initialValue, combine));
      }
      forEach(action) {
        if (action == null) dart.nullFailed(I[14], 160, 53, "action");
        return this[_wrapFuture](dart.dynamic, this[_stream$].forEach(action));
      }
      handleError(onError, opts) {
        if (onError == null) dart.nullFailed(I[14], 164, 44, "onError");
        let test = opts && 'test' in opts ? opts.test : null;
        return this[_wrap](T, this[_stream$].handleError(onError, {test: test}));
      }
      get isBroadcast() {
        return this[_stream$].isBroadcast;
      }
      get isEmpty() {
        return this[_wrapFuture](core.bool, this[_stream$].isEmpty);
      }
      join(separator = "") {
        if (separator == null) dart.nullFailed(I[14], 176, 41, "separator");
        return this[_wrapFuture](core.String, this[_stream$].join(separator));
      }
      get last() {
        return this[_wrapFuture](T, this[_stream$].last);
      }
      lastWhere(test, opts) {
        if (test == null) dart.nullFailed(I[14], 183, 58, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNT().as(orElse);
        return this[_wrapFuture](T, this[_stream$].lastWhere(test, {orElse: orElse}));
      }
      get length() {
        return this[_wrapFuture](core.int, this[_stream$].length);
      }
      listen(onData, opts) {
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let onDone = opts && 'onDone' in opts ? opts.onDone : null;
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
        let sub = this[_stream$].listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
        return sub;
      }
      map(S, convert) {
        if (convert == null) dart.nullFailed(I[14], 199, 50, "convert");
        return this[_wrap](S, this[_stream$].map(S, convert));
      }
      pipe(streamConsumer) {
        StreamConsumerOfT().as(streamConsumer);
        if (streamConsumer == null) dart.nullFailed(I[14], 203, 43, "streamConsumer");
        return this[_wrapFuture](dart.dynamic, this[_stream$].pipe(streamConsumer));
      }
      reduce(combine) {
        TAndTToT().as(combine);
        if (combine == null) dart.nullFailed(I[14], 207, 64, "combine");
        return this[_wrapFuture](T, this[_stream$].reduce(combine));
      }
      get single() {
        return this[_wrapFuture](T, this[_stream$].single);
      }
      singleWhere(test, opts) {
        if (test == null) dart.nullFailed(I[14], 214, 60, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNT().as(orElse);
        return this[_wrapFuture](T, this[_stream$].singleWhere(test, {orElse: orElse}));
      }
      skip(count) {
        if (count == null) dart.nullFailed(I[14], 219, 32, "count");
        return this[_wrap](T, this[_stream$].skip(count));
      }
      skipWhile(test) {
        if (test == null) dart.nullFailed(I[14], 222, 58, "test");
        return this[_wrap](T, this[_stream$].skipWhile(test));
      }
      take(count) {
        if (count == null) dart.nullFailed(I[14], 226, 32, "count");
        return this[_wrap](T, this[_stream$].take(count));
      }
      takeWhile(test) {
        if (test == null) dart.nullFailed(I[14], 229, 58, "test");
        return this[_wrap](T, this[_stream$].takeWhile(test));
      }
      timeout(timeLimit, opts) {
        if (timeLimit == null) dart.nullFailed(I[14], 233, 40, "timeLimit");
        let onTimeout = opts && 'onTimeout' in opts ? opts.onTimeout : null;
        return this[_wrap](T, this[_stream$].timeout(timeLimit, {onTimeout: onTimeout}));
      }
      toList() {
        return this[_wrapFuture](ListOfT(), this[_stream$].toList());
      }
      toSet() {
        return this[_wrapFuture](SetOfT(), this[_stream$].toSet());
      }
      transform(S, streamTransformer) {
        async.StreamTransformer$(T, S).as(streamTransformer);
        if (streamTransformer == null) dart.nullFailed(I[14], 244, 60, "streamTransformer");
        return this[_wrap](S, this[_stream$].transform(S, streamTransformer));
      }
      where(test) {
        if (test == null) dart.nullFailed(I[14], 248, 52, "test");
        return this[_wrap](T, this[_stream$].where(test));
      }
    }
    (ObservableStream.new = function(stream, opts) {
      let t26;
      if (stream == null) dart.nullFailed(I[14], 6, 30, "stream");
      let initialValue = opts && 'initialValue' in opts ? opts.initialValue : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : false;
      if (cancelOnError == null) dart.nullFailed(I[14], 8, 12, "cancelOnError");
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      ObservableStream.__.call(this, (t26 = context, t26 == null ? context$.mainContext : t26), stream, initialValue, cancelOnError, name);
    }).prototype = ObservableStream.prototype;
    (ObservableStream.__ = function(context, _stream, _initialValue, _cancelOnError, name) {
      let t26;
      if (context == null) dart.nullFailed(I[14], 14, 38, "context");
      if (_stream == null) dart.nullFailed(I[14], 14, 52, "_stream");
      if (_cancelOnError == null) dart.nullFailed(I[14], 15, 12, "_cancelOnError");
      this[__ObservableStream__name] = null;
      this[_controllerField] = null;
      this[_stream$] = _stream;
      this[_initialValue$] = _initialValue;
      this[_cancelOnError$] = _cancelOnError;
      this[_context$0] = context;
      this[_name$0] = (t26 = name, t26 == null ? this[_context$0].nameFor("ObservableStream<" + dart.str(dart.wrapType(T)) + ">") : t26);
    }).prototype = ObservableStream.prototype;
    ObservableStream.prototype[dart.isStream] = true;
    dart.addTypeTests(ObservableStream);
    ObservableStream.prototype[_is_ObservableStream_default] = true;
    dart.addTypeCaches(ObservableStream);
    ObservableStream[dart.implements] = () => [async.Stream$(T), core$.ObservableValue$(dart.nullable(T))];
    dart.setMethodSignature(ObservableStream, () => ({
      __proto__: dart.getMethods(ObservableStream.__proto__),
      match: dart.gFnType(R => [dart.nullable(R), [], {active: dart.nullable(dart.fnType(R, [T])), done: dart.nullable(dart.fnType(R, [dart.nullable(T), dart.dynamic])), error: dart.nullable(dart.fnType(R, [dart.dynamic])), waiting: dart.nullable(dart.fnType(R, []))}, {}], R => [dart.nullable(core.Object)]),
      configure: dart.fnType(async$.ObservableStream$(T), [], {cancelOnError: core.bool, initialValue: dart.nullable(core.Object)}, {}),
      [_wrap]: dart.gFnType(R => [async$.ObservableStream$(R), [async.Stream$(R)]], R => [dart.nullable(core.Object)]),
      [_wrapFuture]: dart.gFnType(R => [async$.ObservableFuture$(R), [async.Future$(R)]], R => [dart.nullable(core.Object)]),
      any: dart.fnType(async$.ObservableFuture$(core.bool), [dart.fnType(core.bool, [T])]),
      asBroadcastStream: dart.fnType(async$.ObservableStream$(T), [], {onCancel: dart.nullable(dart.fnType(dart.void, [async.StreamSubscription$(T)])), onListen: dart.nullable(dart.fnType(dart.void, [async.StreamSubscription$(T)]))}, {}),
      asyncExpand: dart.gFnType(E => [async$.ObservableStream$(E), [dart.fnType(dart.nullable(async.Stream$(E)), [T])]], E => [dart.nullable(core.Object)]),
      asyncMap: dart.gFnType(E => [async$.ObservableStream$(E), [dart.fnType(async.FutureOr$(E), [T])]], E => [dart.nullable(core.Object)]),
      cast: dart.gFnType(R => [async$.ObservableStream$(R), []], R => [dart.nullable(core.Object)]),
      contains: dart.fnType(async$.ObservableFuture$(core.bool), [dart.nullable(core.Object)]),
      distinct: dart.fnType(async$.ObservableStream$(T), [], [dart.nullable(dart.fnType(core.bool, [T, T]))]),
      drain: dart.gFnType(E => [async$.ObservableFuture$(E), [], [dart.nullable(E)]], E => [dart.nullable(core.Object)]),
      elementAt: dart.fnType(async$.ObservableFuture$(T), [core.int]),
      every: dart.fnType(async$.ObservableFuture$(core.bool), [dart.fnType(core.bool, [T])]),
      expand: dart.gFnType(S => [async$.ObservableStream$(S), [dart.fnType(core.Iterable$(S), [T])]], S => [dart.nullable(core.Object)]),
      firstWhere: dart.fnType(async$.ObservableFuture$(T), [dart.fnType(core.bool, [T])], {orElse: dart.nullable(core.Object)}, {}),
      fold: dart.gFnType(S => [async$.ObservableFuture$(S), [S, dart.fnType(S, [S, T])]], S => [dart.nullable(core.Object)]),
      forEach: dart.fnType(async$.ObservableFuture, [dart.fnType(dart.void, [T])]),
      handleError: dart.fnType(async$.ObservableStream$(T), [core.Function], {test: dart.nullable(dart.fnType(core.bool, [dart.dynamic]))}, {}),
      join: dart.fnType(async$.ObservableFuture$(core.String), [], [core.String]),
      lastWhere: dart.fnType(async$.ObservableFuture$(T), [dart.fnType(core.bool, [T])], {orElse: dart.nullable(core.Object)}, {}),
      listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
      map: dart.gFnType(S => [async$.ObservableStream$(S), [dart.fnType(S, [T])]], S => [dart.nullable(core.Object)]),
      pipe: dart.fnType(async$.ObservableFuture, [dart.nullable(core.Object)]),
      reduce: dart.fnType(async$.ObservableFuture$(T), [dart.nullable(core.Object)]),
      singleWhere: dart.fnType(async$.ObservableFuture$(T), [dart.fnType(core.bool, [T])], {orElse: dart.nullable(core.Object)}, {}),
      skip: dart.fnType(async$.ObservableStream$(T), [core.int]),
      skipWhile: dart.fnType(async$.ObservableStream$(T), [dart.fnType(core.bool, [T])]),
      take: dart.fnType(async$.ObservableStream$(T), [core.int]),
      takeWhile: dart.fnType(async$.ObservableStream$(T), [dart.fnType(core.bool, [T])]),
      timeout: dart.fnType(async$.ObservableStream$(T), [core.Duration], {onTimeout: dart.nullable(dart.fnType(dart.void, [async.EventSink$(T)]))}, {}),
      toList: dart.fnType(async$.ObservableFuture$(core.List$(T)), []),
      toSet: dart.fnType(async$.ObservableFuture$(core.Set$(T)), []),
      transform: dart.gFnType(S => [async$.ObservableStream$(S), [dart.nullable(core.Object)]], S => [dart.nullable(core.Object)]),
      where: dart.fnType(async$.ObservableStream$(T), [dart.fnType(core.bool, [T])])
    }));
    dart.setGetterSignature(ObservableStream, () => ({
      __proto__: dart.getGetters(ObservableStream.__proto__),
      [_name$0]: core.String,
      name: core.String,
      [_controller]: async$._ObservableStreamController$(T),
      data: dart.dynamic,
      value: dart.nullable(T),
      error: dart.dynamic,
      hasError: core.bool,
      status: async$.StreamStatus,
      first: async$.ObservableFuture$(T),
      isBroadcast: core.bool,
      isEmpty: async$.ObservableFuture$(core.bool),
      last: async$.ObservableFuture$(T),
      length: async$.ObservableFuture$(core.int),
      single: async$.ObservableFuture$(T)
    }));
    dart.setSetterSignature(ObservableStream, () => ({
      __proto__: dart.getSetters(ObservableStream.__proto__),
      [_name$0]: core.String
    }));
    dart.setLibraryUri(ObservableStream, I[12]);
    dart.setFieldSignature(ObservableStream, () => ({
      __proto__: dart.getFields(ObservableStream.__proto__),
      [_initialValue$]: dart.fieldType(dart.nullable(T)),
      [_cancelOnError$]: dart.finalFieldType(core.bool),
      [_context$0]: dart.finalFieldType(core$.ReactiveContext),
      [_stream$]: dart.finalFieldType(async.Stream$(T)),
      [__ObservableStream__name]: dart.fieldType(dart.nullable(core.String)),
      [_controllerField]: dart.fieldType(dart.nullable(async$._ObservableStreamController$(T)))
    }));
    return ObservableStream;
  });
  async$.ObservableStream = async$.ObservableStream$();
  dart.addTypeTests(async$.ObservableStream, _is_ObservableStream_default);
  async$._ValueType = class _ValueType extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (async$._ValueType.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[14], 252, 6, "index");
    if (_name == null) dart.nullFailed(I[14], 252, 6, "_name");
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = async$._ValueType.prototype;
  dart.addTypeTests(async$._ValueType);
  dart.addTypeCaches(async$._ValueType);
  dart.setLibraryUri(async$._ValueType, I[12]);
  dart.setFieldSignature(async$._ValueType, () => ({
    __proto__: dart.getFields(async$._ValueType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(async$._ValueType, ['toString']);
  async$._ValueType.value = C[10] || CT.C10;
  async$._ValueType.error = C[11] || CT.C11;
  async$._ValueType.values = C[12] || CT.C12;
  var _subscription = dart.privateName(async$, "_subscription");
  var _listenCount = dart.privateName(async$, "_listenCount");
  var _valueType = dart.privateName(async$, "_valueType");
  var _data = dart.privateName(async$, "_data");
  var _listen = dart.privateName(async$, "_listen");
  var _unsubscribe = dart.privateName(async$, "_unsubscribe");
  var _onData = dart.privateName(async$, "_onData");
  var _onError = dart.privateName(async$, "_onError");
  var _onDone = dart.privateName(async$, "_onDone");
  const _is__ObservableStreamController_default = Symbol('_is__ObservableStreamController_default');
  async$._ObservableStreamController$ = dart.generic(T => {
    class _ObservableStreamController extends core.Object {
      get valueType() {
        return this[_valueType].value;
      }
      get data() {
        return this[_data].value;
      }
      get status() {
        return this[_status].value;
      }
      [_listen]() {
        this[_listenCount] = dart.notNull(this[_listenCount]) + 1;
        if (this[_subscription] == null) {
          this[_subscription] = this[_stream$].listen(dart.bind(this, _onData), {onError: dart.bind(this, _onError), onDone: dart.bind(this, _onDone), cancelOnError: this[_cancelOnError$]});
        } else if (dart.test(dart.nullCheck(this[_subscription]).isPaused)) {
          dart.nullCheck(this[_subscription]).resume();
        }
      }
      [_unsubscribe]() {
        let t27;
        this[_listenCount] = dart.notNull(this[_listenCount]) - 1;
        if (this[_listenCount] === 0 && !dart.test(dart.nullCheck(this[_subscription]).isPaused)) {
          t27 = this[_subscription];
          t27 == null ? null : t27.pause();
        }
      }
      [_onData](data) {
        T.as(data);
        let actionInfo = this[_actions].startAction();
        try {
          this[_status].value = async$.StreamStatus.active;
          this[_valueType].value = async$._ValueType.value;
          this[_data].value = data;
        } finally {
          this[_actions].endAction(actionInfo);
        }
      }
      [_onError](error) {
        let actionInfo = this[_actions].startAction();
        try {
          this[_status].value = async$.StreamStatus.active;
          this[_valueType].value = async$._ValueType.error;
          this[_data].value = error;
        } finally {
          this[_actions].endAction(actionInfo);
        }
      }
      [_onDone]() {
        let actionInfo = this[_actions].startAction();
        try {
          this[_status].value = async$.StreamStatus.done;
        } finally {
          this[_actions].endAction(actionInfo);
        }
      }
    }
    (_ObservableStreamController.new = function(context, _stream, initialValue, opts) {
      let t27, t27$, t27$0;
      if (context == null) dart.nullFailed(I[14], 256, 23, "context");
      if (_stream == null) dart.nullFailed(I[14], 256, 37, "_stream");
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : false;
      if (cancelOnError == null) dart.nullFailed(I[14], 257, 13, "cancelOnError");
      let name = opts && 'name' in opts ? opts.name : null;
      if (name == null) dart.nullFailed(I[14], 257, 50, "name");
      this[_subscription] = null;
      this[_listenCount] = 0;
      this[_stream$] = _stream;
      this.name = name;
      this[_actions] = new core$.ActionController.new({context: context, name: dart.str(name) + ".ActionController"});
      this[_status] = T$.ObservableOfStreamStatus().new(initialValue == null ? async$.StreamStatus.waiting : async$.StreamStatus.active, {context: context, name: dart.str(name) + ".status"});
      this[_valueType] = T$.ObservableOf_ValueType().new(async$._ValueType.value, {context: context, name: dart.str(name) + ".valueType"});
      this[_data] = core$.Observable.new(initialValue, {context: context, name: dart.str(name) + ".data"});
      this[_cancelOnError$] = cancelOnError;
      t27 = this[_status];
      (() => {
        t27.onBecomeObserved(dart.bind(this, _listen));
        t27.onBecomeUnobserved(dart.bind(this, _unsubscribe));
        return t27;
      })();
      t27$ = this[_valueType];
      (() => {
        t27$.onBecomeObserved(dart.bind(this, _listen));
        t27$.onBecomeUnobserved(dart.bind(this, _unsubscribe));
        return t27$;
      })();
      t27$0 = this[_data];
      (() => {
        t27$0.onBecomeObserved(dart.bind(this, _listen));
        t27$0.onBecomeUnobserved(dart.bind(this, _unsubscribe));
        return t27$0;
      })();
    }).prototype = _ObservableStreamController.prototype;
    dart.addTypeTests(_ObservableStreamController);
    _ObservableStreamController.prototype[_is__ObservableStreamController_default] = true;
    dart.addTypeCaches(_ObservableStreamController);
    dart.setMethodSignature(_ObservableStreamController, () => ({
      __proto__: dart.getMethods(_ObservableStreamController.__proto__),
      [_listen]: dart.fnType(dart.void, []),
      [_unsubscribe]: dart.fnType(dart.void, []),
      [_onData]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [_onError]: dart.fnType(dart.void, [dart.dynamic]),
      [_onDone]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(_ObservableStreamController, () => ({
      __proto__: dart.getGetters(_ObservableStreamController.__proto__),
      valueType: async$._ValueType,
      data: dart.dynamic,
      status: async$.StreamStatus
    }));
    dart.setLibraryUri(_ObservableStreamController, I[12]);
    dart.setFieldSignature(_ObservableStreamController, () => ({
      __proto__: dart.getFields(_ObservableStreamController.__proto__),
      name: dart.finalFieldType(core.String),
      [_cancelOnError$]: dart.finalFieldType(core.bool),
      [_stream$]: dart.finalFieldType(async.Stream$(T)),
      [_subscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(T))),
      [_actions]: dart.finalFieldType(core$.ActionController),
      [_valueType]: dart.finalFieldType(core$.Observable$(async$._ValueType)),
      [_data]: dart.finalFieldType(core$.Observable),
      [_status]: dart.finalFieldType(core$.Observable$(async$.StreamStatus)),
      [_listenCount]: dart.fieldType(core.int)
    }));
    return _ObservableStreamController;
  });
  async$._ObservableStreamController = async$._ObservableStreamController$();
  dart.addTypeTests(async$._ObservableStreamController, _is__ObservableStreamController_default);
  var message$ = dart.privateName(core$, "MobXException.message");
  core$.MobXException = class MobXException extends core.Error {
    get message() {
      return this[message$];
    }
    set message(value) {
      this[message$] = value;
    }
    toString() {
      return this.message;
    }
  };
  (core$.MobXException.new = function(message) {
    if (message == null) dart.nullFailed(I[15], 24, 22, "message");
    this[message$] = message;
    core$.MobXException.__proto__.new.call(this);
    ;
  }).prototype = core$.MobXException.prototype;
  dart.addTypeTests(core$.MobXException);
  dart.addTypeCaches(core$.MobXException);
  core$.MobXException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(core$.MobXException, I[16]);
  dart.setFieldSignature(core$.MobXException, () => ({
    __proto__: dart.getFields(core$.MobXException.__proto__),
    message: dart.fieldType(core.String)
  }));
  dart.defineExtensionMethods(core$.MobXException, ['toString']);
  core$.MobXCyclicReactionException = class MobXCyclicReactionException extends core$.MobXException {};
  (core$.MobXCyclicReactionException.new = function(message) {
    if (message == null) dart.nullFailed(I[15], 35, 38, "message");
    core$.MobXCyclicReactionException.__proto__.new.call(this, message);
    ;
  }).prototype = core$.MobXCyclicReactionException.prototype;
  dart.addTypeTests(core$.MobXCyclicReactionException);
  dart.addTypeCaches(core$.MobXCyclicReactionException);
  dart.setLibraryUri(core$.MobXCyclicReactionException, I[16]);
  var _exception = dart.privateName(core$, "_exception");
  var _stackTrace = dart.privateName(core$, "_stackTrace");
  core$.MobXCaughtException = class MobXCaughtException extends core$.MobXException {
    get exception() {
      return this[_exception];
    }
    get stackTrace() {
      return this[_stackTrace];
    }
  };
  (core$.MobXCaughtException.new = function(exception, opts) {
    if (exception == null) dart.nullFailed(I[15], 40, 30, "exception");
    let stackTrace = opts && 'stackTrace' in opts ? opts.stackTrace : null;
    if (stackTrace == null) dart.nullFailed(I[15], 40, 62, "stackTrace");
    this[_exception] = exception;
    this[_stackTrace] = stackTrace;
    core$.MobXCaughtException.__proto__.new.call(this, "MobXCaughtException: " + dart.str(exception));
    ;
  }).prototype = core$.MobXCaughtException.prototype;
  dart.addTypeTests(core$.MobXCaughtException);
  dart.addTypeCaches(core$.MobXCaughtException);
  dart.setGetterSignature(core$.MobXCaughtException, () => ({
    __proto__: dart.getGetters(core$.MobXCaughtException.__proto__),
    exception: core.Object
  }));
  dart.setLibraryUri(core$.MobXCaughtException, I[16]);
  dart.setFieldSignature(core$.MobXCaughtException, () => ({
    __proto__: dart.getFields(core$.MobXCaughtException.__proto__),
    [_exception]: dart.finalFieldType(core.Object),
    [_stackTrace]: dart.finalFieldType(core.StackTrace)
  }));
  dart.defineExtensionAccessors(core$.MobXCaughtException, ['stackTrace']);
  var _fn$ = dart.privateName(core$, "_fn");
  var _controller$ = dart.privateName(core$, "_controller");
  core$.Action = class Action extends core.Object {
    static new(fn, opts) {
      let t27;
      if (fn == null) dart.nullFailed(I[17], 36, 27, "fn");
      let context = opts && 'context' in opts ? opts.context : null;
      let name = opts && 'name' in opts ? opts.name : null;
      return new core$.Action.__((t27 = context, t27 == null ? context$.mainContext : t27), fn, {name: name});
    }
    get name() {
      return this[_controller$].name;
    }
    call(args = C[13] || CT.C13, namedArgs = null) {
      if (args == null) dart.nullFailed(I[17], 47, 22, "args");
      let runInfo = this[_controller$].startAction();
      try {
        if (namedArgs == null) {
          return core.Function.apply(this[_fn$], args);
        } else {
          let namedSymbolArgs = namedArgs[$map](core.Symbol, dart.dynamic, dart.fn((key, value) => {
            if (key == null) dart.nullFailed(I[17], 57, 28, "key");
            return new (T$.MapEntryOfSymbol$dynamic()).__(new _internal.Symbol.new(key), value);
          }, T$.StringAnddynamicToMapEntryOfSymbol$dynamic()));
          return core.Function.apply(this[_fn$], args, namedSymbolArgs);
        }
      } finally {
        this[_controller$].endAction(runInfo);
      }
    }
  };
  (core$.Action.__ = function(context, _fn, opts) {
    if (context == null) dart.nullFailed(I[17], 39, 28, "context");
    if (_fn == null) dart.nullFailed(I[17], 39, 42, "_fn");
    let name = opts && 'name' in opts ? opts.name : null;
    this[_fn$] = _fn;
    this[_controller$] = new core$.ActionController.new({context: context, name: name});
    ;
  }).prototype = core$.Action.prototype;
  dart.addTypeTests(core$.Action);
  dart.addTypeCaches(core$.Action);
  dart.setMethodSignature(core$.Action, () => ({
    __proto__: dart.getMethods(core$.Action.__proto__),
    call: dart.fnType(dart.dynamic, [], [core.List, dart.nullable(core.Map$(core.String, dart.dynamic))])
  }));
  dart.setGetterSignature(core$.Action, () => ({
    __proto__: dart.getGetters(core$.Action.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(core$.Action, I[16]);
  dart.setFieldSignature(core$.Action, () => ({
    __proto__: dart.getFields(core$.Action.__proto__),
    [_controller$]: dart.finalFieldType(core$.ActionController),
    [_fn$]: dart.finalFieldType(core.Function)
  }));
  var name$ = dart.privateName(core$, "ActionController.name");
  var _context$1 = dart.privateName(core$, "_context");
  core$.ActionController = class ActionController extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    startAction(opts) {
      let t27;
      let name = opts && 'name' in opts ? opts.name : null;
      let reportingName = (t27 = name, t27 == null ? this.name : t27);
      this[_context$1].spyReport(new core$.ActionSpyEvent.new({name: reportingName}));
      let startTime = new core.DateTime.now();
      let prevDerivation = this[_context$1].startUntracked();
      this[_context$1].startBatch();
      let prevAllowStateChanges = this[_context$1].startAllowStateChanges({allow: true});
      return new core$.ActionRunInfo.new({prevDerivation: prevDerivation, prevAllowStateChanges: prevAllowStateChanges, name: reportingName, startTime: startTime});
    }
    endAction(info) {
      let t27;
      if (info == null) dart.nullFailed(I[17], 98, 32, "info");
      this[_context$1].spyReport(new core$.EndedSpyEvent.new({type: "action", name: info.name, duration: new core.DateTime.now().difference(info.startTime)}));
      t27 = this[_context$1];
      (() => {
        t27.endAllowStateChanges({allow: info.prevAllowStateChanges});
        t27.endBatch();
        t27.endUntracked(info.prevDerivation);
        return t27;
      })();
    }
  };
  (core$.ActionController.new = function(opts) {
    let t27;
    let context = opts && 'context' in opts ? opts.context : null;
    let name = opts && 'name' in opts ? opts.name : null;
    core$.ActionController.__.call(this, (t27 = context, t27 == null ? context$.mainContext : t27), {name: name});
  }).prototype = core$.ActionController.prototype;
  (core$.ActionController.__ = function(_context, opts) {
    let t27;
    if (_context == null) dart.nullFailed(I[17], 76, 27, "_context");
    let name = opts && 'name' in opts ? opts.name : null;
    this[_context$1] = _context;
    this[name$] = (t27 = name, t27 == null ? _context.nameFor("Action") : t27);
    ;
  }).prototype = core$.ActionController.prototype;
  dart.addTypeTests(core$.ActionController);
  dart.addTypeCaches(core$.ActionController);
  dart.setMethodSignature(core$.ActionController, () => ({
    __proto__: dart.getMethods(core$.ActionController.__proto__),
    startAction: dart.fnType(core$.ActionRunInfo, [], {name: dart.nullable(core.String)}, {}),
    endAction: dart.fnType(dart.void, [core$.ActionRunInfo])
  }));
  dart.setLibraryUri(core$.ActionController, I[16]);
  dart.setFieldSignature(core$.ActionController, () => ({
    __proto__: dart.getFields(core$.ActionController.__proto__),
    [_context$1]: dart.finalFieldType(core$.ReactiveContext),
    name: dart.finalFieldType(core.String)
  }));
  var prevDerivation$ = dart.privateName(core$, "ActionRunInfo.prevDerivation");
  var prevAllowStateChanges$ = dart.privateName(core$, "ActionRunInfo.prevAllowStateChanges");
  var name$0 = dart.privateName(core$, "ActionRunInfo.name");
  var startTime$ = dart.privateName(core$, "ActionRunInfo.startTime");
  core$.ActionRunInfo = class ActionRunInfo extends core.Object {
    get prevDerivation() {
      return this[prevDerivation$];
    }
    set prevDerivation(value) {
      super.prevDerivation = value;
    }
    get prevAllowStateChanges() {
      return this[prevAllowStateChanges$];
    }
    set prevAllowStateChanges(value) {
      super.prevAllowStateChanges = value;
    }
    get name() {
      return this[name$0];
    }
    set name(value) {
      super.name = value;
    }
    get startTime() {
      return this[startTime$];
    }
    set startTime(value) {
      super.startTime = value;
    }
  };
  (core$.ActionRunInfo.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    if (name == null) dart.nullFailed(I[17], 114, 19, "name");
    let startTime = opts && 'startTime' in opts ? opts.startTime : null;
    if (startTime == null) dart.nullFailed(I[17], 115, 19, "startTime");
    let prevDerivation = opts && 'prevDerivation' in opts ? opts.prevDerivation : null;
    let prevAllowStateChanges = opts && 'prevAllowStateChanges' in opts ? opts.prevAllowStateChanges : true;
    if (prevAllowStateChanges == null) dart.nullFailed(I[17], 117, 10, "prevAllowStateChanges");
    this[name$0] = name;
    this[startTime$] = startTime;
    this[prevDerivation$] = prevDerivation;
    this[prevAllowStateChanges$] = prevAllowStateChanges;
    ;
  }).prototype = core$.ActionRunInfo.prototype;
  dart.addTypeTests(core$.ActionRunInfo);
  dart.addTypeCaches(core$.ActionRunInfo);
  dart.setLibraryUri(core$.ActionRunInfo, I[16]);
  dart.setFieldSignature(core$.ActionRunInfo, () => ({
    __proto__: dart.getFields(core$.ActionRunInfo.__proto__),
    prevDerivation: dart.finalFieldType(dart.nullable(core$.Derivation)),
    prevAllowStateChanges: dart.finalFieldType(core.bool),
    name: dart.finalFieldType(core.String),
    startTime: dart.finalFieldType(core.DateTime)
  }));
  core$._ListenerKind = class _ListenerKind extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (core$._ListenerKind.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[18], 3, 6, "index");
    if (_name == null) dart.nullFailed(I[18], 3, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = core$._ListenerKind.prototype;
  dart.addTypeTests(core$._ListenerKind);
  dart.addTypeCaches(core$._ListenerKind);
  dart.setLibraryUri(core$._ListenerKind, I[16]);
  dart.setFieldSignature(core$._ListenerKind, () => ({
    __proto__: dart.getFields(core$._ListenerKind.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(core$._ListenerKind, ['toString']);
  core$._ListenerKind.onBecomeObserved = C[14] || CT.C14;
  core$._ListenerKind.onBecomeUnobserved = C[15] || CT.C15;
  core$._ListenerKind.values = C[16] || CT.C16;
  var name$1 = dart.privateName(core$, "Atom.name");
  var _isPendingUnobservation = dart.privateName(core$, "_isPendingUnobservation");
  var _lowestObserverState = dart.privateName(core$, "_lowestObserverState");
  var _isBeingObserved = dart.privateName(core$, "_isBeingObserved");
  var _observers = dart.privateName(core$, "_observers");
  var _observationListeners = dart.privateName(core$, "_observationListeners");
  var _reportObserved = dart.privateName(core$, "_reportObserved");
  var _dependenciesState = dart.privateName(core$, "_dependenciesState");
  var _addObserver = dart.privateName(core$, "_addObserver");
  var _enqueueForUnobservation = dart.privateName(core$, "_enqueueForUnobservation");
  var _removeObserver = dart.privateName(core$, "_removeObserver");
  var _notifyOnBecomeObserved = dart.privateName(core$, "_notifyOnBecomeObserved");
  var _notifyOnBecomeUnobserved = dart.privateName(core$, "_notifyOnBecomeUnobserved");
  var _addListener = dart.privateName(core$, "_addListener");
  core$.Atom = class Atom extends core.Object {
    get name() {
      return this[name$1];
    }
    set name(value) {
      super.name = value;
    }
    static new(opts) {
      let t27;
      let name = opts && 'name' in opts ? opts.name : null;
      let onObserved = opts && 'onObserved' in opts ? opts.onObserved : null;
      let onUnobserved = opts && 'onUnobserved' in opts ? opts.onUnobserved : null;
      let context = opts && 'context' in opts ? opts.context : null;
      return new core$.Atom.__((t27 = context, t27 == null ? context$.mainContext : t27), {name: name, onObserved: onObserved, onUnobserved: onUnobserved});
    }
    get context() {
      return this[_context$1];
    }
    get hasObservers() {
      return this[_observers][$isNotEmpty];
    }
    reportObserved() {
      this[_context$1][_reportObserved](this);
    }
    reportChanged() {
      let t27;
      t27 = this[_context$1];
      (() => {
        t27.startBatch();
        t27.propagateChanged(this);
        t27.endBatch();
        return t27;
      })();
    }
    [_addObserver](d) {
      if (d == null) dart.nullFailed(I[18], 65, 32, "d");
      this[_observers].add(d);
      if (dart.notNull(this[_lowestObserverState].index) > dart.notNull(d[_dependenciesState].index)) {
        this[_lowestObserverState] = d[_dependenciesState];
      }
    }
    [_removeObserver](d) {
      if (d == null) dart.nullFailed(I[18], 73, 35, "d");
      this[_observers].remove(d);
      if (dart.test(this[_observers][$isEmpty])) {
        this[_context$1][_enqueueForUnobservation](this);
      }
    }
    [_notifyOnBecomeObserved]() {
      let t27;
      let listeners = this[_observationListeners][$_get](core$._ListenerKind.onBecomeObserved);
      t27 = listeners;
      t27 == null ? null : t27[$forEach](C[17] || CT.C17);
    }
    static _notifyListener(listener) {
      if (listener == null) dart.nullFailed(I[18], 85, 47, "listener");
      return listener();
    }
    [_notifyOnBecomeUnobserved]() {
      let t27;
      let listeners = this[_observationListeners][$_get](core$._ListenerKind.onBecomeUnobserved);
      t27 = listeners;
      t27 == null ? null : t27[$forEach](C[17] || CT.C17);
    }
    onBecomeObserved(fn) {
      if (fn == null) dart.nullFailed(I[18], 92, 52, "fn");
      return this[_addListener](core$._ListenerKind.onBecomeObserved, fn);
    }
    onBecomeUnobserved(fn) {
      if (fn == null) dart.nullFailed(I[18], 95, 54, "fn");
      return this[_addListener](core$._ListenerKind.onBecomeUnobserved, fn);
    }
    [_addListener](kind, fn) {
      let t27;
      if (kind == null) dart.nullFailed(I[18], 98, 46, "kind");
      if (fn == null) dart.nullFailed(I[18], 98, 68, "fn");
      if (this[_observationListeners][$_get](kind) == null) {
        this[_observationListeners][$_set](kind, (t27 = T$.LinkedHashSetOfVoidTovoid().new(), (() => {
          t27.add(fn);
          return t27;
        })()));
      } else {
        dart.nullCheck(this[_observationListeners][$_get](kind)).add(fn);
      }
      return dart.fn(() => {
        let listeners = this[_observationListeners][$_get](kind);
        if (listeners == null) {
          return;
        }
        listeners.removeWhere(dart.fn(f => {
          if (f == null) dart.nullFailed(I[18], 111, 30, "f");
          return dart.equals(f, fn);
        }, T$.FnTobool()));
        if (dart.test(listeners[$isEmpty])) {
          this[_observationListeners][$_set](kind, null);
        }
      }, T$.VoidTovoid());
    }
  };
  (core$.Atom.__ = function(_context, opts) {
    let t27;
    if (_context == null) dart.nullFailed(I[18], 23, 15, "_context");
    let name = opts && 'name' in opts ? opts.name : null;
    let onObserved = opts && 'onObserved' in opts ? opts.onObserved : null;
    let onUnobserved = opts && 'onUnobserved' in opts ? opts.onUnobserved : null;
    this[_isPendingUnobservation] = false;
    this[_lowestObserverState] = core$.DerivationState.notTracking;
    this[_isBeingObserved] = false;
    this[_observers] = T$.LinkedHashSetOfDerivation().new();
    this[_observationListeners] = new (T$.LinkedMapOf_ListenerKind$SetNOfVoidTovoid()).new();
    this[_context$1] = _context;
    this[name$1] = (t27 = name, t27 == null ? _context.nameFor("Atom") : t27);
    if (onObserved != null) {
      this.onBecomeObserved(onObserved);
    }
    if (onUnobserved != null) {
      this.onBecomeUnobserved(onUnobserved);
    }
  }).prototype = core$.Atom.prototype;
  dart.addTypeTests(core$.Atom);
  dart.addTypeCaches(core$.Atom);
  dart.setMethodSignature(core$.Atom, () => ({
    __proto__: dart.getMethods(core$.Atom.__proto__),
    reportObserved: dart.fnType(dart.void, []),
    reportChanged: dart.fnType(dart.void, []),
    [_addObserver]: dart.fnType(dart.void, [core$.Derivation]),
    [_removeObserver]: dart.fnType(dart.void, [core$.Derivation]),
    [_notifyOnBecomeObserved]: dart.fnType(dart.void, []),
    [_notifyOnBecomeUnobserved]: dart.fnType(dart.void, []),
    onBecomeObserved: dart.fnType(dart.fnType(dart.void, []), [dart.fnType(dart.void, [])]),
    onBecomeUnobserved: dart.fnType(dart.fnType(dart.void, []), [dart.fnType(dart.void, [])]),
    [_addListener]: dart.fnType(dart.fnType(dart.void, []), [core$._ListenerKind, dart.fnType(dart.void, [])])
  }));
  dart.setGetterSignature(core$.Atom, () => ({
    __proto__: dart.getGetters(core$.Atom.__proto__),
    context: core$.ReactiveContext,
    hasObservers: core.bool
  }));
  dart.setLibraryUri(core$.Atom, I[16]);
  dart.setFieldSignature(core$.Atom, () => ({
    __proto__: dart.getFields(core$.Atom.__proto__),
    [_context$1]: dart.finalFieldType(core$.ReactiveContext),
    name: dart.finalFieldType(core.String),
    [_isPendingUnobservation]: dart.fieldType(core.bool),
    [_lowestObserverState]: dart.fieldType(core$.DerivationState),
    [_isBeingObserved]: dart.fieldType(core.bool),
    [_observers]: dart.finalFieldType(core.Set$(core$.Derivation)),
    [_observationListeners]: dart.finalFieldType(core.Map$(core$._ListenerKind, dart.nullable(core.Set$(dart.fnType(dart.void, [])))))
  }));
  var type$2 = dart.privateName(core$, "WillChangeNotification.type");
  var newValue$1 = dart.privateName(core$, "WillChangeNotification.newValue");
  var object$1 = dart.privateName(core$, "WillChangeNotification.object");
  const _is_WillChangeNotification_default = Symbol('_is_WillChangeNotification_default');
  core$.WillChangeNotification$ = dart.generic(T => {
    var TN = () => (TN = dart.constFn(dart.nullable(T)))();
    class WillChangeNotification extends core.Object {
      get type() {
        return this[type$2];
      }
      set type(value) {
        super.type = value;
      }
      get newValue() {
        return this[newValue$1];
      }
      set newValue(value) {
        this[newValue$1] = TN().as(value);
      }
      get object() {
        return this[object$1];
      }
      set object(value) {
        super.object = value;
      }
    }
    (WillChangeNotification.new = function(opts) {
      let type = opts && 'type' in opts ? opts.type : null;
      let newValue = opts && 'newValue' in opts ? opts.newValue : null;
      let object = opts && 'object' in opts ? opts.object : null;
      this[type$2] = type;
      this[newValue$1] = newValue;
      this[object$1] = object;
      ;
    }).prototype = WillChangeNotification.prototype;
    dart.addTypeTests(WillChangeNotification);
    WillChangeNotification.prototype[_is_WillChangeNotification_default] = true;
    dart.addTypeCaches(WillChangeNotification);
    dart.setLibraryUri(WillChangeNotification, I[16]);
    dart.setFieldSignature(WillChangeNotification, () => ({
      __proto__: dart.getFields(WillChangeNotification.__proto__),
      type: dart.finalFieldType(dart.nullable(core$.OperationType)),
      newValue: dart.fieldType(dart.nullable(T)),
      object: dart.finalFieldType(dart.dynamic)
    }));
    return WillChangeNotification;
  });
  core$.WillChangeNotification = core$.WillChangeNotification$();
  dart.defineLazy(core$.WillChangeNotification, {
    /*core$.WillChangeNotification.unchanged*/get unchanged() {
      return new core$.WillChangeNotification.new();
    },
    set unchanged(_) {}
  }, false);
  dart.addTypeTests(core$.WillChangeNotification, _is_WillChangeNotification_default);
  core$.OperationType = class OperationType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (core$.OperationType.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[18], 131, 6, "index");
    if (_name == null) dart.nullFailed(I[18], 131, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = core$.OperationType.prototype;
  dart.addTypeTests(core$.OperationType);
  dart.addTypeCaches(core$.OperationType);
  dart.setLibraryUri(core$.OperationType, I[16]);
  dart.setFieldSignature(core$.OperationType, () => ({
    __proto__: dart.getFields(core$.OperationType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(core$.OperationType, ['toString']);
  core$.OperationType.add = C[18] || CT.C18;
  core$.OperationType.update = C[0] || CT.C0;
  core$.OperationType.remove = C[19] || CT.C19;
  core$.OperationType.values = C[20] || CT.C20;
  var type$3 = dart.privateName(core$, "ChangeNotification.type");
  var oldValue$1 = dart.privateName(core$, "ChangeNotification.oldValue");
  var newValue$2 = dart.privateName(core$, "ChangeNotification.newValue");
  var object$2 = dart.privateName(core$, "ChangeNotification.object");
  const _is_ChangeNotification_default = Symbol('_is_ChangeNotification_default');
  core$.ChangeNotification$ = dart.generic(T => {
    var TN = () => (TN = dart.constFn(dart.nullable(T)))();
    class ChangeNotification extends core.Object {
      get type() {
        return this[type$3];
      }
      set type(value) {
        super.type = value;
      }
      get oldValue() {
        return this[oldValue$1];
      }
      set oldValue(value) {
        super.oldValue = value;
      }
      get newValue() {
        return this[newValue$2];
      }
      set newValue(value) {
        this[newValue$2] = TN().as(value);
      }
      get object() {
        return this[object$2];
      }
      set object(value) {
        this[object$2] = value;
      }
    }
    (ChangeNotification.new = function(opts) {
      let type = opts && 'type' in opts ? opts.type : null;
      let newValue = opts && 'newValue' in opts ? opts.newValue : null;
      let oldValue = opts && 'oldValue' in opts ? opts.oldValue : null;
      let object = opts && 'object' in opts ? opts.object : null;
      this[type$3] = type;
      this[newValue$2] = newValue;
      this[oldValue$1] = oldValue;
      this[object$2] = object;
      ;
    }).prototype = ChangeNotification.prototype;
    dart.addTypeTests(ChangeNotification);
    ChangeNotification.prototype[_is_ChangeNotification_default] = true;
    dart.addTypeCaches(ChangeNotification);
    dart.setLibraryUri(ChangeNotification, I[16]);
    dart.setFieldSignature(ChangeNotification, () => ({
      __proto__: dart.getFields(ChangeNotification.__proto__),
      type: dart.finalFieldType(dart.nullable(core$.OperationType)),
      oldValue: dart.finalFieldType(dart.nullable(T)),
      newValue: dart.fieldType(dart.nullable(T)),
      object: dart.fieldType(dart.dynamic)
    }));
    return ChangeNotification;
  });
  core$.ChangeNotification = core$.ChangeNotification$();
  dart.addTypeTests(core$.ChangeNotification, _is_ChangeNotification_default);
  var equals$ = dart.privateName(core$, "Computed.equals");
  var _errorValue = dart.privateName(core$, "_errorValue");
  var _observables = dart.privateName(core$, "_observables");
  var _newObservables = dart.privateName(core$, "_newObservables");
  var _value$ = dart.privateName(core$, "_value");
  var _isComputing = dart.privateName(core$, "_isComputing");
  var _shouldCompute = dart.privateName(core$, "_shouldCompute");
  var _trackAndCompute = dart.privateName(core$, "_trackAndCompute");
  var _propagateChangeConfirmed = dart.privateName(core$, "_propagateChangeConfirmed");
  var _hasCaughtException = dart.privateName(core$, "_hasCaughtException");
  var _pushComputation = dart.privateName(core$, "_pushComputation");
  var _popComputation = dart.privateName(core$, "_popComputation");
  var _clearObservables = dart.privateName(core$, "_clearObservables");
  var _suspend = dart.privateName(core$, "_suspend");
  var _propagatePossiblyChanged = dart.privateName(core$, "_propagatePossiblyChanged");
  var _onBecomeStale = dart.privateName(core$, "_onBecomeStale");
  var _isEqual = dart.privateName(core$, "_isEqual");
  const _is_Computed_default = Symbol('_is_Computed_default');
  core$.Computed$ = dart.generic(T => {
    var ChangeNotificationOfT = () => (ChangeNotificationOfT = dart.constFn(core$.ChangeNotification$(T)))();
    class Computed extends core$.Atom {
      get equals() {
        return this[equals$];
      }
      set equals(value) {
        super.equals = value;
      }
      static new(fn, opts) {
        let t27;
        if (fn == null) dart.nullFailed(I[19], 34, 33, "fn");
        let name = opts && 'name' in opts ? opts.name : null;
        let context = opts && 'context' in opts ? opts.context : null;
        let equals = opts && 'equals' in opts ? opts.equals : null;
        return new (core$.Computed$(T)).__((t27 = context, t27 == null ? context$.mainContext : t27), fn, {name: name, equals: equals});
      }
      get errorValue() {
        return this[_errorValue];
      }
      get value() {
        if (dart.test(this[_isComputing])) {
          dart.throw(new core$.MobXCyclicReactionException.new("Cycle detected in computation " + dart.str(this.name) + ": " + dart.str(this[_fn$])));
        }
        if (!dart.test(this[_context$1].isWithinBatch) && dart.test(this[_observers][$isEmpty])) {
          if (dart.test(this[_context$1][_shouldCompute](this))) {
            this[_context$1].startBatch();
            this[_value$] = this.computeValue({track: false});
            this[_context$1].endBatch();
          }
        } else {
          this.reportObserved();
          if (dart.test(this[_context$1][_shouldCompute](this))) {
            if (dart.test(this[_trackAndCompute]())) {
              this[_context$1][_propagateChangeConfirmed](this);
            }
          }
        }
        if (dart.test(this[_context$1][_hasCaughtException](this))) {
          dart.throw(dart.nullCheck(this[_errorValue]));
        }
        return T.as(this[_value$]);
      }
      computeValue(opts) {
        let track = opts && 'track' in opts ? opts.track : null;
        if (track == null) dart.nullFailed(I[19], 97, 34, "track");
        this[_isComputing] = true;
        this[_context$1][_pushComputation]();
        let value = null;
        if (dart.test(track)) {
          value = this[_context$1].trackDerivation(T, this, this[_fn$]);
        } else {
          if (this[_context$1].config.disableErrorBoundaries === true) {
            value = this[_fn$]();
          } else {
            try {
              value = this[_fn$]();
              this[_errorValue] = null;
            } catch (e$) {
              let e = dart.getThrown(e$);
              let s = dart.stackTrace(e$);
              if (core.Object.is(e)) {
                this[_errorValue] = new core$.MobXCaughtException.new(e, {stackTrace: s});
              } else
                throw e$;
            }
          }
        }
        this[_context$1][_popComputation]();
        this[_isComputing] = false;
        return value;
      }
      [_suspend]() {
        this[_context$1][_clearObservables](this);
        this[_value$] = null;
      }
      [_onBecomeStale]() {
        this[_context$1][_propagatePossiblyChanged](this);
      }
      [_trackAndCompute]() {
        if (dart.test(this[_context$1].isSpyEnabled)) {
          this[_context$1].spyReport(new core$.ComputedValueSpyEvent.new(this, {name: this.name}));
        }
        let oldValue = this[_value$];
        let wasSuspended = this[_dependenciesState] == core$.DerivationState.notTracking;
        let newValue = this.computeValue({track: true});
        let changed = wasSuspended || dart.test(this[_context$1][_hasCaughtException](this)) || !dart.test(this[_isEqual](oldValue, newValue));
        if (changed) {
          this[_value$] = newValue;
        }
        return changed;
      }
      [_isEqual](x, y) {
        return this.equals == null ? dart.equals(x, y) : dart.nullCheck(this.equals)(x, y);
      }
      observe(handler, opts) {
        if (handler == null) dart.nullFailed(I[19], 157, 64, "handler");
        let fireImmediately = opts && 'fireImmediately' in opts ? opts.fireImmediately : null;
        let prevValue = null;
        const notifyChange = () => {
          this[_context$1].untracked(core.Null, dart.fn(() => {
            handler(new (ChangeNotificationOfT()).new({type: core$.OperationType.update, object: this, oldValue: prevValue, newValue: this.value}));
          }, T$.VoidToNull()));
        };
        dart.fn(notifyChange, T$.VoidTovoid());
        return dart.bind(reaction.autorun(dart.fn(_ => {
          if (_ == null) dart.nullFailed(I[19], 171, 21, "_");
          let newValue = this.value;
          notifyChange();
          prevValue = newValue;
        }, T$.ReactionToNull()), {context: this[_context$1]}), 'call');
      }
    }
    (Computed.__ = function(context, _fn, opts) {
      let t27;
      if (context == null) dart.nullFailed(I[19], 40, 30, "context");
      if (_fn == null) dart.nullFailed(I[19], 40, 44, "_fn");
      let name = opts && 'name' in opts ? opts.name : null;
      let equals = opts && 'equals' in opts ? opts.equals : null;
      this[_errorValue] = null;
      this[_observables] = T$.LinkedHashSetOfAtom().new();
      this[_newObservables] = null;
      this[_dependenciesState] = core$.DerivationState.notTracking;
      this[_value$] = null;
      this[_isComputing] = false;
      this[_fn$] = _fn;
      this[equals$] = equals;
      Computed.__proto__.__.call(this, context, {name: (t27 = name, t27 == null ? context.nameFor("Computed") : t27)});
      ;
    }).prototype = Computed.prototype;
    dart.addTypeTests(Computed);
    Computed.prototype[_is_Computed_default] = true;
    dart.addTypeCaches(Computed);
    Computed[dart.implements] = () => [core$.Derivation, core$.ObservableValue$(T)];
    dart.setMethodSignature(Computed, () => ({
      __proto__: dart.getMethods(Computed.__proto__),
      computeValue: dart.fnType(dart.nullable(T), [], {}, {track: core.bool}),
      [_suspend]: dart.fnType(dart.void, []),
      [_onBecomeStale]: dart.fnType(dart.void, []),
      [_trackAndCompute]: dart.fnType(core.bool, []),
      [_isEqual]: dart.fnType(core.bool, [dart.nullable(T), dart.nullable(T)]),
      observe: dart.fnType(dart.fnType(dart.void, []), [dart.fnType(dart.void, [core$.ChangeNotification$(T)])], {fireImmediately: dart.nullable(core.bool)}, {})
    }));
    dart.setGetterSignature(Computed, () => ({
      __proto__: dart.getGetters(Computed.__proto__),
      errorValue: dart.nullable(core$.MobXCaughtException),
      value: T
    }));
    dart.setLibraryUri(Computed, I[16]);
    dart.setFieldSignature(Computed, () => ({
      __proto__: dart.getFields(Computed.__proto__),
      equals: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [dart.nullable(T), dart.nullable(T)]))),
      [_errorValue]: dart.fieldType(dart.nullable(core$.MobXCaughtException)),
      [_observables]: dart.fieldType(core.Set$(core$.Atom)),
      [_newObservables]: dart.fieldType(dart.nullable(core.Set$(core$.Atom))),
      [_fn$]: dart.fieldType(dart.fnType(T, [])),
      [_dependenciesState]: dart.fieldType(core$.DerivationState),
      [_value$]: dart.fieldType(dart.nullable(T)),
      [_isComputing]: dart.fieldType(core.bool)
    }));
    return Computed;
  });
  core$.Computed = core$.Computed$();
  dart.addTypeTests(core$.Computed, _is_Computed_default);
  core$._ReactiveState = class _ReactiveState extends core.Object {
    get isWithinBatch() {
      return dart.notNull(this.batch) > 0;
    }
    get isWithinDerivation() {
      return this.trackingDerivation != null || dart.notNull(this.computationDepth) > 0;
    }
  };
  (core$._ReactiveState.new = function() {
    this.batch = 0;
    this.nextIdCounter = 0;
    this.trackingDerivation = null;
    this.pendingReactions = T$.JSArrayOfReaction().of([]);
    this.isRunningReactions = false;
    this.pendingUnobservations = T$.JSArrayOfAtom().of([]);
    this.computationDepth = 0;
    this.allowStateChanges = true;
    this.spyListeners = T$.JSArrayOfSpyEventTovoid().of([]);
    ;
  }).prototype = core$._ReactiveState.prototype;
  dart.addTypeTests(core$._ReactiveState);
  dart.addTypeCaches(core$._ReactiveState);
  dart.setGetterSignature(core$._ReactiveState, () => ({
    __proto__: dart.getGetters(core$._ReactiveState.__proto__),
    isWithinBatch: core.bool,
    isWithinDerivation: core.bool
  }));
  dart.setLibraryUri(core$._ReactiveState, I[16]);
  dart.setFieldSignature(core$._ReactiveState, () => ({
    __proto__: dart.getFields(core$._ReactiveState.__proto__),
    batch: dart.fieldType(core.int),
    nextIdCounter: dart.fieldType(core.int),
    trackingDerivation: dart.fieldType(dart.nullable(core$.Derivation)),
    pendingReactions: dart.fieldType(core.List$(core$.Reaction)),
    isRunningReactions: dart.fieldType(core.bool),
    pendingUnobservations: dart.fieldType(core.List$(core$.Atom)),
    computationDepth: dart.fieldType(core.int),
    allowStateChanges: dart.fieldType(core.bool),
    spyListeners: dart.fieldType(core.List$(dart.fnType(dart.void, [core$.SpyEvent])))
  }));
  core$.ReactiveReadPolicy = class ReactiveReadPolicy extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (core$.ReactiveReadPolicy.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[20], 47, 6, "index");
    if (_name == null) dart.nullFailed(I[20], 47, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = core$.ReactiveReadPolicy.prototype;
  dart.addTypeTests(core$.ReactiveReadPolicy);
  dart.addTypeCaches(core$.ReactiveReadPolicy);
  dart.setLibraryUri(core$.ReactiveReadPolicy, I[16]);
  dart.setFieldSignature(core$.ReactiveReadPolicy, () => ({
    __proto__: dart.getFields(core$.ReactiveReadPolicy.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(core$.ReactiveReadPolicy, ['toString']);
  core$.ReactiveReadPolicy.always = C[21] || CT.C21;
  core$.ReactiveReadPolicy.never = C[22] || CT.C22;
  core$.ReactiveReadPolicy.values = C[23] || CT.C23;
  core$.ReactiveWritePolicy = class ReactiveWritePolicy extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (core$.ReactiveWritePolicy.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[20], 54, 6, "index");
    if (_name == null) dart.nullFailed(I[20], 54, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = core$.ReactiveWritePolicy.prototype;
  dart.addTypeTests(core$.ReactiveWritePolicy);
  dart.addTypeCaches(core$.ReactiveWritePolicy);
  dart.setLibraryUri(core$.ReactiveWritePolicy, I[16]);
  dart.setFieldSignature(core$.ReactiveWritePolicy, () => ({
    __proto__: dart.getFields(core$.ReactiveWritePolicy.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(core$.ReactiveWritePolicy, ['toString']);
  core$.ReactiveWritePolicy.observed = C[24] || CT.C24;
  core$.ReactiveWritePolicy.always = C[25] || CT.C25;
  core$.ReactiveWritePolicy.never = C[26] || CT.C26;
  core$.ReactiveWritePolicy.values = C[27] || CT.C27;
  var disableErrorBoundaries$ = dart.privateName(core$, "ReactiveConfig.disableErrorBoundaries");
  var writePolicy$ = dart.privateName(core$, "ReactiveConfig.writePolicy");
  var readPolicy$ = dart.privateName(core$, "ReactiveConfig.readPolicy");
  var maxIterations$ = dart.privateName(core$, "ReactiveConfig.maxIterations");
  var _reactionErrorHandlers = dart.privateName(core$, "_reactionErrorHandlers");
  core$.ReactiveConfig = class ReactiveConfig extends core.Object {
    get disableErrorBoundaries() {
      return this[disableErrorBoundaries$];
    }
    set disableErrorBoundaries(value) {
      super.disableErrorBoundaries = value;
    }
    get writePolicy() {
      return this[writePolicy$];
    }
    set writePolicy(value) {
      super.writePolicy = value;
    }
    get readPolicy() {
      return this[readPolicy$];
    }
    set readPolicy(value) {
      super.readPolicy = value;
    }
    get maxIterations() {
      return this[maxIterations$];
    }
    set maxIterations(value) {
      super.maxIterations = value;
    }
    clone(opts) {
      let t28, t28$, t28$0, t28$1;
      let disableErrorBoundaries = opts && 'disableErrorBoundaries' in opts ? opts.disableErrorBoundaries : null;
      let writePolicy = opts && 'writePolicy' in opts ? opts.writePolicy : null;
      let readPolicy = opts && 'readPolicy' in opts ? opts.readPolicy : null;
      let maxIterations = opts && 'maxIterations' in opts ? opts.maxIterations : null;
      return new core$.ReactiveConfig.new({disableErrorBoundaries: (t28 = disableErrorBoundaries, t28 == null ? this.disableErrorBoundaries : t28), writePolicy: (t28$ = writePolicy, t28$ == null ? this.writePolicy : t28$), readPolicy: (t28$0 = readPolicy, t28$0 == null ? this.readPolicy : t28$0), maxIterations: (t28$1 = maxIterations, t28$1 == null ? this.maxIterations : t28$1)});
    }
  };
  (core$.ReactiveConfig.new = function(opts) {
    let disableErrorBoundaries = opts && 'disableErrorBoundaries' in opts ? opts.disableErrorBoundaries : false;
    if (disableErrorBoundaries == null) dart.nullFailed(I[20], 59, 10, "disableErrorBoundaries");
    let writePolicy = opts && 'writePolicy' in opts ? opts.writePolicy : C[24] || CT.C24;
    if (writePolicy == null) dart.nullFailed(I[20], 60, 10, "writePolicy");
    let readPolicy = opts && 'readPolicy' in opts ? opts.readPolicy : C[22] || CT.C22;
    if (readPolicy == null) dart.nullFailed(I[20], 61, 10, "readPolicy");
    let maxIterations = opts && 'maxIterations' in opts ? opts.maxIterations : 100;
    if (maxIterations == null) dart.nullFailed(I[20], 62, 10, "maxIterations");
    this[_reactionErrorHandlers] = T$.LinkedHashSetOfObjectAndReactionTovoid().new();
    this[disableErrorBoundaries$] = disableErrorBoundaries;
    this[writePolicy$] = writePolicy;
    this[readPolicy$] = readPolicy;
    this[maxIterations$] = maxIterations;
    ;
  }).prototype = core$.ReactiveConfig.prototype;
  dart.addTypeTests(core$.ReactiveConfig);
  dart.addTypeCaches(core$.ReactiveConfig);
  dart.setMethodSignature(core$.ReactiveConfig, () => ({
    __proto__: dart.getMethods(core$.ReactiveConfig.__proto__),
    clone: dart.fnType(core$.ReactiveConfig, [], {disableErrorBoundaries: dart.nullable(core.bool), maxIterations: dart.nullable(core.int), readPolicy: dart.nullable(core$.ReactiveReadPolicy), writePolicy: dart.nullable(core$.ReactiveWritePolicy)}, {})
  }));
  dart.setLibraryUri(core$.ReactiveConfig, I[16]);
  dart.setFieldSignature(core$.ReactiveConfig, () => ({
    __proto__: dart.getFields(core$.ReactiveConfig.__proto__),
    disableErrorBoundaries: dart.finalFieldType(core.bool),
    writePolicy: dart.finalFieldType(core$.ReactiveWritePolicy),
    readPolicy: dart.finalFieldType(core$.ReactiveReadPolicy),
    maxIterations: dart.finalFieldType(core.int),
    [_reactionErrorHandlers]: dart.finalFieldType(core.Set$(dart.fnType(dart.void, [core.Object, core$.Reaction])))
  }));
  dart.defineLazy(core$.ReactiveConfig, {
    /*core$.ReactiveConfig.main*/get main() {
      return new core$.ReactiveConfig.new({disableErrorBoundaries: false, writePolicy: core$.ReactiveWritePolicy.observed, readPolicy: core$.ReactiveReadPolicy.never});
    }
  }, false);
  var __ReactiveContext__config = dart.privateName(core$, "_#ReactiveContext#_config");
  var _state = dart.privateName(core$, "_state");
  var _config = dart.privateName(core$, "_config");
  var _resetDerivationState = dart.privateName(core$, "_resetDerivationState");
  var _startTracking = dart.privateName(core$, "_startTracking");
  var _bindDependencies = dart.privateName(core$, "_bindDependencies");
  var _endTracking = dart.privateName(core$, "_endTracking");
  var _runReactionsInternal = dart.privateName(core$, "_runReactionsInternal");
  var _resetState = dart.privateName(core$, "_resetState");
  var _run$ = dart.privateName(core$, "_run");
  var _notifyReactionErrorHandlers = dart.privateName(core$, "_notifyReactionErrorHandlers");
  core$.ReactiveContext = class ReactiveContext extends core.Object {
    set [_config](t28) {
      if (t28 == null) dart.nullFailed(I[20], 104, 23, "null");
      this[__ReactiveContext__config] = t28;
    }
    get [_config]() {
      let t29;
      t29 = this[__ReactiveContext__config];
      return t29 == null ? dart.throw(new _internal.LateError.fieldNI("_config")) : t29;
    }
    get config() {
      return this[_config];
    }
    set config(newValue) {
      if (newValue == null) dart.nullFailed(I[20], 107, 29, "newValue");
      this[_config] = newValue;
      this[_state].allowStateChanges = this[_config].writePolicy == core$.ReactiveWritePolicy.never;
    }
    get nextId() {
      let t29;
      t29 = this[_state];
      return t29.nextIdCounter = dart.notNull(t29.nextIdCounter) + 1;
    }
    nameFor(prefix) {
      if (prefix == null) dart.nullFailed(I[20], 116, 25, "prefix");
      if (!prefix[$isNotEmpty]) dart.assertFailed(null, I[20], 117, 12, "prefix.isNotEmpty");
      return dart.str(prefix) + "@" + dart.str(this.nextId);
    }
    get isWithinBatch() {
      return this[_state].isWithinBatch;
    }
    get isSpyEnabled() {
      return dart.test(core$._isDebugMode) && dart.test(this[_state].spyListeners[$isNotEmpty]);
    }
    spy(listener) {
      if (listener == null) dart.nullFailed(I[20], 125, 27, "listener");
      this[_state].spyListeners[$add](listener);
      return core$._once(dart.fn(() => {
        this[_state].spyListeners[$remove](listener);
      }, T$.VoidToNull()));
    }
    spyReport(event) {
      if (event == null) dart.nullFailed(I[20], 133, 27, "event");
      if (!dart.test(this.isSpyEnabled)) {
        return;
      }
      for (let i = 0; i < dart.notNull(this[_state].spyListeners[$length]); i = i + 1) {
        this[_state].spyListeners[$_get](i)(event);
      }
    }
    startBatch() {
      let t29;
      t29 = this[_state];
      t29.batch = dart.notNull(t29.batch) + 1;
    }
    endBatch() {
      let t29, t29$, t29$0;
      if ((t29 = this[_state], t29.batch = dart.notNull(t29.batch) - 1) === 0) {
        this.runReactions();
        for (let i = 0; i < dart.notNull(this[_state].pendingUnobservations[$length]); i = i + 1) {
          let ob = (t29$ = this[_state].pendingUnobservations[$_get](i), (() => {
            t29$[_isPendingUnobservation] = false;
            return t29$;
          })());
          if (dart.test(ob[_observers][$isEmpty])) {
            if (dart.test(ob[_isBeingObserved])) {
              t29$0 = ob;
              (() => {
                t29$0[_isBeingObserved] = false;
                t29$0[_notifyOnBecomeUnobserved]();
                return t29$0;
              })();
            }
            if (core$.Computed.is(ob)) {
              ob[_suspend]();
            }
          }
        }
        this[_state].pendingUnobservations = T$.JSArrayOfAtom().of([]);
      }
    }
    enforceReadPolicy(atom) {
      if (atom == null) dart.nullFailed(I[20], 173, 31, "atom");
      if (!dart.test(dart.fn(() => {
        switch (this.config.readPolicy) {
          case C[21] || CT.C21:
          {
            if (!(dart.test(this[_state].isWithinBatch) || dart.test(this[_state].isWithinDerivation))) dart.assertFailed("Observable values cannot be read outside Actions and Reactions. Make sure to wrap them inside an action or a reaction. Tried to read: " + dart.str(atom.name), I[20], 181, 18, "_state.isWithinBatch || _state.isWithinDerivation");
            break;
          }
          case C[22] || CT.C22:
          {
            break;
          }
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[20], 178, 12, "() {\n      switch (config.readPolicy) {\n        case ReactiveReadPolicy.always:\n          assert(_state.isWithinBatch || _state.isWithinDerivation,\n              'Observable values cannot be read outside Actions and Reactions. Make sure to wrap them inside an action or a reaction. Tried to read: ${atom.name}');\n          break;\n\n        case ReactiveReadPolicy.never:\n          break;\n      }\n\n      return true;\n    }()");
    }
    enforceWritePolicy(atom) {
      if (atom == null) dart.nullFailed(I[20], 193, 32, "atom");
      if (dart.notNull(this[_state].computationDepth) > 0 && dart.test(atom.hasObservers)) {
        dart.throw(new core$.MobXException.new("Computed values are not allowed to cause side effects by changing observables that are already being observed. Tried to modify: " + dart.str(atom.name)));
      }
      if (!dart.test(dart.fn(() => {
        switch (this.config.writePolicy) {
          case C[26] || CT.C26:
          {
            break;
          }
          case C[24] || CT.C24:
          {
            if (atom.hasObservers === false) {
              break;
            }
            if (!dart.test(this[_state].isWithinBatch)) dart.assertFailed("Side effects like changing state are not allowed at this point. Please wrap the code in an \"action\". Tried to modify: " + dart.str(atom.name), I[20], 214, 18, "_state.isWithinBatch");
            break;
          }
          case C[25] || CT.C25:
          {
            if (!dart.test(this[_state].isWithinBatch)) dart.assertFailed("Changing observable values outside actions is not allowed. Please wrap the code in an \"action\" if this change is intended. Tried to modify " + dart.str(atom.name), I[20], 219, 18, "_state.isWithinBatch");
          }
        }
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[20], 204, 12, "() {\n      switch (config.writePolicy) {\n        case ReactiveWritePolicy.never:\n          break;\n\n        case ReactiveWritePolicy.observed:\n          if (atom.hasObservers == false) {\n            break;\n          }\n\n          assert(_state.isWithinBatch,\n              'Side effects like changing state are not allowed at this point. Please wrap the code in an \"action\". Tried to modify: ${atom.name}');\n          break;\n\n        case ReactiveWritePolicy.always:\n          assert(_state.isWithinBatch,\n              'Changing observable values outside actions is not allowed. Please wrap the code in an \"action\" if this change is intended. Tried to modify ${atom.name}');\n      }\n\n      return true;\n    }()");
    }
    [_startTracking](derivation) {
      if (derivation == null) dart.nullFailed(I[20], 227, 41, "derivation");
      let prevDerivation = this[_state].trackingDerivation;
      this[_state].trackingDerivation = derivation;
      this[_resetDerivationState](derivation);
      derivation[_newObservables] = T$.LinkedHashSetOfAtom().new();
      return prevDerivation;
    }
    [_endTracking](currentDerivation, prevDerivation) {
      if (currentDerivation == null) dart.nullFailed(I[20], 237, 32, "currentDerivation");
      this[_state].trackingDerivation = prevDerivation;
      this[_bindDependencies](currentDerivation);
    }
    trackDerivation(T, d, fn) {
      if (d == null) dart.nullFailed(I[20], 242, 36, "d");
      if (fn == null) dart.nullFailed(I[20], 242, 52, "fn");
      let prevDerivation = this[_startTracking](d);
      let result = null;
      if (this.config.disableErrorBoundaries === true) {
        result = fn();
      } else {
        try {
          result = fn();
          d[_errorValue] = null;
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            d[_errorValue] = new core$.MobXCaughtException.new(e, {stackTrace: s});
          } else
            throw e$;
        }
      }
      this[_endTracking](d, prevDerivation);
      return result;
    }
    [_reportObserved](atom) {
      let t30;
      if (atom == null) dart.nullFailed(I[20], 261, 29, "atom");
      let derivation = this[_state].trackingDerivation;
      if (derivation != null) {
        dart.nullCheck(derivation[_newObservables]).add(atom);
        if (!dart.test(atom[_isBeingObserved])) {
          t30 = atom;
          (() => {
            t30[_isBeingObserved] = true;
            t30[_notifyOnBecomeObserved]();
            return t30;
          })();
        }
      }
    }
    [_bindDependencies](derivation) {
      let t30, t30$;
      if (derivation == null) dart.nullFailed(I[20], 274, 37, "derivation");
      let staleObservables = derivation[_observables].difference(dart.nullCheck(derivation[_newObservables]));
      let newObservables = dart.nullCheck(derivation[_newObservables]).difference(derivation[_observables]);
      let lowestNewDerivationState = core$.DerivationState.upToDate;
      for (let observable of newObservables) {
        observable[_addObserver](derivation);
        if (core$.Computed.is(observable)) {
          if (dart.notNull(observable[_dependenciesState].index) > dart.notNull(lowestNewDerivationState.index)) {
            lowestNewDerivationState = observable[_dependenciesState];
          }
        }
      }
      for (let ob of staleObservables) {
        ob[_removeObserver](derivation);
      }
      if (lowestNewDerivationState != core$.DerivationState.upToDate) {
        t30 = derivation;
        (() => {
          t30[_dependenciesState] = lowestNewDerivationState;
          t30[_onBecomeStale]();
          return t30;
        })();
      }
      t30$ = derivation;
      (() => {
        t30$[_observables] = dart.nullCheck(derivation[_newObservables]);
        t30$[_newObservables] = T$.LinkedHashSetOfAtom().new();
        return t30$;
      })();
    }
    addPendingReaction(reaction) {
      if (reaction == null) dart.nullFailed(I[20], 310, 36, "reaction");
      this[_state].pendingReactions[$add](reaction);
    }
    runReactions() {
      if (dart.notNull(this[_state].batch) > 0 || dart.test(this[_state].isRunningReactions)) {
        return;
      }
      this[_runReactionsInternal]();
    }
    [_runReactionsInternal]() {
      let t30;
      this[_state].isRunningReactions = true;
      let iterations = 0;
      let allReactions = this[_state].pendingReactions;
      while (dart.test(allReactions[$isNotEmpty])) {
        if ((iterations = iterations + 1) === this.config.maxIterations) {
          let failingReaction = allReactions[$_get](0);
          this[_resetState]();
          dart.throw(new core$.MobXCyclicReactionException.new("Reaction doesn't converge to a stable state after " + dart.str(this.config.maxIterations) + " iterations. Probably there is a cycle in the reactive function: " + dart.str(failingReaction)));
        }
        let remainingReactions = allReactions[$toList]({growable: false});
        allReactions[$clear]();
        for (let reaction of remainingReactions) {
          reaction[_run$]();
        }
      }
      t30 = this[_state];
      (() => {
        t30.pendingReactions = T$.JSArrayOfReaction().of([]);
        t30.isRunningReactions = false;
        return t30;
      })();
    }
    propagateChanged(atom) {
      if (atom == null) dart.nullFailed(I[20], 354, 30, "atom");
      if (atom[_lowestObserverState] == core$.DerivationState.stale) {
        return;
      }
      atom[_lowestObserverState] = core$.DerivationState.stale;
      for (let observer of atom[_observers]) {
        if (observer[_dependenciesState] == core$.DerivationState.upToDate) {
          observer[_onBecomeStale]();
        }
        observer[_dependenciesState] = core$.DerivationState.stale;
      }
    }
    [_propagatePossiblyChanged](atom) {
      let t30;
      if (atom == null) dart.nullFailed(I[20], 369, 39, "atom");
      if (atom[_lowestObserverState] != core$.DerivationState.upToDate) {
        return;
      }
      atom[_lowestObserverState] = core$.DerivationState.possiblyStale;
      for (let observer of atom[_observers]) {
        if (observer[_dependenciesState] == core$.DerivationState.upToDate) {
          t30 = observer;
          (() => {
            t30[_dependenciesState] = core$.DerivationState.possiblyStale;
            t30[_onBecomeStale]();
            return t30;
          })();
        }
      }
    }
    [_propagateChangeConfirmed](atom) {
      if (atom == null) dart.nullFailed(I[20], 385, 39, "atom");
      if (atom[_lowestObserverState] == core$.DerivationState.stale) {
        return;
      }
      atom[_lowestObserverState] = core$.DerivationState.stale;
      for (let observer of atom[_observers]) {
        if (observer[_dependenciesState] == core$.DerivationState.possiblyStale) {
          observer[_dependenciesState] = core$.DerivationState.stale;
        } else if (observer[_dependenciesState] == core$.DerivationState.upToDate) {
          atom[_lowestObserverState] = core$.DerivationState.upToDate;
        }
      }
    }
    [_clearObservables](derivation) {
      if (derivation == null) dart.nullFailed(I[20], 401, 37, "derivation");
      let observables = derivation[_observables];
      derivation[_observables] = T$.LinkedHashSetOfAtom().new();
      for (let x of observables) {
        x[_removeObserver](derivation);
      }
      derivation[_dependenciesState] = core$.DerivationState.notTracking;
    }
    [_enqueueForUnobservation](atom) {
      if (atom == null) dart.nullFailed(I[20], 412, 38, "atom");
      if (dart.test(atom[_isPendingUnobservation])) {
        return;
      }
      atom[_isPendingUnobservation] = true;
      this[_state].pendingUnobservations[$add](atom);
    }
    [_resetDerivationState](d) {
      if (d == null) dart.nullFailed(I[20], 421, 41, "d");
      if (d[_dependenciesState] == core$.DerivationState.upToDate) {
        return;
      }
      d[_dependenciesState] = core$.DerivationState.upToDate;
      for (let obs of d[_observables]) {
        obs[_lowestObserverState] = core$.DerivationState.upToDate;
      }
    }
    [_shouldCompute](derivation) {
      if (derivation == null) dart.nullFailed(I[20], 432, 34, "derivation");
      switch (derivation[_dependenciesState]) {
        case C[28] || CT.C28:
        {
          return false;
        }
        case C[29] || CT.C29:
        case C[30] || CT.C30:
        {
          return true;
        }
        case C[31] || CT.C31:
        {
          return this.untracked(core.bool, dart.fn(() => {
            for (let obs of derivation[_observables]) {
              if (core$.Computed.is(obs)) {
                if (this.config.disableErrorBoundaries === true) {
                  obs.value;
                } else {
                  try {
                    obs.value;
                  } catch (e) {
                    let _ = dart.getThrown(e);
                    if (core.Object.is(_)) {
                      return true;
                    } else
                      throw e;
                  }
                }
                if (derivation[_dependenciesState] == core$.DerivationState.stale) {
                  return true;
                }
              }
            }
            this[_resetDerivationState](derivation);
            return false;
          }, T$.VoidTobool()));
        }
      }
    }
    [_hasCaughtException](d) {
      if (d == null) dart.nullFailed(I[20], 468, 39, "d");
      return core$.MobXCaughtException.is(d[_errorValue]);
    }
    isComputingDerivation() {
      return this[_state].trackingDerivation != null;
    }
    startUntracked() {
      let prevDerivation = this[_state].trackingDerivation;
      this[_state].trackingDerivation = null;
      return prevDerivation;
    }
    endUntracked(prevDerivation) {
      this[_state].trackingDerivation = prevDerivation;
    }
    untracked(T, fn) {
      if (fn == null) dart.nullFailed(I[20], 484, 31, "fn");
      let prevDerivation = this.startUntracked();
      try {
        return fn();
      } finally {
        this.endUntracked(prevDerivation);
      }
    }
    onReactionError(handler) {
      if (handler == null) dart.nullFailed(I[20], 493, 48, "handler");
      this.config[_reactionErrorHandlers].add(handler);
      return dart.fn(() => {
        this.config[_reactionErrorHandlers].removeWhere(dart.fn(f => {
          if (f == null) dart.nullFailed(I[20], 496, 50, "f");
          return dart.equals(f, handler);
        }, T$.FnTobool$1()));
      }, T$.VoidTovoid());
    }
    [_notifyReactionErrorHandlers](exception, reaction) {
      if (exception == null) dart.nullFailed(I[20], 500, 44, "exception");
      if (reaction == null) dart.nullFailed(I[20], 500, 64, "reaction");
      this.config[_reactionErrorHandlers][$forEach](dart.fn(f => {
        if (f == null) dart.nullFailed(I[20], 502, 44, "f");
        f(exception, reaction);
      }, T$.FnTovoid$1()));
    }
    startAllowStateChanges(opts) {
      let allow = opts && 'allow' in opts ? opts.allow : true;
      if (allow == null) dart.nullFailed(I[20], 507, 37, "allow");
      let prevValue = this[_state].allowStateChanges;
      this[_state].allowStateChanges = allow;
      return prevValue;
    }
    endAllowStateChanges(opts) {
      let allow = opts && 'allow' in opts ? opts.allow : true;
      if (allow == null) dart.nullFailed(I[20], 514, 35, "allow");
      this[_state].allowStateChanges = allow;
    }
    [_pushComputation]() {
      let t31;
      t31 = this[_state];
      t31.computationDepth = dart.notNull(t31.computationDepth) + 1;
    }
    [_popComputation]() {
      let t31;
      t31 = this[_state];
      t31.computationDepth = dart.notNull(t31.computationDepth) - 1;
    }
    [_resetState]() {
      let t31;
      this[_state] = (t31 = new core$._ReactiveState.new(), (() => {
        t31.allowStateChanges = this[_config].writePolicy == core$.ReactiveWritePolicy.never;
        return t31;
      })());
    }
  };
  (core$.ReactiveContext.new = function(opts) {
    let t28;
    let config = opts && 'config' in opts ? opts.config : null;
    this[__ReactiveContext__config] = null;
    this[_state] = new core$._ReactiveState.new();
    this.config = (t28 = config, t28 == null ? core$.ReactiveConfig.main : t28);
  }).prototype = core$.ReactiveContext.prototype;
  dart.addTypeTests(core$.ReactiveContext);
  dart.addTypeCaches(core$.ReactiveContext);
  dart.setMethodSignature(core$.ReactiveContext, () => ({
    __proto__: dart.getMethods(core$.ReactiveContext.__proto__),
    nameFor: dart.fnType(core.String, [core.String]),
    spy: dart.fnType(dart.fnType(dart.void, []), [dart.fnType(dart.void, [core$.SpyEvent])]),
    spyReport: dart.fnType(dart.void, [core$.SpyEvent]),
    startBatch: dart.fnType(dart.void, []),
    endBatch: dart.fnType(dart.void, []),
    enforceReadPolicy: dart.fnType(dart.void, [core$.Atom]),
    enforceWritePolicy: dart.fnType(dart.void, [core$.Atom]),
    [_startTracking]: dart.fnType(dart.nullable(core$.Derivation), [core$.Derivation]),
    [_endTracking]: dart.fnType(dart.void, [core$.Derivation, dart.nullable(core$.Derivation)]),
    trackDerivation: dart.gFnType(T => [dart.nullable(T), [core$.Derivation, dart.fnType(T, [])]], T => [dart.nullable(core.Object)]),
    [_reportObserved]: dart.fnType(dart.void, [core$.Atom]),
    [_bindDependencies]: dart.fnType(dart.void, [core$.Derivation]),
    addPendingReaction: dart.fnType(dart.void, [core$.Reaction]),
    runReactions: dart.fnType(dart.void, []),
    [_runReactionsInternal]: dart.fnType(dart.void, []),
    propagateChanged: dart.fnType(dart.void, [core$.Atom]),
    [_propagatePossiblyChanged]: dart.fnType(dart.void, [core$.Atom]),
    [_propagateChangeConfirmed]: dart.fnType(dart.void, [core$.Atom]),
    [_clearObservables]: dart.fnType(dart.void, [core$.Derivation]),
    [_enqueueForUnobservation]: dart.fnType(dart.void, [core$.Atom]),
    [_resetDerivationState]: dart.fnType(dart.void, [core$.Derivation]),
    [_shouldCompute]: dart.fnType(core.bool, [core$.Derivation]),
    [_hasCaughtException]: dart.fnType(core.bool, [core$.Derivation]),
    isComputingDerivation: dart.fnType(core.bool, []),
    startUntracked: dart.fnType(dart.nullable(core$.Derivation), []),
    endUntracked: dart.fnType(dart.void, [dart.nullable(core$.Derivation)]),
    untracked: dart.gFnType(T => [T, [dart.fnType(T, [])]], T => [dart.nullable(core.Object)]),
    onReactionError: dart.fnType(dart.fnType(dart.void, []), [dart.fnType(dart.void, [core.Object, core$.Reaction])]),
    [_notifyReactionErrorHandlers]: dart.fnType(dart.void, [core.Object, core$.Reaction]),
    startAllowStateChanges: dart.fnType(core.bool, [], {allow: core.bool}, {}),
    endAllowStateChanges: dart.fnType(dart.void, [], {allow: core.bool}, {}),
    [_pushComputation]: dart.fnType(dart.void, []),
    [_popComputation]: dart.fnType(dart.void, []),
    [_resetState]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(core$.ReactiveContext, () => ({
    __proto__: dart.getGetters(core$.ReactiveContext.__proto__),
    [_config]: core$.ReactiveConfig,
    config: core$.ReactiveConfig,
    nextId: core.int,
    isWithinBatch: core.bool,
    isSpyEnabled: core.bool
  }));
  dart.setSetterSignature(core$.ReactiveContext, () => ({
    __proto__: dart.getSetters(core$.ReactiveContext.__proto__),
    [_config]: core$.ReactiveConfig,
    config: core$.ReactiveConfig
  }));
  dart.setLibraryUri(core$.ReactiveContext, I[16]);
  dart.setFieldSignature(core$.ReactiveContext, () => ({
    __proto__: dart.getFields(core$.ReactiveContext.__proto__),
    [__ReactiveContext__config]: dart.fieldType(dart.nullable(core$.ReactiveConfig)),
    [_state]: dart.fieldType(core$._ReactiveState)
  }));
  core$.DerivationState = class DerivationState extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (core$.DerivationState.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[21], 3, 6, "index");
    if (_name == null) dart.nullFailed(I[21], 3, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = core$.DerivationState.prototype;
  dart.addTypeTests(core$.DerivationState);
  dart.addTypeCaches(core$.DerivationState);
  dart.setLibraryUri(core$.DerivationState, I[16]);
  dart.setFieldSignature(core$.DerivationState, () => ({
    __proto__: dart.getFields(core$.DerivationState.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(core$.DerivationState, ['toString']);
  core$.DerivationState.notTracking = C[29] || CT.C29;
  core$.DerivationState.upToDate = C[28] || CT.C28;
  core$.DerivationState.possiblyStale = C[31] || CT.C31;
  core$.DerivationState.stale = C[30] || CT.C30;
  core$.DerivationState.values = C[32] || CT.C32;
  var __Derivation__observables = dart.privateName(core$, "_#Derivation#_observables");
  var __Derivation__dependenciesState = dart.privateName(core$, "_#Derivation#_dependenciesState");
  core$.Derivation = class Derivation extends core.Object {
    get [_observables]() {
      let t31;
      t31 = this[__Derivation__observables];
      return t31 == null ? dart.throw(new _internal.LateError.fieldNI("_observables")) : t31;
    }
    set [_observables](t31) {
      if (t31 == null) dart.nullFailed(I[21], 28, 18, "null");
      this[__Derivation__observables] = t31;
    }
    get [_dependenciesState]() {
      let t32;
      t32 = this[__Derivation__dependenciesState];
      return t32 == null ? dart.throw(new _internal.LateError.fieldNI("_dependenciesState")) : t32;
    }
    set [_dependenciesState](t32) {
      if (t32 == null) dart.nullFailed(I[21], 34, 24, "null");
      this[__Derivation__dependenciesState] = t32;
    }
  };
  (core$.Derivation.new = function() {
    this[__Derivation__observables] = null;
    this[_newObservables] = null;
    this[_errorValue] = null;
    this[__Derivation__dependenciesState] = null;
    ;
  }).prototype = core$.Derivation.prototype;
  dart.addTypeTests(core$.Derivation);
  dart.addTypeCaches(core$.Derivation);
  dart.setGetterSignature(core$.Derivation, () => ({
    __proto__: dart.getGetters(core$.Derivation.__proto__),
    [_observables]: core.Set$(core$.Atom),
    [_dependenciesState]: core$.DerivationState
  }));
  dart.setSetterSignature(core$.Derivation, () => ({
    __proto__: dart.getSetters(core$.Derivation.__proto__),
    [_observables]: core.Set$(core$.Atom),
    [_dependenciesState]: core$.DerivationState
  }));
  dart.setLibraryUri(core$.Derivation, I[16]);
  dart.setFieldSignature(core$.Derivation, () => ({
    __proto__: dart.getFields(core$.Derivation.__proto__),
    [__Derivation__observables]: dart.fieldType(dart.nullable(core.Set$(core$.Atom))),
    [_newObservables]: dart.fieldType(dart.nullable(core.Set$(core$.Atom))),
    [_errorValue]: dart.fieldType(dart.nullable(core$.MobXCaughtException)),
    [__Derivation__dependenciesState]: dart.fieldType(dart.nullable(core$.DerivationState))
  }));
  var _handlers = dart.privateName(core$, "_handlers");
  var _canHandle = dart.privateName(core$, "_canHandle");
  const _is_NotificationHandlers_default = Symbol('_is_NotificationHandlers_default');
  core$.NotificationHandlers$ = dart.generic(TNotification => {
    class NotificationHandlers extends core.Object {
      add(handler) {
        let t33;
        core.Function.as(handler);
        if (handler == null) dart.nullFailed(I[22], 10, 34, "handler");
        this[_handlers] == null ? this[_handlers] = new (T$._HashSetOfFunction()).new() : null;
        let listeners = (t33 = dart.nullCheck(this[_handlers]), (() => {
          t33.add(handler);
          return t33;
        })());
        return dart.fn(() => listeners.remove(handler), T$.VoidTovoid());
      }
      get hasHandlers() {
        let t33, t33$;
        t33$ = (t33 = this[_handlers], t33 == null ? null : t33[$isNotEmpty]);
        return t33$ == null ? false : t33$;
      }
      [_canHandle](notification) {
        if (!(notification != null)) dart.assertFailed(null, I[22], 20, 12, "notification != null");
        return this.hasHandlers;
      }
    }
    (NotificationHandlers.new = function(_context) {
      if (_context == null) dart.nullFailed(I[22], 4, 29, "_context");
      this[_handlers] = null;
      this[_context$1] = _context;
      ;
    }).prototype = NotificationHandlers.prototype;
    dart.addTypeTests(NotificationHandlers);
    NotificationHandlers.prototype[_is_NotificationHandlers_default] = true;
    dart.addTypeCaches(NotificationHandlers);
    dart.setMethodSignature(NotificationHandlers, () => ({
      __proto__: dart.getMethods(NotificationHandlers.__proto__),
      add: dart.fnType(dart.fnType(dart.void, []), [dart.nullable(core.Object)]),
      [_canHandle]: dart.fnType(core.bool, [TNotification])
    }));
    dart.setGetterSignature(NotificationHandlers, () => ({
      __proto__: dart.getGetters(NotificationHandlers.__proto__),
      hasHandlers: core.bool
    }));
    dart.setLibraryUri(NotificationHandlers, I[16]);
    dart.setFieldSignature(NotificationHandlers, () => ({
      __proto__: dart.getFields(NotificationHandlers.__proto__),
      [_context$1]: dart.finalFieldType(core$.ReactiveContext),
      [_handlers]: dart.fieldType(dart.nullable(core.Set$(core.Function)))
    }));
    return NotificationHandlers;
  });
  core$.NotificationHandlers = core$.NotificationHandlers$();
  dart.addTypeTests(core$.NotificationHandlers, _is_NotificationHandlers_default);
  var equals$0 = dart.privateName(core$, "Observable.equals");
  var _interceptors$ = dart.privateName(core$, "_interceptors");
  var _listeners$ = dart.privateName(core$, "_listeners");
  var _prepareNewValue = dart.privateName(core$, "_prepareNewValue");
  const _is_Observable_default = Symbol('_is_Observable_default');
  core$.Observable$ = dart.generic(T => {
    var InterceptorsOfT = () => (InterceptorsOfT = dart.constFn(core$.Interceptors$(T)))();
    var ChangeNotificationOfT = () => (ChangeNotificationOfT = dart.constFn(core$.ChangeNotification$(T)))();
    var ListenersOfChangeNotificationOfT = () => (ListenersOfChangeNotificationOfT = dart.constFn(core$.Listeners$(ChangeNotificationOfT())))();
    var WillChangeNotificationOfT = () => (WillChangeNotificationOfT = dart.constFn(core$.WillChangeNotification$(T)))();
    var WillChangeNotificationNOfT = () => (WillChangeNotificationNOfT = dart.constFn(dart.nullable(WillChangeNotificationOfT())))();
    var WillChangeNotificationOfTToWillChangeNotificationNOfT = () => (WillChangeNotificationOfTToWillChangeNotificationNOfT = dart.constFn(dart.fnType(WillChangeNotificationNOfT(), [WillChangeNotificationOfT()])))();
    class Observable extends core$.Atom {
      get equals() {
        return this[equals$0];
      }
      set equals(value) {
        super.equals = value;
      }
      static new(initialValue, opts) {
        let t33;
        let name = opts && 'name' in opts ? opts.name : null;
        let context = opts && 'context' in opts ? opts.context : null;
        let equals = opts && 'equals' in opts ? opts.equals : null;
        return new (core$.Observable$(T)).__((t33 = context, t33 == null ? context$.mainContext : t33), initialValue, {name: name, equals: equals});
      }
      get value() {
        this[_context$1].enforceReadPolicy(this);
        this.reportObserved();
        return this[_value$];
      }
      set value(value) {
        T.as(value);
        this[_context$1].enforceWritePolicy(this);
        let oldValue = this[_value$];
        let newValueDynamic = this[_prepareNewValue](value);
        if (dart.equals(newValueDynamic, core$.WillChangeNotification.unchanged)) {
          return;
        }
        let newValue = T.as(newValueDynamic);
        let notifySpy = this[_context$1].isSpyEnabled;
        if (dart.test(notifySpy)) {
          this[_context$1].spyReport(new core$.ObservableValueSpyEvent.new(this, {newValue: newValue, oldValue: oldValue, name: this.name}));
        }
        this[_value$] = newValue;
        this.reportChanged();
        if (dart.test(this[_listeners$].hasHandlers)) {
          let change = new (ChangeNotificationOfT()).new({newValue: value, oldValue: oldValue, type: core$.OperationType.update, object: this});
          this[_listeners$].notifyListeners(change);
        }
        if (dart.test(notifySpy)) {
          this[_context$1].spyReport(new core$.EndedSpyEvent.new({type: "observable", name: this.name}));
        }
      }
      [_prepareNewValue](newValue) {
        let prepared = newValue;
        if (dart.test(this[_interceptors$].hasHandlers)) {
          let change = this[_interceptors$].interceptChange(new (WillChangeNotificationOfT()).new({newValue: prepared, type: core$.OperationType.update, object: this}));
          if (change == null) {
            return core$.WillChangeNotification.unchanged;
          }
          prepared = change.newValue;
        }
        let areEqual = this.equals == null ? dart.equals(prepared, this.value) : dart.nullCheck(this.equals)(prepared, this[_value$]);
        return !dart.test(areEqual) ? prepared : core$.WillChangeNotification.unchanged;
      }
      observe(listener, opts) {
        if (listener == null) dart.nullFailed(I[23], 112, 51, "listener");
        let fireImmediately = opts && 'fireImmediately' in opts ? opts.fireImmediately : false;
        if (fireImmediately == null) dart.nullFailed(I[23], 113, 13, "fireImmediately");
        if (fireImmediately === true) {
          listener(new (ChangeNotificationOfT()).new({type: core$.OperationType.update, newValue: this[_value$], oldValue: null, object: this}));
        }
        return this[_listeners$].add(listener);
      }
      intercept(interceptor) {
        WillChangeNotificationOfTToWillChangeNotificationNOfT().as(interceptor);
        if (interceptor == null) dart.nullFailed(I[23], 126, 36, "interceptor");
        return this[_interceptors$].add(interceptor);
      }
    }
    (Observable.__ = function(context, _value, opts) {
      let t33;
      if (context == null) dart.nullFailed(I[23], 31, 32, "context");
      let name = opts && 'name' in opts ? opts.name : null;
      let equals = opts && 'equals' in opts ? opts.equals : null;
      this[_value$] = _value;
      this[equals$0] = equals;
      this[_interceptors$] = new (InterceptorsOfT()).new(context);
      this[_listeners$] = new (ListenersOfChangeNotificationOfT()).new(context);
      Observable.__proto__.__.call(this, context, {name: (t33 = name, t33 == null ? context.nameFor("Observable") : t33)});
      if (dart.test(this[_context$1].isSpyEnabled)) {
        this[_context$1].spyReport(new core$.ObservableValueSpyEvent.new(this, {newValue: this[_value$], name: this.name, isEnd: true}));
      }
    }).prototype = Observable.prototype;
    dart.addTypeTests(Observable);
    Observable.prototype[_is_Observable_default] = true;
    dart.addTypeCaches(Observable);
    Observable[dart.implements] = () => [core$.Interceptable$(T), core$.Listenable$(core$.ChangeNotification$(T)), core$.ObservableValue$(T)];
    dart.setMethodSignature(Observable, () => ({
      __proto__: dart.getMethods(Observable.__proto__),
      [_prepareNewValue]: dart.fnType(dart.dynamic, [T]),
      observe: dart.fnType(dart.fnType(dart.void, []), [dart.fnType(dart.void, [core$.ChangeNotification$(T)])], {fireImmediately: core.bool}, {}),
      intercept: dart.fnType(dart.fnType(dart.void, []), [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(Observable, () => ({
      __proto__: dart.getGetters(Observable.__proto__),
      value: T
    }));
    dart.setSetterSignature(Observable, () => ({
      __proto__: dart.getSetters(Observable.__proto__),
      value: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(Observable, I[16]);
    dart.setFieldSignature(Observable, () => ({
      __proto__: dart.getFields(Observable.__proto__),
      [_interceptors$]: dart.finalFieldType(core$.Interceptors$(T)),
      [_listeners$]: dart.finalFieldType(core$.Listeners$(core$.ChangeNotification$(T))),
      equals: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [dart.nullable(T), dart.nullable(T)]))),
      [_value$]: dart.fieldType(T)
    }));
    return Observable;
  });
  core$.Observable = core$.Observable$();
  dart.addTypeTests(core$.Observable, _is_Observable_default);
  const _is_ObservableValue_default = Symbol('_is_ObservableValue_default');
  core$.ObservableValue$ = dart.generic(T => {
    class ObservableValue extends core.Object {}
    (ObservableValue.new = function() {
      ;
    }).prototype = ObservableValue.prototype;
    dart.addTypeTests(ObservableValue);
    ObservableValue.prototype[_is_ObservableValue_default] = true;
    dart.addTypeCaches(ObservableValue);
    dart.setLibraryUri(ObservableValue, I[16]);
    return ObservableValue;
  });
  core$.ObservableValue = core$.ObservableValue$();
  dart.addTypeTests(core$.ObservableValue, _is_ObservableValue_default);
  core$.Reaction = class Reaction extends core.Object {};
  (core$.Reaction.new = function() {
    ;
  }).prototype = core$.Reaction.prototype;
  dart.addTypeTests(core$.Reaction);
  dart.addTypeCaches(core$.Reaction);
  core$.Reaction[dart.implements] = () => [core$.Derivation];
  dart.setLibraryUri(core$.Reaction, I[16]);
  var name$2 = dart.privateName(core$, "ReactionImpl.name");
  var _onError$ = dart.privateName(core$, "_onError");
  var __ReactionImpl__onInvalidate = dart.privateName(core$, "_#ReactionImpl#_onInvalidate");
  var _isScheduled = dart.privateName(core$, "_isScheduled");
  var _isDisposed = dart.privateName(core$, "_isDisposed");
  var _isRunning = dart.privateName(core$, "_isRunning");
  var _onInvalidate = dart.privateName(core$, "_onInvalidate");
  var _reportException = dart.privateName(core$, "_reportException");
  core$.ReactionImpl = class ReactionImpl extends core.Object {
    get name() {
      return this[name$2];
    }
    set name(value) {
      super.name = value;
    }
    get [_onInvalidate]() {
      let t33;
      t33 = this[__ReactionImpl__onInvalidate];
      return t33 == null ? dart.throw(new _internal.LateError.fieldNI("_onInvalidate")) : t33;
    }
    set [_onInvalidate](t33) {
      if (t33 == null) dart.nullFailed(I[24], 21, 24, "null");
      this[__ReactionImpl__onInvalidate] = t33;
    }
    get hasObservables() {
      return this[_observables][$isNotEmpty];
    }
    get errorValue() {
      return this[_errorValue];
    }
    get isDisposed() {
      return this[_isDisposed];
    }
    [_onBecomeStale]() {
      this.schedule();
    }
    startTracking() {
      this[_context$1].startBatch();
      this[_isRunning] = true;
      return this[_context$1][_startTracking](this);
    }
    endTracking(previous) {
      this[_context$1][_endTracking](this, previous);
      this[_isRunning] = false;
      if (dart.test(this[_isDisposed])) {
        this[_context$1][_clearObservables](this);
      }
      this[_context$1].endBatch();
    }
    track(fn) {
      if (fn == null) dart.nullFailed(I[24], 73, 30, "fn");
      this[_context$1].startBatch();
      let notify = this[_context$1].isSpyEnabled;
      let startTime = null;
      if (dart.test(notify)) {
        startTime = new core.DateTime.now();
        this[_context$1].spyReport(new core$.ReactionSpyEvent.new({name: this.name}));
      }
      this[_isRunning] = true;
      this[_context$1].trackDerivation(dart.void, this, fn);
      this[_isRunning] = false;
      if (dart.test(this[_isDisposed])) {
        this[_context$1][_clearObservables](this);
      }
      if (dart.test(this[_context$1][_hasCaughtException](this))) {
        this[_reportException](dart.nullCheck(this[_errorValue]));
      }
      if (dart.test(notify)) {
        this[_context$1].spyReport(new core$.EndedSpyEvent.new({type: "reaction", name: this.name, duration: new core.DateTime.now().difference(dart.nullCheck(startTime))}));
      }
      this[_context$1].endBatch();
    }
    [_run$]() {
      if (dart.test(this[_isDisposed])) {
        return;
      }
      this[_context$1].startBatch();
      this[_isScheduled] = false;
      if (dart.test(this[_context$1][_shouldCompute](this))) {
        try {
          this[_onInvalidate]();
        } catch (e$) {
          let e = dart.getThrown(e$);
          let s = dart.stackTrace(e$);
          if (core.Object.is(e)) {
            this[_errorValue] = new core$.MobXCaughtException.new(e, {stackTrace: s});
            this[_reportException](dart.nullCheck(this[_errorValue]));
          } else
            throw e$;
        }
      }
      this[_context$1].endBatch();
    }
    dispose() {
      let t35;
      if (dart.test(this[_isDisposed])) {
        return;
      }
      this[_isDisposed] = true;
      if (dart.test(this[_isRunning])) {
        return;
      }
      this[_context$1].spyReport(new core$.ReactionDisposedSpyEvent.new({name: this.name}));
      t35 = this[_context$1];
      (() => {
        t35.startBatch();
        t35[_clearObservables](this);
        t35.endBatch();
        return t35;
      })();
    }
    schedule() {
      let t35;
      if (dart.test(this[_isScheduled])) {
        return;
      }
      this[_isScheduled] = true;
      t35 = this[_context$1];
      (() => {
        t35.addPendingReaction(this);
        t35.runReactions();
        return t35;
      })();
    }
    [_suspend]() {
    }
    [_reportException](exception) {
      if (exception == null) dart.nullFailed(I[24], 166, 32, "exception");
      if (this[_onError$] != null) {
        dart.nullCheck(this[_onError$])(exception, this);
        return;
      }
      if (this[_context$1].config.disableErrorBoundaries === true) {
        dart.throw(exception);
      }
      if (dart.test(this[_context$1].isSpyEnabled)) {
        this[_context$1].spyReport(new core$.ReactionErrorSpyEvent.new(exception, {name: this.name}));
      }
      this[_context$1][_notifyReactionErrorHandlers](exception, this);
    }
  };
  (core$.ReactionImpl.new = function(_context, onInvalidate, opts) {
    if (_context == null) dart.nullFailed(I[24], 12, 21, "_context");
    if (onInvalidate == null) dart.nullFailed(I[24], 12, 42, "onInvalidate");
    let name = opts && 'name' in opts ? opts.name : null;
    if (name == null) dart.nullFailed(I[24], 13, 22, "name");
    let onError = opts && 'onError' in opts ? opts.onError : null;
    this[_onError$] = null;
    this[__ReactionImpl__onInvalidate] = null;
    this[_isScheduled] = false;
    this[_isDisposed] = false;
    this[_isRunning] = false;
    this[_newObservables] = null;
    this[_observables] = T$.LinkedHashSetOfAtom().new();
    this[_dependenciesState] = core$.DerivationState.notTracking;
    this[_errorValue] = null;
    this[_context$1] = _context;
    this[name$2] = name;
    this[_onInvalidate] = onInvalidate;
    this[_onError$] = onError;
  }).prototype = core$.ReactionImpl.prototype;
  dart.addTypeTests(core$.ReactionImpl);
  dart.addTypeCaches(core$.ReactionImpl);
  core$.ReactionImpl[dart.implements] = () => [core$.Reaction];
  dart.setMethodSignature(core$.ReactionImpl, () => ({
    __proto__: dart.getMethods(core$.ReactionImpl.__proto__),
    [_onBecomeStale]: dart.fnType(dart.void, []),
    startTracking: dart.fnType(dart.nullable(core$.Derivation), []),
    endTracking: dart.fnType(dart.void, [dart.nullable(core$.Derivation)]),
    track: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    [_run$]: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, []),
    schedule: dart.fnType(dart.void, []),
    [_suspend]: dart.fnType(dart.void, []),
    [_reportException]: dart.fnType(dart.void, [core.Object])
  }));
  dart.setGetterSignature(core$.ReactionImpl, () => ({
    __proto__: dart.getGetters(core$.ReactionImpl.__proto__),
    [_onInvalidate]: dart.fnType(dart.void, []),
    hasObservables: core.bool,
    errorValue: dart.nullable(core$.MobXCaughtException),
    isDisposed: core.bool
  }));
  dart.setSetterSignature(core$.ReactionImpl, () => ({
    __proto__: dart.getSetters(core$.ReactionImpl.__proto__),
    [_onInvalidate]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(core$.ReactionImpl, I[16]);
  dart.setFieldSignature(core$.ReactionImpl, () => ({
    __proto__: dart.getFields(core$.ReactionImpl.__proto__),
    [_onError$]: dart.fieldType(dart.nullable(dart.fnType(dart.void, [core.Object, core$.ReactionImpl]))),
    [_context$1]: dart.finalFieldType(core$.ReactiveContext),
    [__ReactionImpl__onInvalidate]: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
    [_isScheduled]: dart.fieldType(core.bool),
    [_isDisposed]: dart.fieldType(core.bool),
    [_isRunning]: dart.fieldType(core.bool),
    name: dart.finalFieldType(core.String),
    [_newObservables]: dart.fieldType(dart.nullable(core.Set$(core$.Atom))),
    [_observables]: dart.fieldType(core.Set$(core$.Atom)),
    [_dependenciesState]: dart.fieldType(core$.DerivationState),
    [_errorValue]: dart.fieldType(dart.nullable(core$.MobXCaughtException))
  }));
  var reaction$0 = dart.privateName(core$, "ReactionDisposer.reaction");
  core$.ReactionDisposer = class ReactionDisposer extends core.Object {
    get reaction() {
      return this[reaction$0];
    }
    set reaction(value) {
      super.reaction = value;
    }
    call() {
      return this.reaction.dispose();
    }
  };
  (core$.ReactionDisposer.new = function(reaction) {
    if (reaction == null) dart.nullFailed(I[25], 15, 25, "reaction");
    this[reaction$0] = reaction;
    ;
  }).prototype = core$.ReactionDisposer.prototype;
  dart.addTypeTests(core$.ReactionDisposer);
  dart.addTypeCaches(core$.ReactionDisposer);
  dart.setMethodSignature(core$.ReactionDisposer, () => ({
    __proto__: dart.getMethods(core$.ReactionDisposer.__proto__),
    call: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(core$.ReactionDisposer, I[16]);
  dart.setFieldSignature(core$.ReactionDisposer, () => ({
    __proto__: dart.getFields(core$.ReactionDisposer.__proto__),
    reaction: dart.finalFieldType(core$.Reaction)
  }));
  const _is_Interceptable_default = Symbol('_is_Interceptable_default');
  core$.Interceptable$ = dart.generic(T => {
    class Interceptable extends core.Object {}
    (Interceptable.new = function() {
      ;
    }).prototype = Interceptable.prototype;
    dart.addTypeTests(Interceptable);
    Interceptable.prototype[_is_Interceptable_default] = true;
    dart.addTypeCaches(Interceptable);
    dart.setLibraryUri(Interceptable, I[16]);
    return Interceptable;
  });
  core$.Interceptable = core$.Interceptable$();
  dart.addTypeTests(core$.Interceptable, _is_Interceptable_default);
  const _is_Interceptors_default = Symbol('_is_Interceptors_default');
  core$.Interceptors$ = dart.generic(T => {
    var WillChangeNotificationOfT = () => (WillChangeNotificationOfT = dart.constFn(core$.WillChangeNotification$(T)))();
    var WillChangeNotificationNOfT = () => (WillChangeNotificationNOfT = dart.constFn(dart.nullable(WillChangeNotificationOfT())))();
    var WillChangeNotificationOfTToWillChangeNotificationNOfT = () => (WillChangeNotificationOfTToWillChangeNotificationNOfT = dart.constFn(dart.fnType(WillChangeNotificationNOfT(), [WillChangeNotificationOfT()])))();
    var VoidToWillChangeNotificationNOfT = () => (VoidToWillChangeNotificationNOfT = dart.constFn(dart.fnType(WillChangeNotificationNOfT(), [])))();
    class Interceptors extends core$.NotificationHandlers$(core$.WillChangeNotification$(T)) {
      add(handler) {
        WillChangeNotificationOfTToWillChangeNotificationNOfT().as(handler);
        if (handler == null) dart.nullFailed(I[26], 20, 30, "handler");
        return super.add(handler);
      }
      interceptChange(change) {
        WillChangeNotificationOfT().as(change);
        if (change == null) dart.nullFailed(I[26], 22, 72, "change");
        if (!dart.test(this[_canHandle](change))) {
          return change;
        }
        return this[_context$1].untracked(WillChangeNotificationNOfT(), dart.fn(() => {
          let t35, t35$;
          let nextChange = change;
          for (let interceptor of (t35$ = (t35 = this[_handlers], t35 == null ? null : t35[$toList]({growable: false})), t35$ == null ? [] : t35$)) {
            nextChange = WillChangeNotificationOfTToWillChangeNotificationNOfT().as(interceptor)(dart.nullCheck(nextChange));
            if (nextChange == null) {
              break;
            }
          }
          return nextChange;
        }, VoidToWillChangeNotificationNOfT()));
      }
    }
    (Interceptors.new = function(context) {
      if (context == null) dart.nullFailed(I[26], 17, 32, "context");
      Interceptors.__proto__.new.call(this, context);
      ;
    }).prototype = Interceptors.prototype;
    dart.addTypeTests(Interceptors);
    Interceptors.prototype[_is_Interceptors_default] = true;
    dart.addTypeCaches(Interceptors);
    dart.setMethodSignature(Interceptors, () => ({
      __proto__: dart.getMethods(Interceptors.__proto__),
      interceptChange: dart.fnType(dart.nullable(core$.WillChangeNotification$(T)), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(Interceptors, I[16]);
    return Interceptors;
  });
  core$.Interceptors = core$.Interceptors$();
  dart.addTypeTests(core$.Interceptors, _is_Interceptors_default);
  const _is_Listenable_default = Symbol('_is_Listenable_default');
  core$.Listenable$ = dart.generic(TNotification => {
    class Listenable extends core.Object {}
    (Listenable.new = function() {
      ;
    }).prototype = Listenable.prototype;
    dart.addTypeTests(Listenable);
    Listenable.prototype[_is_Listenable_default] = true;
    dart.addTypeCaches(Listenable);
    dart.setLibraryUri(Listenable, I[16]);
    return Listenable;
  });
  core$.Listenable = core$.Listenable$();
  dart.addTypeTests(core$.Listenable, _is_Listenable_default);
  const _is_Listeners_default = Symbol('_is_Listeners_default');
  core$.Listeners$ = dart.generic(TNotification => {
    var TNotificationTovoid = () => (TNotificationTovoid = dart.constFn(dart.fnType(dart.void, [TNotification])))();
    class Listeners extends core$.NotificationHandlers$(TNotification) {
      add(handler) {
        TNotificationTovoid().as(handler);
        if (handler == null) dart.nullFailed(I[27], 17, 39, "handler");
        return super.add(handler);
      }
      notifyListeners(change) {
        TNotification.as(change);
        if (!dart.test(this[_canHandle](change))) {
          return;
        }
        this[_context$1].untracked(core.Null, dart.fn(() => {
          let t35, t35$;
          for (let listener of (t35$ = (t35 = this[_handlers], t35 == null ? null : t35[$toList]({growable: false})), t35$ == null ? [] : t35$)) {
            dart.dcall(listener, [change]);
          }
        }, T$.VoidToNull()));
      }
    }
    (Listeners.new = function(context) {
      if (context == null) dart.nullFailed(I[27], 14, 29, "context");
      Listeners.__proto__.new.call(this, context);
      ;
    }).prototype = Listeners.prototype;
    dart.addTypeTests(Listeners);
    Listeners.prototype[_is_Listeners_default] = true;
    dart.addTypeCaches(Listeners);
    dart.setMethodSignature(Listeners, () => ({
      __proto__: dart.getMethods(Listeners.__proto__),
      notifyListeners: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(Listeners, I[16]);
    return Listeners;
  });
  core$.Listeners = core$.Listeners$();
  dart.addTypeTests(core$.Listeners, _is_Listeners_default);
  var object$3 = dart.privateName(core$, "SpyEvent.object");
  var name$3 = dart.privateName(core$, "SpyEvent.name");
  var type$4 = dart.privateName(core$, "SpyEvent.type");
  var duration$ = dart.privateName(core$, "SpyEvent.duration");
  var isStart$ = dart.privateName(core$, "SpyEvent.isStart");
  var isEnd$ = dart.privateName(core$, "SpyEvent.isEnd");
  core$.SpyEvent = class SpyEvent extends core.Object {
    get object() {
      return this[object$3];
    }
    set object(value) {
      super.object = value;
    }
    get name() {
      return this[name$3];
    }
    set name(value) {
      super.name = value;
    }
    get type() {
      return this[type$4];
    }
    set type(value) {
      super.type = value;
    }
    get duration() {
      return this[duration$];
    }
    set duration(value) {
      super.duration = value;
    }
    get isStart() {
      return this[isStart$];
    }
    set isStart(value) {
      super.isStart = value;
    }
    get isEnd() {
      return this[isEnd$];
    }
    set isEnd(value) {
      super.isEnd = value;
    }
    get sentinel() {
      let hasStart = this.isStart === true && this.isEnd === false;
      let hasEnd = this.isEnd === true && this.isStart === false;
      if (hasStart) {
        return "(START)";
      }
      if (hasEnd) {
        return "(END" + (this.duration == null ? "" : " after " + dart.str(dart.nullCheck(this.duration).inMilliseconds) + "ms") + ")";
      }
      return "";
    }
    toString() {
      return dart.str(this.type) + dart.str(this.sentinel) + " " + dart.str(this.name);
    }
  };
  (core$.SpyEvent.__ = function(object, opts) {
    let type = opts && 'type' in opts ? opts.type : null;
    if (type == null) dart.nullFailed(I[28], 7, 22, "type");
    let name = opts && 'name' in opts ? opts.name : null;
    if (name == null) dart.nullFailed(I[28], 8, 21, "name");
    let duration = opts && 'duration' in opts ? opts.duration : null;
    let isStart = opts && 'isStart' in opts ? opts.isStart : false;
    if (isStart == null) dart.nullFailed(I[28], 10, 12, "isStart");
    let isEnd = opts && 'isEnd' in opts ? opts.isEnd : false;
    if (isEnd == null) dart.nullFailed(I[28], 11, 12, "isEnd");
    this[object$3] = object;
    this[type$4] = type;
    this[name$3] = name;
    this[duration$] = duration;
    this[isStart$] = isStart;
    this[isEnd$] = isEnd;
    ;
  }).prototype = core$.SpyEvent.prototype;
  dart.addTypeTests(core$.SpyEvent);
  dart.addTypeCaches(core$.SpyEvent);
  dart.setGetterSignature(core$.SpyEvent, () => ({
    __proto__: dart.getGetters(core$.SpyEvent.__proto__),
    sentinel: core.String
  }));
  dart.setLibraryUri(core$.SpyEvent, I[16]);
  dart.setFieldSignature(core$.SpyEvent, () => ({
    __proto__: dart.getFields(core$.SpyEvent.__proto__),
    object: dart.finalFieldType(dart.dynamic),
    name: dart.finalFieldType(core.String),
    type: dart.finalFieldType(core.String),
    duration: dart.finalFieldType(dart.nullable(core.Duration)),
    isStart: dart.finalFieldType(core.bool),
    isEnd: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(core$.SpyEvent, ['toString']);
  var newValue$3 = dart.privateName(core$, "ObservableValueSpyEvent.newValue");
  var oldValue$2 = dart.privateName(core$, "ObservableValueSpyEvent.oldValue");
  core$.ObservableValueSpyEvent = class ObservableValueSpyEvent extends core$.SpyEvent {
    get newValue() {
      return this[newValue$3];
    }
    set newValue(value) {
      super.newValue = value;
    }
    get oldValue() {
      return this[oldValue$2];
    }
    set oldValue(value) {
      super.oldValue = value;
    }
    toString() {
      return dart.str(super.toString()) + "=" + dart.str(this.newValue) + ", previously=" + dart.str(this.oldValue);
    }
  };
  (core$.ObservableValueSpyEvent.new = function(object, opts) {
    let newValue = opts && 'newValue' in opts ? opts.newValue : null;
    let oldValue = opts && 'oldValue' in opts ? opts.oldValue : null;
    let name = opts && 'name' in opts ? opts.name : null;
    if (name == null) dart.nullFailed(I[28], 43, 54, "name");
    let isEnd = opts && 'isEnd' in opts ? opts.isEnd : false;
    if (isEnd == null) dart.nullFailed(I[28], 43, 65, "isEnd");
    this[newValue$3] = newValue;
    this[oldValue$2] = oldValue;
    core$.ObservableValueSpyEvent.__proto__.__.call(this, object, {type: "observable", name: name, isStart: true, isEnd: isEnd});
    ;
  }).prototype = core$.ObservableValueSpyEvent.prototype;
  dart.addTypeTests(core$.ObservableValueSpyEvent);
  dart.addTypeCaches(core$.ObservableValueSpyEvent);
  dart.setLibraryUri(core$.ObservableValueSpyEvent, I[16]);
  dart.setFieldSignature(core$.ObservableValueSpyEvent, () => ({
    __proto__: dart.getFields(core$.ObservableValueSpyEvent.__proto__),
    newValue: dart.finalFieldType(dart.dynamic),
    oldValue: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(core$.ObservableValueSpyEvent, ['toString']);
  core$.ComputedValueSpyEvent = class ComputedValueSpyEvent extends core$.SpyEvent {};
  (core$.ComputedValueSpyEvent.new = function(object, opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    if (name == null) dart.nullFailed(I[28], 55, 50, "name");
    core$.ComputedValueSpyEvent.__proto__.__.call(this, object, {type: "computed", name: name, isStart: true, isEnd: true});
    ;
  }).prototype = core$.ComputedValueSpyEvent.prototype;
  dart.addTypeTests(core$.ComputedValueSpyEvent);
  dart.addTypeCaches(core$.ComputedValueSpyEvent);
  dart.setLibraryUri(core$.ComputedValueSpyEvent, I[16]);
  core$.ReactionSpyEvent = class ReactionSpyEvent extends core$.SpyEvent {};
  (core$.ReactionSpyEvent.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    if (name == null) dart.nullFailed(I[28], 61, 37, "name");
    core$.ReactionSpyEvent.__proto__.__.call(this, null, {type: "reaction", name: name, isStart: true});
    ;
  }).prototype = core$.ReactionSpyEvent.prototype;
  dart.addTypeTests(core$.ReactionSpyEvent);
  dart.addTypeCaches(core$.ReactionSpyEvent);
  dart.setLibraryUri(core$.ReactionSpyEvent, I[16]);
  var error$ = dart.privateName(core$, "ReactionErrorSpyEvent.error");
  core$.ReactionErrorSpyEvent = class ReactionErrorSpyEvent extends core$.SpyEvent {
    get error() {
      return this[error$];
    }
    set error(value) {
      super.error = value;
    }
    toString() {
      return dart.str(super.toString()) + " " + dart.str(this.error);
    }
  };
  (core$.ReactionErrorSpyEvent.new = function(error, opts) {
    if (error == null) dart.nullFailed(I[28], 67, 10, "error");
    let name = opts && 'name' in opts ? opts.name : null;
    if (name == null) dart.nullFailed(I[28], 68, 21, "name");
    this[error$] = error;
    core$.ReactionErrorSpyEvent.__proto__.__.call(this, null, {type: "reaction-error", name: name, isStart: true, isEnd: true});
    ;
  }).prototype = core$.ReactionErrorSpyEvent.prototype;
  dart.addTypeTests(core$.ReactionErrorSpyEvent);
  dart.addTypeCaches(core$.ReactionErrorSpyEvent);
  dart.setLibraryUri(core$.ReactionErrorSpyEvent, I[16]);
  dart.setFieldSignature(core$.ReactionErrorSpyEvent, () => ({
    __proto__: dart.getFields(core$.ReactionErrorSpyEvent.__proto__),
    error: dart.finalFieldType(core.Object)
  }));
  dart.defineExtensionMethods(core$.ReactionErrorSpyEvent, ['toString']);
  core$.ReactionDisposedSpyEvent = class ReactionDisposedSpyEvent extends core$.SpyEvent {};
  (core$.ReactionDisposedSpyEvent.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    if (name == null) dart.nullFailed(I[28], 80, 21, "name");
    core$.ReactionDisposedSpyEvent.__proto__.__.call(this, null, {type: "reaction-dispose", name: name, isStart: true, isEnd: true});
    ;
  }).prototype = core$.ReactionDisposedSpyEvent.prototype;
  dart.addTypeTests(core$.ReactionDisposedSpyEvent);
  dart.addTypeCaches(core$.ReactionDisposedSpyEvent);
  dart.setLibraryUri(core$.ReactionDisposedSpyEvent, I[16]);
  core$.ActionSpyEvent = class ActionSpyEvent extends core$.SpyEvent {};
  (core$.ActionSpyEvent.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    if (name == null) dart.nullFailed(I[28], 87, 21, "name");
    core$.ActionSpyEvent.__proto__.__.call(this, null, {type: "action", name: name, isStart: true});
    ;
  }).prototype = core$.ActionSpyEvent.prototype;
  dart.addTypeTests(core$.ActionSpyEvent);
  dart.addTypeCaches(core$.ActionSpyEvent);
  dart.setLibraryUri(core$.ActionSpyEvent, I[16]);
  core$.EndedSpyEvent = class EndedSpyEvent extends core$.SpyEvent {};
  (core$.EndedSpyEvent.new = function(opts) {
    let type = opts && 'type' in opts ? opts.type : null;
    if (type == null) dart.nullFailed(I[28], 93, 24, "type");
    let name = opts && 'name' in opts ? opts.name : null;
    if (name == null) dart.nullFailed(I[28], 93, 46, "name");
    let duration = opts && 'duration' in opts ? opts.duration : null;
    core$.EndedSpyEvent.__proto__.__.call(this, null, {type: type, name: name, duration: duration, isEnd: true});
    ;
  }).prototype = core$.EndedSpyEvent.prototype;
  dart.addTypeTests(core$.EndedSpyEvent);
  dart.addTypeCaches(core$.EndedSpyEvent);
  dart.setLibraryUri(core$.EndedSpyEvent, I[16]);
  core$['ConditionalAction|conditionallyRunInAction'] = function ConditionalAction$124conditionallyRunInAction($this, fn, atom, opts) {
    let t37, t36;
    if ($this == null) dart.nullFailed(I[29], 6, 8, "#this");
    if (fn == null) dart.nullFailed(I[29], 6, 49, "fn");
    if (atom == null) dart.nullFailed(I[29], 6, 58, "atom");
    let name = opts && 'name' in opts ? opts.name : null;
    let actionController = opts && 'actionController' in opts ? opts.actionController : null;
    if (dart.test($this.isWithinBatch)) {
      $this.enforceWritePolicy(atom);
      fn();
    } else {
      let controller = (t36 = actionController, t36 == null ? new core$.ActionController.new({context: $this, name: (t37 = name, t37 == null ? $this.nameFor("conditionallyRunInAction") : t37)}) : t36);
      let runInfo = controller.startAction();
      try {
        $this.enforceWritePolicy(atom);
        fn();
      } finally {
        controller.endAction(runInfo);
      }
    }
  };
  core$['ConditionalAction|get#conditionallyRunInAction'] = function ConditionalAction$124get$35conditionallyRunInAction($this) {
    if ($this == null) dart.nullFailed(I[29], 6, 8, "#this");
    return dart.fn((fn, atom, opts) => {
      if (fn == null) dart.nullFailed(I[29], 6, 49, "fn");
      if (atom == null) dart.nullFailed(I[29], 6, 58, "atom");
      let name = opts && 'name' in opts ? opts.name : null;
      let actionController = opts && 'actionController' in opts ? opts.actionController : null;
      return core$['ConditionalAction|conditionallyRunInAction']($this, fn, atom, {name: name, actionController: actionController});
    }, T$.FnAndAtom__Tovoid());
  };
  core$.createAutorun = function createAutorun(context, trackingFn, opts) {
    let t41;
    if (context == null) dart.nullFailed(I[25], 25, 21, "context");
    if (trackingFn == null) dart.nullFailed(I[25], 25, 49, "trackingFn");
    let name = opts && 'name' in opts ? opts.name : null;
    let delay = opts && 'delay' in opts ? opts.delay : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let rxn = null;
    function rxn$35get() {
      let t38;
      t38 = rxn;
      return t38 == null ? dart.throw(new _internal.LateError.localNI("rxn")) : t38;
    }
    dart.fn(rxn$35get, T$.VoidToReactionImpl());
    function rxn$35set(t39) {
      if (t39 == null) dart.nullFailed(I[25], 27, 21, "null");
      return rxn = t39;
    }
    dart.fn(rxn$35set, T$.ReactionImplTodynamic());
    let rxnName = (t41 = name, t41 == null ? context.nameFor("Autorun") : t41);
    if (delay == null) {
      rxn$35set(new core$.ReactionImpl.new(context, dart.fn(() => {
        rxn$35get().track(dart.fn(() => trackingFn(rxn$35get()), T$.VoidTovoid()));
      }, T$.VoidToNull()), {name: rxnName, onError: onError}));
    } else {
      let scheduler = utils.createDelayedScheduler(delay);
      let isScheduled = false;
      let timer = null;
      rxn$35set(new core$.ReactionImpl.new(context, dart.fn(() => {
        let t41;
        if (!isScheduled) {
          isScheduled = true;
          t41 = timer;
          t41 == null ? null : t41.cancel();
          timer = null;
          timer = scheduler(dart.fn(() => {
            let t41;
            isScheduled = false;
            if (!dart.test(rxn$35get().isDisposed)) {
              rxn$35get().track(dart.fn(() => trackingFn(rxn$35get()), T$.VoidTovoid()));
            } else {
              t41 = timer;
              t41 == null ? null : t41.cancel();
            }
          }, T$.VoidTovoid()));
        }
      }, T$.VoidToNull()), {name: rxnName, onError: onError}));
    }
    rxn$35get().schedule();
    return new core$.ReactionDisposer.new(rxn$35get());
  };
  core$.createReaction = function createReaction(T, context, fn, effect, opts) {
    let t45;
    if (context == null) dart.nullFailed(I[25], 67, 21, "context");
    if (fn == null) dart.nullFailed(I[25], 67, 51, "fn");
    if (effect == null) dart.nullFailed(I[25], 67, 72, "effect");
    let name = opts && 'name' in opts ? opts.name : null;
    let delay = opts && 'delay' in opts ? opts.delay : null;
    let fireImmediately = opts && 'fireImmediately' in opts ? opts.fireImmediately : null;
    let equals = opts && 'equals' in opts ? opts.equals : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let rxn = null;
    function rxn$35get() {
      let t42;
      t42 = rxn;
      return t42 == null ? dart.throw(new _internal.LateError.localNI("rxn")) : t42;
    }
    dart.fn(rxn$35get, T$.VoidToReactionImpl());
    function rxn$35set(t43) {
      if (t43 == null) dart.nullFailed(I[25], 73, 21, "null");
      return rxn = t43;
    }
    dart.fn(rxn$35set, T$.ReactionImplTodynamic());
    let rxnName = (t45 = name, t45 == null ? context.nameFor("Reaction") : t45);
    let effectAction = core$.Action.new(dart.fn(value => effect(T.as(value)), dart.fnType(dart.void, [dart.nullable(T)])), {name: dart.str(rxnName) + "-effect"});
    let runSync = delay == null;
    let scheduler = delay != null ? utils.createDelayedScheduler(delay) : null;
    let firstTime = true;
    let value = null;
    function reactionRunner() {
      if (dart.test(rxn$35get().isDisposed)) {
        return;
      }
      let changed = false;
      rxn$35get().track(dart.fn(() => {
        let nextValue = fn(rxn$35get());
        let isEqual = equals != null ? equals(nextValue, value) : dart.equals(nextValue, value);
        changed = firstTime || !dart.test(isEqual);
        value = nextValue;
      }, T$.VoidTovoid()));
      let canInvokeEffect = firstTime && fireImmediately === true || !firstTime && changed;
      if (canInvokeEffect) {
        effectAction.call([value]);
      }
      if (firstTime) {
        firstTime = false;
      }
    }
    dart.fn(reactionRunner, T$.VoidTovoid());
    let timer = null;
    let isScheduled = false;
    rxn$35set(new core$.ReactionImpl.new(context, dart.fn(() => {
      let t45;
      if (firstTime || runSync) {
        reactionRunner();
      } else if (!isScheduled) {
        isScheduled = true;
        t45 = timer;
        t45 == null ? null : t45.cancel();
        timer = null;
        timer = dart.nullCheck(scheduler)(dart.fn(() => {
          let t45;
          isScheduled = false;
          if (!dart.test(rxn$35get().isDisposed)) {
            reactionRunner();
          } else {
            t45 = timer;
            t45 == null ? null : t45.cancel();
          }
        }, T$.VoidTovoid()));
      }
    }, T$.VoidToNull()), {name: rxnName, onError: onError}));
    rxn$35get().schedule();
    return new core$.ReactionDisposer.new(rxn$35get());
  };
  core$.createWhenReaction = function createWhenReaction(context, predicate, effect, opts) {
    let t45;
    if (context == null) dart.nullFailed(I[25], 145, 53, "context");
    if (predicate == null) dart.nullFailed(I[25], 146, 29, "predicate");
    if (effect == null) dart.nullFailed(I[25], 146, 56, "effect");
    let name = opts && 'name' in opts ? opts.name : null;
    let timeout = opts && 'timeout' in opts ? opts.timeout : null;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let rxnName = (t45 = name, t45 == null ? context.nameFor("When") : t45);
    let effectAction = core$.Action.new(effect, {name: dart.str(rxnName) + "-effect"});
    let timer = null;
    let dispose = null;
    function dispose$35get() {
      let t46;
      t46 = dispose;
      return t46 == null ? dart.throw(new _internal.LateError.localNI("dispose")) : t46;
    }
    dart.fn(dispose$35get, T$.VoidToReactionDisposer());
    function dispose$35set(t47) {
      if (t47 == null) dart.nullFailed(I[25], 152, 25, "null");
      return dispose = t47;
    }
    dart.fn(dispose$35set, T$.ReactionDisposerTodynamic());
    if (timeout != null) {
      timer = async.Timer.new(utils.ms['*'](timeout), dart.fn(() => {
        if (!dart.test(dispose$35get().reaction.isDisposed)) {
          dispose$35get().call();
          let error = new core$.MobXException.new("WHEN_TIMEOUT");
          if (onError != null) {
            onError(error, dispose$35get().reaction);
          } else {
            dart.throw(error);
          }
        }
      }, T$.VoidTovoid()));
    }
    return dispose$35set(core$.createAutorun(context, dart.fn(reaction => {
      let t49;
      if (reaction == null) dart.nullFailed(I[25], 172, 44, "reaction");
      if (dart.test(predicate(reaction))) {
        reaction.dispose();
        t49 = timer;
        t49 == null ? null : t49.cancel();
        timer = null;
        effectAction.call();
      }
    }, T$.ReactionToNull()), {name: rxnName, onError: onError}));
  };
  core$.createAsyncWhenReaction = function createAsyncWhenReaction(context, predicate, opts) {
    if (context == null) dart.nullFailed(I[25], 184, 21, "context");
    if (predicate == null) dart.nullFailed(I[25], 184, 54, "predicate");
    let name = opts && 'name' in opts ? opts.name : null;
    let timeout = opts && 'timeout' in opts ? opts.timeout : null;
    let completer = T$.CompleterOfvoid().new();
    core$.createWhenReaction(context, predicate, dart.bind(completer, 'complete'), {name: name, timeout: timeout, onError: dart.fn((error, reaction) => {
        if (error == null) dart.nullFailed(I[25], 188, 47, "error");
        if (reaction == null) dart.nullFailed(I[25], 188, 54, "reaction");
        reaction.dispose();
        completer.completeError(error);
      }, T$.ObjectAndReactionTovoid())});
    return completer.future;
  };
  core$._once = function _once(fn) {
    if (fn == null) dart.nullFailed(I[28], 98, 32, "fn");
    let invoked = false;
    return dart.fn(() => {
      if (invoked) {
        return;
      }
      invoked = true;
      dart.dcall(fn, []);
    }, T$.VoidTovoid());
  };
  dart.copyProperties(core$, {
    get _isDebugMode() {
      let debug = false;
      if (!dart.test(dart.fn(() => {
        debug = true;
        return true;
      }, T$.VoidTobool())())) dart.assertFailed(null, I[28], 115, 10, "() {\n    debug = true;\n    return true;\n  }()");
      return debug;
    }
  });
  context$.createContext = function createContext(opts) {
    let config = opts && 'config' in opts ? opts.config : null;
    return new core$.ReactiveContext.new({config: config});
  };
  dart.defineLazy(context$, {
    /*context$.mainContext*/get mainContext() {
      return context$.createContext({config: core$.ReactiveConfig.main});
    }
  }, false);
  action.runInAction = function runInAction(T, fn, opts) {
    if (fn == null) dart.nullFailed(I[30], 10, 31, "fn");
    let name = opts && 'name' in opts ? opts.name : null;
    let context = opts && 'context' in opts ? opts.context : null;
    return T.as(core$.Action.new(fn, {name: name, context: context}).call());
  };
  action.untracked = function untracked(T, fn, opts) {
    let t49;
    if (fn == null) dart.nullFailed(I[30], 15, 29, "fn");
    let context = opts && 'context' in opts ? opts.context : null;
    return (t49 = context, t49 == null ? context$.mainContext : t49).untracked(T, fn);
  };
  action.transaction = function transaction(T, fn, opts) {
    let t49, t49$;
    if (fn == null) dart.nullFailed(I[30], 21, 31, "fn");
    let context = opts && 'context' in opts ? opts.context : null;
    let ctx = (t49$ = (t49 = context, t49 == null ? context$.mainContext : t49), (() => {
      t49$.startBatch();
      return t49$;
    })());
    try {
      return fn();
    } finally {
      ctx.endBatch();
    }
  };
  dart.defineLazy(mobx, {
    /*mobx.version*/get version() {
      return "2.0.1";
    }
  }, false);
  dart.trackLibraries("packages/mobx/src/api/extensions.dart", {
    "package:mobx/src/api/extensions.dart": extensions,
    "package:mobx/src/core/atom_extensions.dart": atom_extensions,
    "package:mobx/src/api/reaction.dart": reaction,
    "package:mobx/src/api/observable_collections.dart": observable_collections,
    "package:mobx/src/api/async.dart": async$,
    "package:mobx/src/core.dart": core$,
    "package:mobx/src/api/context.dart": context$,
    "package:mobx/src/api/action.dart": action,
    "package:mobx/mobx.dart": mobx
  }, {
    "package:mobx/src/api/extensions.dart": ["extensions/observable_stream_extension.dart", "extensions/observable_future_extension.dart", "extensions/observable_list_extension.dart", "extensions/observable_set_extension.dart", "extensions/observable_map_extension.dart"],
    "package:mobx/src/api/observable_collections.dart": ["observable_collections/observable_list.dart", "observable_collections/observable_map.dart", "observable_collections/observable_set.dart"],
    "package:mobx/src/api/async.dart": ["async/async_action.dart", "async/observable_future.dart", "async/observable_stream.dart"],
    "package:mobx/src/core.dart": ["core/action.dart", "core/atom.dart", "core/computed.dart", "core/context.dart", "core/context_extensions.dart", "core/derivation.dart", "core/notification_handlers.dart", "core/observable.dart", "core/observable_value.dart", "core/reaction.dart", "core/reaction_helper.dart", "interceptable.dart", "listenable.dart", "core/spy.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["extensions/observable_future_extension.dart","extensions/observable_list_extension.dart","extensions/observable_map_extension.dart","extensions/observable_set_extension.dart","extensions/observable_stream_extension.dart","../core/atom_extensions.dart","reaction.dart","observable_collections/observable_list.dart","observable_collections/observable_map.dart","observable_collections/observable_set.dart","async/async_action.dart","async/observable_future.dart","async/observable_stream.dart","../core.dart","../core/action.dart","../core/atom.dart","../core/computed.dart","../core/context.dart","../core/derivation.dart","../core/notification_handlers.dart","../core/observable.dart","../core/observable_value.dart","../core/reaction.dart","../core/reaction_helper.dart","../interceptable.dart","../listenable.dart","../core/spy.dart","../core/context_extensions.dart","context.dart","action.dart","../../mobx.dart"],"names":[],"mappings":"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","file":"../../../../../../../../packages/mobx/src/api/extensions.dart.lib.js"}');
  // Exports:
  return {
    src__api__extensions: extensions,
    src__core__atom_extensions: atom_extensions,
    src__api__reaction: reaction,
    src__api__observable_collections: observable_collections,
    src__api__async: async$,
    src__core: core$,
    src__api__context: context$,
    src__api__action: action,
    mobx: mobx
  };
}));

//# sourceMappingURL=extensions.dart.lib.js.map
